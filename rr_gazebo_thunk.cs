//This file is automatically generated. DO NOT EDIT!
using System;
using RobotRaconteur;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 0108

namespace org.gazebosim.gazebo
{
public class Contact
{
    public string contact_name1;
    public string contact_name2;
}

public class WorldTimes
{
    public com.robotraconteur.datetime.Duration sim_time;
    public com.robotraconteur.datetime.Duration real_time;
    public com.robotraconteur.datetime.DateTimeUTC wall_time;
    public com.robotraconteur.datetime.DateTimeUTC start_time;
}

[NamedArrayElementTypeAndCount(typeof(double), 12)]
public struct JointWrench
{
    public com.robotraconteur.geometry.Wrench body1_wrench;
    public com.robotraconteur.geometry.Wrench body2_wrench;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[12]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 12) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 0, 6);
    body1_wrench.GetNumericArray(ref rr_a0);
    var rr_a6 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 6, 6);
    body2_wrench.GetNumericArray(ref rr_a6);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 12) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 0, 6);
    body1_wrench.AssignFromNumericArray(ref rr_a0);
    var rr_a6 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 6, 6);
    body2_wrench.AssignFromNumericArray(ref rr_a6);
    }
}

[RobotRaconteurServiceObjectInterface()]
public interface Base
{
    string name { get; 	}
    string scoped_name { get; 	}
}

[RobotRaconteurServiceObjectInterface()]
public interface Server : com.robotraconteur.device.Device
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    List<string> world_names { get; 	}
    List<string> sensor_names { get; 	}
    World get_worlds(string ind);
    Sensor get_sensors(string ind);
}

[RobotRaconteurServiceObjectInterface()]
public interface World
{
    string name { get; 	}
    List<string> model_names { get; 	}
    List<string> light_names { get; 	}
    void insert_model(string model_sdf, string model_name, com.robotraconteur.geometry.Pose model_pose);
    void remove_model(string model_name);
    Model get_models(string ind);
    Light get_lights(string ind);
    Wire<com.robotraconteur.datetime.Duration> sim_time{ get; set; }
    Wire<WorldTimes> time{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface Entity : Base, com.robotraconteur.device.isoch.IsochDevice
{
    string name { get; 	}
    string scoped_name { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    void setf_world_pose(com.robotraconteur.geometry.Pose pose);
    void setf_relative_pose(com.robotraconteur.geometry.Pose pose);
    Wire<com.robotraconteur.geometry.Pose> world_pose{ get; set; }
    Wire<com.robotraconteur.geometry.Pose> relative_pose{ get; set; }
    Wire<com.robotraconteur.geometry.SpatialVelocity> world_velocity{ get; set; }
    Wire<com.robotraconteur.geometry.SpatialVelocity> relative_velocity{ get; set; }
    Wire<com.robotraconteur.geometry.SpatialAcceleration> world_acceleration{ get; set; }
    Wire<com.robotraconteur.geometry.SpatialAcceleration> relative_acceleration{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface Model : Entity, Base, com.robotraconteur.device.isoch.IsochDevice
{
    string name { get; 	}
    string scoped_name { get; 	}
    List<string> child_model_names { get; 	}
    List<string> link_names { get; 	}
    List<string> joint_names { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    void setf_world_pose(com.robotraconteur.geometry.Pose pose);
    void setf_relative_pose(com.robotraconteur.geometry.Pose pose);
    void create_joint_controller();
    void destroy_joint_controller();
    void create_kinematic_joint_controller();
    void destroy_kinematic_joint_controller();
    Model get_child_models(string ind);
    Link get_links(string ind);
    Joint get_joints(string ind);
    JointController get_joint_controller();
    JointController get_kinematic_joint_controller();
    Wire<com.robotraconteur.geometry.Pose> world_pose{ get; set; }
    Wire<com.robotraconteur.geometry.Pose> relative_pose{ get; set; }
    Wire<com.robotraconteur.geometry.SpatialVelocity> world_velocity{ get; set; }
    Wire<com.robotraconteur.geometry.SpatialVelocity> relative_velocity{ get; set; }
    Wire<com.robotraconteur.geometry.SpatialAcceleration> world_acceleration{ get; set; }
    Wire<com.robotraconteur.geometry.SpatialAcceleration> relative_acceleration{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface Link : Entity, Base, com.robotraconteur.device.isoch.IsochDevice
{
    string name { get; 	}
    string scoped_name { get; 	}
    List<string> sensor_names { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    void setf_world_pose(com.robotraconteur.geometry.Pose pose);
    void setf_relative_pose(com.robotraconteur.geometry.Pose pose);
    void attach_link(string model, string link_name);
    void attach_link_with_pose(string model_name, string link_name, com.robotraconteur.geometry.Pose pose);
    void detach_link(string model_name, string link_name);
    Wire<com.robotraconteur.geometry.Pose> world_pose{ get; set; }
    Wire<com.robotraconteur.geometry.Pose> relative_pose{ get; set; }
    Wire<com.robotraconteur.geometry.SpatialVelocity> world_velocity{ get; set; }
    Wire<com.robotraconteur.geometry.SpatialVelocity> relative_velocity{ get; set; }
    Wire<com.robotraconteur.geometry.SpatialAcceleration> world_acceleration{ get; set; }
    Wire<com.robotraconteur.geometry.SpatialAcceleration> relative_acceleration{ get; set; }
    Wire<List<com.robotraconteur.geometry.Wrench>> applied_wrenches{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface Joint : Base, com.robotraconteur.device.isoch.IsochDevice
{
    string name { get; 	}
    string scoped_name { get; 	}
    string parent_link_name { get; 	}
    string child_link_name { get; 	}
    uint dof { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    com.robotraconteur.geometry.Vector3[] getf_global_axes();
    com.robotraconteur.geometry.Vector3[] getf_local_axes();
    void setf_axis_position(uint axis, double position);
    void setf_axis_velocity(uint axis, double vel);
    Wire<double[]> axes_position{ get; set; }
    Wire<double[]> axes_velocity{ get; set; }
    Wire<double[]> axes_force{ get; set; }
    Wire<JointWrench> force_torque{ get; set; }
    Wire<double[]> apply_axes_force{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface JointController : com.robotraconteur.device.isoch.IsochDevice
{
    List<string> joint_names { get; 	}
    Dictionary<string,com.robotraconteur.pid.PIDParam> position_pid { get; 	}
    Dictionary<string,com.robotraconteur.pid.PIDParam> velocity_pid { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    void add_joint(string name);
    void setf_position_pid(string name, com.robotraconteur.pid.PIDParam pid);
    void setf_velocity_pid(string name, com.robotraconteur.pid.PIDParam pid);
    Wire<Dictionary<string,double>> joint_position{ get; set; }
    Wire<Dictionary<string,double>> joint_velocity{ get; set; }
    Wire<Dictionary<string,double>> joint_position_command{ get; set; }
    Wire<Dictionary<string,double>> joint_velocity_command{ get; set; }
    Wire<Dictionary<string,double>> joint_forces{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface Sensor : com.robotraconteur.device.isoch.IsochDevice
{
    string name { get; 	}
    string type { get; 	}
    string parent_name { get; 	}
    com.robotraconteur.geometry.Pose pose { get; 	}
    bool active { get;  set; 	}
    double update_rate { get;  set; 	}
    com.robotraconteur.datetime.Duration last_update_time { get; 	}
    com.robotraconteur.datetime.Duration last_measurement_time { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
}

[RobotRaconteurServiceObjectInterface()]
public interface CameraSensor : Sensor, com.robotraconteur.device.isoch.IsochDevice
{
    string name { get; 	}
    string type { get; 	}
    string parent_name { get; 	}
    com.robotraconteur.geometry.Pose pose { get; 	}
    bool active { get;  set; 	}
    double update_rate { get;  set; 	}
    com.robotraconteur.datetime.Duration last_update_time { get; 	}
    com.robotraconteur.datetime.Duration last_measurement_time { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    com.robotraconteur.image.Image capture_image();
    Pipe<com.robotraconteur.image.Image> image_stream{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface MultiCameraSensor : Sensor, com.robotraconteur.device.isoch.IsochDevice
{
    string name { get; 	}
    string type { get; 	}
    string parent_name { get; 	}
    com.robotraconteur.geometry.Pose pose { get; 	}
    bool active { get;  set; 	}
    double update_rate { get;  set; 	}
    com.robotraconteur.datetime.Duration last_update_time { get; 	}
    com.robotraconteur.datetime.Duration last_measurement_time { get; 	}
    int camera_count { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    com.robotraconteur.image.Image capture_image(int ind);
    Pipe<Dictionary<int,com.robotraconteur.image.Image>> image_stream{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface DepthCameraSensor : Sensor, com.robotraconteur.device.isoch.IsochDevice
{
    string name { get; 	}
    string type { get; 	}
    string parent_name { get; 	}
    com.robotraconteur.geometry.Pose pose { get; 	}
    bool active { get;  set; 	}
    double update_rate { get;  set; 	}
    com.robotraconteur.datetime.Duration last_update_time { get; 	}
    com.robotraconteur.datetime.Duration last_measurement_time { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    com.robotraconteur.image.Image capture_depth_image();
    Pipe<com.robotraconteur.image.Image> depth_image_stream{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface RaySensor : Sensor, com.robotraconteur.device.isoch.IsochDevice
{
    string name { get; 	}
    string type { get; 	}
    string parent_name { get; 	}
    com.robotraconteur.geometry.Pose pose { get; 	}
    bool active { get;  set; 	}
    double update_rate { get;  set; 	}
    com.robotraconteur.datetime.Duration last_update_time { get; 	}
    com.robotraconteur.datetime.Duration last_measurement_time { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    com.robotraconteur.laserscan.LaserScan capture_scan();
    Pipe<com.robotraconteur.laserscan.LaserScan> scan_stream{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface ContactSensor : Sensor, com.robotraconteur.device.isoch.IsochDevice
{
    string name { get; 	}
    string type { get; 	}
    string parent_name { get; 	}
    com.robotraconteur.geometry.Pose pose { get; 	}
    bool active { get;  set; 	}
    double update_rate { get;  set; 	}
    com.robotraconteur.datetime.Duration last_update_time { get; 	}
    com.robotraconteur.datetime.Duration last_measurement_time { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    Wire<List<Contact>> contacts{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface AltimeterSensor : Sensor, com.robotraconteur.device.isoch.IsochDevice
{
    string name { get; 	}
    string type { get; 	}
    string parent_name { get; 	}
    com.robotraconteur.geometry.Pose pose { get; 	}
    bool active { get;  set; 	}
    double update_rate { get;  set; 	}
    com.robotraconteur.datetime.Duration last_update_time { get; 	}
    com.robotraconteur.datetime.Duration last_measurement_time { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    Wire<double> altitude{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface SonarSensor : Sensor, com.robotraconteur.device.isoch.IsochDevice
{
    string name { get; 	}
    string type { get; 	}
    string parent_name { get; 	}
    com.robotraconteur.geometry.Pose pose { get; 	}
    bool active { get;  set; 	}
    double update_rate { get;  set; 	}
    com.robotraconteur.datetime.Duration last_update_time { get; 	}
    com.robotraconteur.datetime.Duration last_measurement_time { get; 	}
    double range_min { get; 	}
    double range_max { get; 	}
    double radius { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    Wire<double> range{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface MagnetometerSensor : Sensor, com.robotraconteur.device.isoch.IsochDevice
{
    string name { get; 	}
    string type { get; 	}
    string parent_name { get; 	}
    com.robotraconteur.geometry.Pose pose { get; 	}
    bool active { get;  set; 	}
    double update_rate { get;  set; 	}
    com.robotraconteur.datetime.Duration last_update_time { get; 	}
    com.robotraconteur.datetime.Duration last_measurement_time { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    Wire<com.robotraconteur.geometry.Vector3> magnetic_field{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface ForceTorqueSensor : Sensor, com.robotraconteur.device.isoch.IsochDevice
{
    string name { get; 	}
    string type { get; 	}
    string parent_name { get; 	}
    com.robotraconteur.geometry.Pose pose { get; 	}
    bool active { get;  set; 	}
    double update_rate { get;  set; 	}
    com.robotraconteur.datetime.Duration last_update_time { get; 	}
    com.robotraconteur.datetime.Duration last_measurement_time { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    Wire<com.robotraconteur.geometry.Wrench> force_torque{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface GpsSensor : Sensor, com.robotraconteur.device.isoch.IsochDevice
{
    string name { get; 	}
    string type { get; 	}
    string parent_name { get; 	}
    com.robotraconteur.geometry.Pose pose { get; 	}
    bool active { get;  set; 	}
    double update_rate { get;  set; 	}
    com.robotraconteur.datetime.Duration last_update_time { get; 	}
    com.robotraconteur.datetime.Duration last_measurement_time { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    Wire<com.robotraconteur.gps.GpsState> state{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface ImuSensor : Sensor, com.robotraconteur.device.isoch.IsochDevice
{
    string name { get; 	}
    string type { get; 	}
    string parent_name { get; 	}
    com.robotraconteur.geometry.Pose pose { get; 	}
    bool active { get;  set; 	}
    double update_rate { get;  set; 	}
    com.robotraconteur.datetime.Duration last_update_time { get; 	}
    com.robotraconteur.datetime.Duration last_measurement_time { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    void setf_reference_pose();
    Wire<com.robotraconteur.imu.ImuState> state{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface LogicalCameraSensor : Sensor, com.robotraconteur.device.isoch.IsochDevice
{
    string name { get; 	}
    string type { get; 	}
    string parent_name { get; 	}
    com.robotraconteur.geometry.Pose pose { get; 	}
    bool active { get;  set; 	}
    double update_rate { get;  set; 	}
    com.robotraconteur.datetime.Duration last_update_time { get; 	}
    com.robotraconteur.datetime.Duration last_measurement_time { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    com.robotraconteur.objectrecognition.RecognizedObjects capture_image();
    Pipe<com.robotraconteur.objectrecognition.RecognizedObjects> image_stream{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface Light
{
    string name { get; 	}
    string type { get; 	}
    com.robotraconteur.geometry.Pose pose { get; 	}
    com.robotraconteur.geometry.Vector3 direction { get; 	}
    com.robotraconteur.color.ColorRGBAf diffuse_color { get;  set; 	}
    com.robotraconteur.color.ColorRGBAf specular_color { get;  set; 	}
}

}
namespace org.gazebosim.gazebo
{
public class org__gazebosim__gazeboFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service org.gazebosim.gazebo\n\nstdver 0.10\n\nimport com.robotraconteur.geometry\nimport com.robotraconteur.image\nimport com.robotraconteur.color\nimport com.robotraconteur.datetime\nimport com.robotraconteur.laserscan\nimport com.robotraconteur.pid\nimport com.robotraconteur.gps\nimport com.robotraconteur.imu\nimport com.robotraconteur.device\nimport com.robotraconteur.device.isoch\nimport com.robotraconteur.objectrecognition\n\nusing com.robotraconteur.geometry.Vector3\nusing com.robotraconteur.geometry.Quaternion\nusing com.robotraconteur.geometry.Pose\nusing com.robotraconteur.geometry.SpatialVelocity\nusing com.robotraconteur.geometry.SpatialAcceleration\nusing com.robotraconteur.geometry.Wrench\nusing com.robotraconteur.image.Image\nusing com.robotraconteur.color.ColorRGBAf as Color\nusing com.robotraconteur.datetime.DateTimeUTC\nusing com.robotraconteur.datetime.Duration\nusing com.robotraconteur.laserscan.LaserScan\nusing com.robotraconteur.pid.PIDParam\nusing com.robotraconteur.gps.GpsState\nusing com.robotraconteur.imu.ImuState\nusing com.robotraconteur.device.Device\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.device.isoch.IsochDevice\nusing com.robotraconteur.device.isoch.IsochInfo\nusing com.robotraconteur.objectrecognition.RecognizedObjects\n\nstruct Contact\nfield string contact_name1\nfield string contact_name2\nend\n\nobject Base\nproperty string name [readonly]\nproperty string scoped_name [readonly]\nend\n\nobject Server\nimplements Device\nproperty DeviceInfo device_info [readonly,nolock]\n\nproperty string{list} world_names [readonly]\nobjref World{string} worlds\n\nproperty string{list} sensor_names [readonly]\nobjref Sensor{string} sensors\nend\n\nstruct WorldTimes\nfield Duration sim_time\nfield Duration real_time\nfield DateTimeUTC wall_time\nfield DateTimeUTC start_time\nend\n\nobject World\nproperty string name [readonly]\n\nwire Duration sim_time [readonly]\nwire WorldTimes time [readonly]\n\nproperty string{list} model_names [readonly]\nobjref Model{string} models\n\nproperty string{list} light_names [readonly]\nobjref Light{string} lights\n\nfunction void insert_model(string model_sdf, string model_name, Pose model_pose)\nfunction void remove_model(string model_name)\n\nend\n\nobject Entity\nimplements Base\nimplements IsochDevice\nproperty string name [readonly]\nproperty string scoped_name [readonly]\n\nwire Pose world_pose [readonly]\nwire Pose relative_pose [readonly]\nfunction void setf_world_pose(Pose pose)\nfunction void setf_relative_pose(Pose pose)\n\nwire SpatialVelocity world_velocity [readonly]\nwire SpatialVelocity relative_velocity [readonly]\nwire SpatialAcceleration world_acceleration [readonly]\nwire SpatialAcceleration relative_acceleration [readonly]\n\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nend\n\nobject Model\nimplements Entity\nimplements Base\nimplements IsochDevice\nproperty string name [readonly]\nproperty string scoped_name [readonly]\n\nproperty string{list} child_model_names [readonly]\nobjref Model{string} child_models\n\nproperty string{list} link_names [readonly]\nobjref Link{string} links\n\nproperty string{list} joint_names [readonly]\nobjref Joint{string} joints\n\nwire Pose world_pose [readonly]\nwire Pose relative_pose [readonly]\nfunction void setf_world_pose(Pose pose)\nfunction void setf_relative_pose(Pose pose)\n\nwire SpatialVelocity world_velocity [readonly]\nwire SpatialVelocity relative_velocity [readonly]\nwire SpatialAcceleration world_acceleration [readonly]\nwire SpatialAcceleration relative_acceleration [readonly]\n\nfunction void create_joint_controller()\nfunction void destroy_joint_controller()\n\nobjref JointController joint_controller\n\nfunction void create_kinematic_joint_controller()\nfunction void destroy_kinematic_joint_controller()\n\nobjref JointController kinematic_joint_controller\n\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\n\nend\n\nobject Link\nimplements Entity\nimplements Base\nimplements IsochDevice\nproperty string name [readonly]\nproperty string scoped_name [readonly]\n\nproperty string{list} sensor_names [readonly]\n\nwire Pose world_pose [readonly]\nwire Pose relative_pose [readonly]\nfunction void setf_world_pose(Pose pose)\nfunction void setf_relative_pose(Pose pose)\n\nwire SpatialVelocity world_velocity [readonly]\nwire SpatialVelocity relative_velocity [readonly]\nwire SpatialAcceleration world_acceleration [readonly]\nwire SpatialAcceleration relative_acceleration [readonly]\n\nwire Wrench{list} applied_wrenches [writeonly]\n\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\n\nfunction void attach_link(string model, string link_name)\nfunction void attach_link_with_pose(string model_name, string link_name, Pose pose)\nfunction void detach_link(string model_name, string link_name)\nend\n\nnamedarray JointWrench\nfield Wrench body1_wrench\nfield Wrench body2_wrench\nend\n\nobject Joint\nimplements Base\nimplements IsochDevice\n\nproperty string name [readonly]\nproperty string scoped_name [readonly]\n\nproperty string parent_link_name [readonly]\nproperty string child_link_name [readonly]\n\nproperty uint32 dof [readonly]\n\nfunction Vector3[] getf_global_axes()\nfunction Vector3[] getf_local_axes()\n\nwire double[] axes_position [readonly]\nwire double[] axes_velocity [readonly]\nwire double[] axes_force [readonly]\n\nfunction void setf_axis_position(uint32 axis, double position)\nfunction void setf_axis_velocity(uint32 axis, double vel)\n\nwire JointWrench force_torque [readonly]\n\nwire double[] apply_axes_force [writeonly]\n\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\n\nend\n\nobject JointController\nimplements IsochDevice\nproperty string{list} joint_names [readonly]\nproperty PIDParam{string} position_pid [readonly]\nproperty PIDParam{string} velocity_pid [readonly]\nwire double{string} joint_position [readonly]\nwire double{string} joint_velocity [readonly]\nwire double{string} joint_position_command [writeonly]\nwire double{string} joint_velocity_command [writeonly]\n\nwire double{string} joint_forces [readonly]\n\nfunction void add_joint(string name)\nfunction void setf_position_pid(string name, PIDParam pid)\nfunction void setf_velocity_pid(string name, PIDParam pid)\n\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nend\n\nobject Sensor\nimplements IsochDevice\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time	[readonly]\n\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nend\n\nobject CameraSensor\nimplements Sensor\nimplements IsochDevice\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time	[readonly]\n\nfunction Image capture_image()\npipe Image image_stream [readonly]\n\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nend\n\nobject MultiCameraSensor\nimplements Sensor\nimplements IsochDevice\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time	[readonly]\n\nproperty int32 camera_count [readonly]\nfunction Image capture_image(int32 ind)\npipe Image{int32} image_stream [readonly]\n\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nend\n\nobject DepthCameraSensor\nimplements Sensor\nimplements IsochDevice\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time	[readonly]\n\nfunction Image capture_depth_image()\npipe Image depth_image_stream [readonly]\n\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nend\n\nobject RaySensor\nimplements Sensor\nimplements IsochDevice\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time	[readonly]\n\nfunction LaserScan capture_scan()\npipe LaserScan scan_stream [readonly]\n\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nend\n\nobject ContactSensor\nimplements Sensor\nimplements IsochDevice\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time [readonly]\n\nwire Contact{list} contacts [readonly]\n\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nend\n\nobject AltimeterSensor\nimplements Sensor\nimplements IsochDevice\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time [readonly]\n\nwire double altitude [readonly]\n\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nend\n\nobject SonarSensor\nimplements Sensor\nimplements IsochDevice\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time [readonly]\n\nproperty double range_min [readonly]\nproperty double range_max [readonly]\nproperty double radius [readonly]\n\nwire double range [readonly]\n\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nend\n\nobject MagnetometerSensor\nimplements Sensor\nimplements IsochDevice\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time [readonly]\n\nwire Vector3 magnetic_field [readonly]\n\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nend\n\nobject ForceTorqueSensor\nimplements Sensor\nimplements IsochDevice\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time [readonly]\n\nwire Wrench force_torque [readonly]\n\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nend\n\nobject GpsSensor\nimplements Sensor\nimplements IsochDevice\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time [readonly]\n\nwire GpsState state [readonly]\n\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nend\n\nobject ImuSensor\nimplements Sensor\nimplements IsochDevice\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time [readonly]\n\nfunction void setf_reference_pose()\n\nwire ImuState state [readonly]\n\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nend\n\nobject LogicalCameraSensor\nimplements Sensor\nimplements IsochDevice\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time	[readonly]\n\nfunction RecognizedObjects capture_image()\npipe RecognizedObjects image_stream [readonly]\n\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nend\n\nobject Light\nproperty string name [readonly]\nproperty string type [readonly]\nproperty Pose pose [readonly]\nproperty Vector3 direction [readonly]\n\nproperty Color diffuse_color\nproperty Color specular_color\nend\n";
    return s;
    }
    public override string GetServiceName() {return "org.gazebosim.gazebo";}
    public Contact_stub Contact_stubentry;
    public WorldTimes_stub WorldTimes_stubentry;
    public JointWrench_stub JointWrench_stubentry;
    public org__gazebosim__gazeboFactory()
{
    Contact_stubentry=new Contact_stub(this);
    WorldTimes_stubentry=new WorldTimes_stub(this);
    JointWrench_stubentry=new JointWrench_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="Contact")    return Contact_stubentry;
    if (objecttype=="WorldTimes")    return WorldTimes_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="JointWrench")    return JointWrench_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Base":
    return new Base_stub(innerstub);
    case "Server":
    return new Server_stub(innerstub);
    case "World":
    return new World_stub(innerstub);
    case "Entity":
    return new Entity_stub(innerstub);
    case "Model":
    return new Model_stub(innerstub);
    case "Link":
    return new Link_stub(innerstub);
    case "Joint":
    return new Joint_stub(innerstub);
    case "JointController":
    return new JointController_stub(innerstub);
    case "Sensor":
    return new Sensor_stub(innerstub);
    case "CameraSensor":
    return new CameraSensor_stub(innerstub);
    case "MultiCameraSensor":
    return new MultiCameraSensor_stub(innerstub);
    case "DepthCameraSensor":
    return new DepthCameraSensor_stub(innerstub);
    case "RaySensor":
    return new RaySensor_stub(innerstub);
    case "ContactSensor":
    return new ContactSensor_stub(innerstub);
    case "AltimeterSensor":
    return new AltimeterSensor_stub(innerstub);
    case "SonarSensor":
    return new SonarSensor_stub(innerstub);
    case "MagnetometerSensor":
    return new MagnetometerSensor_stub(innerstub);
    case "ForceTorqueSensor":
    return new ForceTorqueSensor_stub(innerstub);
    case "GpsSensor":
    return new GpsSensor_stub(innerstub);
    case "ImuSensor":
    return new ImuSensor_stub(innerstub);
    case "LogicalCameraSensor":
    return new LogicalCameraSensor_stub(innerstub);
    case "Light":
    return new Light_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Base":
    return new Base_skel((Base)obj);
    case "Server":
    return new Server_skel((Server)obj);
    case "World":
    return new World_skel((World)obj);
    case "Entity":
    return new Entity_skel((Entity)obj);
    case "Model":
    return new Model_skel((Model)obj);
    case "Link":
    return new Link_skel((Link)obj);
    case "Joint":
    return new Joint_skel((Joint)obj);
    case "JointController":
    return new JointController_skel((JointController)obj);
    case "Sensor":
    return new Sensor_skel((Sensor)obj);
    case "CameraSensor":
    return new CameraSensor_skel((CameraSensor)obj);
    case "MultiCameraSensor":
    return new MultiCameraSensor_skel((MultiCameraSensor)obj);
    case "DepthCameraSensor":
    return new DepthCameraSensor_skel((DepthCameraSensor)obj);
    case "RaySensor":
    return new RaySensor_skel((RaySensor)obj);
    case "ContactSensor":
    return new ContactSensor_skel((ContactSensor)obj);
    case "AltimeterSensor":
    return new AltimeterSensor_skel((AltimeterSensor)obj);
    case "SonarSensor":
    return new SonarSensor_skel((SonarSensor)obj);
    case "MagnetometerSensor":
    return new MagnetometerSensor_skel((MagnetometerSensor)obj);
    case "ForceTorqueSensor":
    return new ForceTorqueSensor_skel((ForceTorqueSensor)obj);
    case "GpsSensor":
    return new GpsSensor_skel((GpsSensor)obj);
    case "ImuSensor":
    return new ImuSensor_skel((ImuSensor)obj);
    case "LogicalCameraSensor":
    return new LogicalCameraSensor_skel((LogicalCameraSensor)obj);
    case "Light":
    return new Light_skel((Light)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class Contact_stub : IStructureStub {
    public Contact_stub(org__gazebosim__gazeboFactory d) {def=d;}
    private org__gazebosim__gazeboFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    Contact s = (Contact)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("contact_name1",s.contact_name1));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("contact_name2",s.contact_name2));
    return new MessageElementNestedElementList(DataTypes.structure_t,"org.gazebosim.gazebo.Contact",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    Contact s=new Contact();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.contact_name1 =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"contact_name1"));
    s.contact_name2 =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"contact_name2"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class WorldTimes_stub : IStructureStub {
    public WorldTimes_stub(org__gazebosim__gazeboFactory d) {def=d;}
    private org__gazebosim__gazeboFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    WorldTimes s = (WorldTimes)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("sim_time",ref s.sim_time));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("real_time",ref s.real_time));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.DateTimeUTC>("wall_time",ref s.wall_time));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.DateTimeUTC>("start_time",ref s.start_time));
    return new MessageElementNestedElementList(DataTypes.structure_t,"org.gazebosim.gazebo.WorldTimes",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    WorldTimes s=new WorldTimes();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.sim_time =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(MessageElement.FindElement(mm,"sim_time"));
    s.real_time =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(MessageElement.FindElement(mm,"real_time"));
    s.wall_time =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.DateTimeUTC>(MessageElement.FindElement(mm,"wall_time"));
    s.start_time =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.DateTimeUTC>(MessageElement.FindElement(mm,"start_time"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class JointWrench_stub : NamedArrayStub<JointWrench,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref JointWrench s) {
    return s.GetNumericArray();
    }
    public override JointWrench GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 12) throw new DataTypeException("Invalid namedarray array");
    var s = new JointWrench();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(JointWrench[] s) {
    return s.GetNumericArray();
    }
    public override JointWrench[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 12 != 0) throw new DataTypeException("Invalid namedarray array");
    JointWrench[] s = new JointWrench[m.Length / 12];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "org.gazebosim.gazebo.JointWrench"; } }}

public interface async_Base
{
    Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_scoped_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Base_stub : ServiceStub , Base, async_Base{
    public Base_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public string name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("name"));
    }
    }
    public string scoped_name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("scoped_name"));
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_scoped_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("scoped_name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
}
public interface async_Server : com.robotraconteur.device.async_Device
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<string>> async_get_world_names(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<string>> async_get_sensor_names(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<World> async_get_worlds(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Sensor> async_get_sensors(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Server_stub : ServiceStub , Server, async_Server{
    public Server_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public List<string> world_names {
    get {
    return MessageElementUtil.UnpackList<string>(rr_innerstub.PropertyGet("world_names"));
    }
    }
    public List<string> sensor_names {
    get {
    return MessageElementUtil.UnpackList<string>(rr_innerstub.PropertyGet("sensor_names"));
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public World get_worlds(string ind) {
    return (World)FindObjRefTyped("worlds",ind.ToString(),"org.gazebosim.gazebo.World");
    }
    public Sensor get_sensors(string ind) {
    return (Sensor)FindObjRefTyped("sensors",ind.ToString(),"org.gazebosim.gazebo.Sensor");
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<List<string>> async_get_world_names(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("world_names",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<string>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<List<string>> async_get_sensor_names(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("sensor_names",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<string>(rr_value);
    return rr_ret;
    } }
    public Task<World>  async_get_worlds(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<World>("worlds",ind.ToString(),"org.gazebosim.gazebo.World",timeout);
    }
    public Task<Sensor>  async_get_sensors(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<Sensor>("sensors",ind.ToString(),"org.gazebosim.gazebo.Sensor",timeout);
    }
}
public interface async_World
{
    Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<string>> async_get_model_names(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<string>> async_get_light_names(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_insert_model(string model_sdf, string model_name, com.robotraconteur.geometry.Pose model_pose,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_remove_model(string model_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Model> async_get_models(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Light> async_get_lights(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class World_stub : ServiceStub , World, async_World{
    private Wire<com.robotraconteur.datetime.Duration> rr_sim_time;
    private Wire<WorldTimes> rr_time;
    public World_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_sim_time=new Wire<com.robotraconteur.datetime.Duration>(innerstub.GetWire("sim_time"));
    rr_time=new Wire<WorldTimes>(innerstub.GetWire("time"));
    }
    public string name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("name"));
    }
    }
    public List<string> model_names {
    get {
    return MessageElementUtil.UnpackList<string>(rr_innerstub.PropertyGet("model_names"));
    }
    }
    public List<string> light_names {
    get {
    return MessageElementUtil.UnpackList<string>(rr_innerstub.PropertyGet("light_names"));
    }
    }
    public void insert_model(string model_sdf, string model_name, com.robotraconteur.geometry.Pose model_pose) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("model_sdf",model_sdf));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("model_name",model_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("model_pose",ref model_pose));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("insert_model",rr_param))
    {
    }
    }
    }
    public void remove_model(string model_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("model_name",model_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("remove_model",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Model get_models(string ind) {
    return (Model)FindObjRefTyped("models",ind.ToString(),"org.gazebosim.gazebo.Model");
    }
    public Light get_lights(string ind) {
    return (Light)FindObjRefTyped("lights",ind.ToString(),"org.gazebosim.gazebo.Light");
    }
    public Wire<com.robotraconteur.datetime.Duration> sim_time {
    get { return rr_sim_time;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<WorldTimes> time {
    get { return rr_time;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<List<string>> async_get_model_names(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("model_names",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<string>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<List<string>> async_get_light_names(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("light_names",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<string>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_insert_model(string model_sdf, string model_name, com.robotraconteur.geometry.Pose model_pose,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("model_sdf",model_sdf));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("model_name",model_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("model_pose",ref model_pose));
    using(var rr_return = await rr_async_FunctionCall("insert_model",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_remove_model(string model_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("model_name",model_name));
    using(var rr_return = await rr_async_FunctionCall("remove_model",rr_param,rr_timeout)) {
    } } }
    public Task<Model>  async_get_models(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<Model>("models",ind.ToString(),"org.gazebosim.gazebo.Model",timeout);
    }
    public Task<Light>  async_get_lights(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<Light>("lights",ind.ToString(),"org.gazebosim.gazebo.Light",timeout);
    }
}
public interface async_Entity : async_Base, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_scoped_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_world_pose(com.robotraconteur.geometry.Pose pose,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_relative_pose(com.robotraconteur.geometry.Pose pose,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Entity_stub : ServiceStub , Entity, async_Entity{
    private Wire<com.robotraconteur.geometry.Pose> rr_world_pose;
    private Wire<com.robotraconteur.geometry.Pose> rr_relative_pose;
    private Wire<com.robotraconteur.geometry.SpatialVelocity> rr_world_velocity;
    private Wire<com.robotraconteur.geometry.SpatialVelocity> rr_relative_velocity;
    private Wire<com.robotraconteur.geometry.SpatialAcceleration> rr_world_acceleration;
    private Wire<com.robotraconteur.geometry.SpatialAcceleration> rr_relative_acceleration;
    public Entity_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_world_pose=new Wire<com.robotraconteur.geometry.Pose>(innerstub.GetWire("world_pose"));
    rr_relative_pose=new Wire<com.robotraconteur.geometry.Pose>(innerstub.GetWire("relative_pose"));
    rr_world_velocity=new Wire<com.robotraconteur.geometry.SpatialVelocity>(innerstub.GetWire("world_velocity"));
    rr_relative_velocity=new Wire<com.robotraconteur.geometry.SpatialVelocity>(innerstub.GetWire("relative_velocity"));
    rr_world_acceleration=new Wire<com.robotraconteur.geometry.SpatialAcceleration>(innerstub.GetWire("world_acceleration"));
    rr_relative_acceleration=new Wire<com.robotraconteur.geometry.SpatialAcceleration>(innerstub.GetWire("relative_acceleration"));
    }
    public string name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("name"));
    }
    }
    public string scoped_name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("scoped_name"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public void setf_world_pose(com.robotraconteur.geometry.Pose pose) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("pose",ref pose));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_world_pose",rr_param))
    {
    }
    }
    }
    public void setf_relative_pose(com.robotraconteur.geometry.Pose pose) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("pose",ref pose));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_relative_pose",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Wire<com.robotraconteur.geometry.Pose> world_pose {
    get { return rr_world_pose;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.Pose> relative_pose {
    get { return rr_relative_pose;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialVelocity> world_velocity {
    get { return rr_world_velocity;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialVelocity> relative_velocity {
    get { return rr_relative_velocity;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialAcceleration> world_acceleration {
    get { return rr_world_acceleration;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialAcceleration> relative_acceleration {
    get { return rr_relative_acceleration;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_scoped_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("scoped_name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task async_setf_world_pose(com.robotraconteur.geometry.Pose pose,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("pose",ref pose));
    using(var rr_return = await rr_async_FunctionCall("setf_world_pose",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_setf_relative_pose(com.robotraconteur.geometry.Pose pose,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("pose",ref pose));
    using(var rr_return = await rr_async_FunctionCall("setf_relative_pose",rr_param,rr_timeout)) {
    } } }
}
public interface async_Model : async_Entity, async_Base, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_scoped_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<string>> async_get_child_model_names(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<string>> async_get_link_names(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<string>> async_get_joint_names(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_world_pose(com.robotraconteur.geometry.Pose pose,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_relative_pose(com.robotraconteur.geometry.Pose pose,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_create_joint_controller(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_destroy_joint_controller(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_create_kinematic_joint_controller(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_destroy_kinematic_joint_controller(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Model> async_get_child_models(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Link> async_get_links(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Joint> async_get_joints(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<JointController> async_get_joint_controller(int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<JointController> async_get_kinematic_joint_controller(int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Model_stub : ServiceStub , Model, async_Model{
    private Wire<com.robotraconteur.geometry.Pose> rr_world_pose;
    private Wire<com.robotraconteur.geometry.Pose> rr_relative_pose;
    private Wire<com.robotraconteur.geometry.SpatialVelocity> rr_world_velocity;
    private Wire<com.robotraconteur.geometry.SpatialVelocity> rr_relative_velocity;
    private Wire<com.robotraconteur.geometry.SpatialAcceleration> rr_world_acceleration;
    private Wire<com.robotraconteur.geometry.SpatialAcceleration> rr_relative_acceleration;
    public Model_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_world_pose=new Wire<com.robotraconteur.geometry.Pose>(innerstub.GetWire("world_pose"));
    rr_relative_pose=new Wire<com.robotraconteur.geometry.Pose>(innerstub.GetWire("relative_pose"));
    rr_world_velocity=new Wire<com.robotraconteur.geometry.SpatialVelocity>(innerstub.GetWire("world_velocity"));
    rr_relative_velocity=new Wire<com.robotraconteur.geometry.SpatialVelocity>(innerstub.GetWire("relative_velocity"));
    rr_world_acceleration=new Wire<com.robotraconteur.geometry.SpatialAcceleration>(innerstub.GetWire("world_acceleration"));
    rr_relative_acceleration=new Wire<com.robotraconteur.geometry.SpatialAcceleration>(innerstub.GetWire("relative_acceleration"));
    }
    public string name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("name"));
    }
    }
    public string scoped_name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("scoped_name"));
    }
    }
    public List<string> child_model_names {
    get {
    return MessageElementUtil.UnpackList<string>(rr_innerstub.PropertyGet("child_model_names"));
    }
    }
    public List<string> link_names {
    get {
    return MessageElementUtil.UnpackList<string>(rr_innerstub.PropertyGet("link_names"));
    }
    }
    public List<string> joint_names {
    get {
    return MessageElementUtil.UnpackList<string>(rr_innerstub.PropertyGet("joint_names"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public void setf_world_pose(com.robotraconteur.geometry.Pose pose) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("pose",ref pose));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_world_pose",rr_param))
    {
    }
    }
    }
    public void setf_relative_pose(com.robotraconteur.geometry.Pose pose) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("pose",ref pose));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_relative_pose",rr_param))
    {
    }
    }
    }
    public void create_joint_controller() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("create_joint_controller",rr_param))
    {
    }
    }
    }
    public void destroy_joint_controller() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("destroy_joint_controller",rr_param))
    {
    }
    }
    }
    public void create_kinematic_joint_controller() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("create_kinematic_joint_controller",rr_param))
    {
    }
    }
    }
    public void destroy_kinematic_joint_controller() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("destroy_kinematic_joint_controller",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Model get_child_models(string ind) {
    return (Model)FindObjRefTyped("child_models",ind.ToString(),"org.gazebosim.gazebo.Model");
    }
    public Link get_links(string ind) {
    return (Link)FindObjRefTyped("links",ind.ToString(),"org.gazebosim.gazebo.Link");
    }
    public Joint get_joints(string ind) {
    return (Joint)FindObjRefTyped("joints",ind.ToString(),"org.gazebosim.gazebo.Joint");
    }
    public JointController get_joint_controller() {
    return (JointController)FindObjRefTyped("joint_controller","org.gazebosim.gazebo.JointController");
    }
    public JointController get_kinematic_joint_controller() {
    return (JointController)FindObjRefTyped("kinematic_joint_controller","org.gazebosim.gazebo.JointController");
    }
    public Wire<com.robotraconteur.geometry.Pose> world_pose {
    get { return rr_world_pose;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.Pose> relative_pose {
    get { return rr_relative_pose;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialVelocity> world_velocity {
    get { return rr_world_velocity;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialVelocity> relative_velocity {
    get { return rr_relative_velocity;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialAcceleration> world_acceleration {
    get { return rr_world_acceleration;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialAcceleration> relative_acceleration {
    get { return rr_relative_acceleration;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_scoped_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("scoped_name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<List<string>> async_get_child_model_names(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("child_model_names",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<string>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<List<string>> async_get_link_names(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("link_names",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<string>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<List<string>> async_get_joint_names(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("joint_names",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<string>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task async_setf_world_pose(com.robotraconteur.geometry.Pose pose,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("pose",ref pose));
    using(var rr_return = await rr_async_FunctionCall("setf_world_pose",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_setf_relative_pose(com.robotraconteur.geometry.Pose pose,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("pose",ref pose));
    using(var rr_return = await rr_async_FunctionCall("setf_relative_pose",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_create_joint_controller(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("create_joint_controller",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_destroy_joint_controller(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("destroy_joint_controller",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_create_kinematic_joint_controller(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("create_kinematic_joint_controller",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_destroy_kinematic_joint_controller(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("destroy_kinematic_joint_controller",rr_param,rr_timeout)) {
    } } }
    public Task<Model>  async_get_child_models(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<Model>("child_models",ind.ToString(),"org.gazebosim.gazebo.Model",timeout);
    }
    public Task<Link>  async_get_links(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<Link>("links",ind.ToString(),"org.gazebosim.gazebo.Link",timeout);
    }
    public Task<Joint>  async_get_joints(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<Joint>("joints",ind.ToString(),"org.gazebosim.gazebo.Joint",timeout);
    }
    public Task<JointController> async_get_joint_controller(int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<JointController>("joint_controller","org.gazebosim.gazebo.JointController",timeout);
    }
    public Task<JointController> async_get_kinematic_joint_controller(int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<JointController>("kinematic_joint_controller","org.gazebosim.gazebo.JointController",timeout);
    }
}
public interface async_Link : async_Entity, async_Base, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_scoped_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<string>> async_get_sensor_names(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_world_pose(com.robotraconteur.geometry.Pose pose,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_relative_pose(com.robotraconteur.geometry.Pose pose,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_attach_link(string model, string link_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_attach_link_with_pose(string model_name, string link_name, com.robotraconteur.geometry.Pose pose,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_detach_link(string model_name, string link_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Link_stub : ServiceStub , Link, async_Link{
    private Wire<com.robotraconteur.geometry.Pose> rr_world_pose;
    private Wire<com.robotraconteur.geometry.Pose> rr_relative_pose;
    private Wire<com.robotraconteur.geometry.SpatialVelocity> rr_world_velocity;
    private Wire<com.robotraconteur.geometry.SpatialVelocity> rr_relative_velocity;
    private Wire<com.robotraconteur.geometry.SpatialAcceleration> rr_world_acceleration;
    private Wire<com.robotraconteur.geometry.SpatialAcceleration> rr_relative_acceleration;
    private Wire<List<com.robotraconteur.geometry.Wrench>> rr_applied_wrenches;
    public Link_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_world_pose=new Wire<com.robotraconteur.geometry.Pose>(innerstub.GetWire("world_pose"));
    rr_relative_pose=new Wire<com.robotraconteur.geometry.Pose>(innerstub.GetWire("relative_pose"));
    rr_world_velocity=new Wire<com.robotraconteur.geometry.SpatialVelocity>(innerstub.GetWire("world_velocity"));
    rr_relative_velocity=new Wire<com.robotraconteur.geometry.SpatialVelocity>(innerstub.GetWire("relative_velocity"));
    rr_world_acceleration=new Wire<com.robotraconteur.geometry.SpatialAcceleration>(innerstub.GetWire("world_acceleration"));
    rr_relative_acceleration=new Wire<com.robotraconteur.geometry.SpatialAcceleration>(innerstub.GetWire("relative_acceleration"));
    rr_applied_wrenches=new Wire<List<com.robotraconteur.geometry.Wrench>>(innerstub.GetWire("applied_wrenches"));
    }
    public string name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("name"));
    }
    }
    public string scoped_name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("scoped_name"));
    }
    }
    public List<string> sensor_names {
    get {
    return MessageElementUtil.UnpackList<string>(rr_innerstub.PropertyGet("sensor_names"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public void setf_world_pose(com.robotraconteur.geometry.Pose pose) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("pose",ref pose));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_world_pose",rr_param))
    {
    }
    }
    }
    public void setf_relative_pose(com.robotraconteur.geometry.Pose pose) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("pose",ref pose));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_relative_pose",rr_param))
    {
    }
    }
    }
    public void attach_link(string model, string link_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("model",model));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("link_name",link_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("attach_link",rr_param))
    {
    }
    }
    }
    public void attach_link_with_pose(string model_name, string link_name, com.robotraconteur.geometry.Pose pose) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("model_name",model_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("link_name",link_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("pose",ref pose));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("attach_link_with_pose",rr_param))
    {
    }
    }
    }
    public void detach_link(string model_name, string link_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("model_name",model_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("link_name",link_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("detach_link",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Wire<com.robotraconteur.geometry.Pose> world_pose {
    get { return rr_world_pose;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.Pose> relative_pose {
    get { return rr_relative_pose;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialVelocity> world_velocity {
    get { return rr_world_velocity;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialVelocity> relative_velocity {
    get { return rr_relative_velocity;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialAcceleration> world_acceleration {
    get { return rr_world_acceleration;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialAcceleration> relative_acceleration {
    get { return rr_relative_acceleration;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<List<com.robotraconteur.geometry.Wrench>> applied_wrenches {
    get { return rr_applied_wrenches;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_scoped_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("scoped_name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<List<string>> async_get_sensor_names(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("sensor_names",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<string>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task async_setf_world_pose(com.robotraconteur.geometry.Pose pose,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("pose",ref pose));
    using(var rr_return = await rr_async_FunctionCall("setf_world_pose",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_setf_relative_pose(com.robotraconteur.geometry.Pose pose,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("pose",ref pose));
    using(var rr_return = await rr_async_FunctionCall("setf_relative_pose",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_attach_link(string model, string link_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("model",model));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("link_name",link_name));
    using(var rr_return = await rr_async_FunctionCall("attach_link",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_attach_link_with_pose(string model_name, string link_name, com.robotraconteur.geometry.Pose pose,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("model_name",model_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("link_name",link_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("pose",ref pose));
    using(var rr_return = await rr_async_FunctionCall("attach_link_with_pose",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_detach_link(string model_name, string link_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("model_name",model_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("link_name",link_name));
    using(var rr_return = await rr_async_FunctionCall("detach_link",rr_param,rr_timeout)) {
    } } }
}
public interface async_Joint : async_Base, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_scoped_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_parent_link_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_child_link_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_dof(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.geometry.Vector3[]> async_getf_global_axes(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.geometry.Vector3[]> async_getf_local_axes(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_axis_position(uint axis, double position,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_axis_velocity(uint axis, double vel,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Joint_stub : ServiceStub , Joint, async_Joint{
    private Wire<double[]> rr_axes_position;
    private Wire<double[]> rr_axes_velocity;
    private Wire<double[]> rr_axes_force;
    private Wire<JointWrench> rr_force_torque;
    private Wire<double[]> rr_apply_axes_force;
    public Joint_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_axes_position=new Wire<double[]>(innerstub.GetWire("axes_position"));
    rr_axes_velocity=new Wire<double[]>(innerstub.GetWire("axes_velocity"));
    rr_axes_force=new Wire<double[]>(innerstub.GetWire("axes_force"));
    rr_force_torque=new Wire<JointWrench>(innerstub.GetWire("force_torque"));
    rr_apply_axes_force=new Wire<double[]>(innerstub.GetWire("apply_axes_force"));
    }
    public string name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("name"));
    }
    }
    public string scoped_name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("scoped_name"));
    }
    }
    public string parent_link_name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("parent_link_name"));
    }
    }
    public string child_link_name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("child_link_name"));
    }
    }
    public uint dof {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("dof")));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public com.robotraconteur.geometry.Vector3[] getf_global_axes() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_global_axes",rr_param))
    {
    return MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Vector3>(rr_me);
    }
    }
    }
    public com.robotraconteur.geometry.Vector3[] getf_local_axes() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_local_axes",rr_param))
    {
    return MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Vector3>(rr_me);
    }
    }
    }
    public void setf_axis_position(uint axis, double position) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<uint>("axis",axis));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("position",position));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_axis_position",rr_param))
    {
    }
    }
    }
    public void setf_axis_velocity(uint axis, double vel) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<uint>("axis",axis));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("vel",vel));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_axis_velocity",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Wire<double[]> axes_position {
    get { return rr_axes_position;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> axes_velocity {
    get { return rr_axes_velocity;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> axes_force {
    get { return rr_axes_force;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<JointWrench> force_torque {
    get { return rr_force_torque;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> apply_axes_force {
    get { return rr_apply_axes_force;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_scoped_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("scoped_name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_parent_link_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("parent_link_name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_child_link_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("child_link_name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_dof(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("dof",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.geometry.Vector3[]> async_getf_global_axes(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("getf_global_axes",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Vector3>(rr_return);
    return rr_ret;
    } } }
    public virtual async Task<com.robotraconteur.geometry.Vector3[]> async_getf_local_axes(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("getf_local_axes",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Vector3>(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_axis_position(uint axis, double position,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<uint>("axis",axis));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("position",position));
    using(var rr_return = await rr_async_FunctionCall("setf_axis_position",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_setf_axis_velocity(uint axis, double vel,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<uint>("axis",axis));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("vel",vel));
    using(var rr_return = await rr_async_FunctionCall("setf_axis_velocity",rr_param,rr_timeout)) {
    } } }
}
public interface async_JointController : com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<List<string>> async_get_joint_names(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Dictionary<string,com.robotraconteur.pid.PIDParam>> async_get_position_pid(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Dictionary<string,com.robotraconteur.pid.PIDParam>> async_get_velocity_pid(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_add_joint(string name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_position_pid(string name, com.robotraconteur.pid.PIDParam pid,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_velocity_pid(string name, com.robotraconteur.pid.PIDParam pid,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class JointController_stub : ServiceStub , JointController, async_JointController{
    private Wire<Dictionary<string,double>> rr_joint_position;
    private Wire<Dictionary<string,double>> rr_joint_velocity;
    private Wire<Dictionary<string,double>> rr_joint_position_command;
    private Wire<Dictionary<string,double>> rr_joint_velocity_command;
    private Wire<Dictionary<string,double>> rr_joint_forces;
    public JointController_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_joint_position=new Wire<Dictionary<string,double>>(innerstub.GetWire("joint_position"));
    rr_joint_velocity=new Wire<Dictionary<string,double>>(innerstub.GetWire("joint_velocity"));
    rr_joint_position_command=new Wire<Dictionary<string,double>>(innerstub.GetWire("joint_position_command"));
    rr_joint_velocity_command=new Wire<Dictionary<string,double>>(innerstub.GetWire("joint_velocity_command"));
    rr_joint_forces=new Wire<Dictionary<string,double>>(innerstub.GetWire("joint_forces"));
    }
    public List<string> joint_names {
    get {
    return MessageElementUtil.UnpackList<string>(rr_innerstub.PropertyGet("joint_names"));
    }
    }
    public Dictionary<string,com.robotraconteur.pid.PIDParam> position_pid {
    get {
    return MessageElementUtil.UnpackMap<string,com.robotraconteur.pid.PIDParam>(rr_innerstub.PropertyGet("position_pid"));
    }
    }
    public Dictionary<string,com.robotraconteur.pid.PIDParam> velocity_pid {
    get {
    return MessageElementUtil.UnpackMap<string,com.robotraconteur.pid.PIDParam>(rr_innerstub.PropertyGet("velocity_pid"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public void add_joint(string name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("name",name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("add_joint",rr_param))
    {
    }
    }
    }
    public void setf_position_pid(string name, com.robotraconteur.pid.PIDParam pid) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("name",name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("pid",pid));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_position_pid",rr_param))
    {
    }
    }
    }
    public void setf_velocity_pid(string name, com.robotraconteur.pid.PIDParam pid) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("name",name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("pid",pid));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_velocity_pid",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Wire<Dictionary<string,double>> joint_position {
    get { return rr_joint_position;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<Dictionary<string,double>> joint_velocity {
    get { return rr_joint_velocity;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<Dictionary<string,double>> joint_position_command {
    get { return rr_joint_position_command;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<Dictionary<string,double>> joint_velocity_command {
    get { return rr_joint_velocity_command;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<Dictionary<string,double>> joint_forces {
    get { return rr_joint_forces;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<List<string>> async_get_joint_names(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("joint_names",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<string>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<Dictionary<string,com.robotraconteur.pid.PIDParam>> async_get_position_pid(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("position_pid",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackMap<string,com.robotraconteur.pid.PIDParam>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<Dictionary<string,com.robotraconteur.pid.PIDParam>> async_get_velocity_pid(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("velocity_pid",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackMap<string,com.robotraconteur.pid.PIDParam>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task async_add_joint(string name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("name",name));
    using(var rr_return = await rr_async_FunctionCall("add_joint",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_setf_position_pid(string name, com.robotraconteur.pid.PIDParam pid,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("name",name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("pid",pid));
    using(var rr_return = await rr_async_FunctionCall("setf_position_pid",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_setf_velocity_pid(string name, com.robotraconteur.pid.PIDParam pid,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("name",name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("pid",pid));
    using(var rr_return = await rr_async_FunctionCall("setf_velocity_pid",rr_param,rr_timeout)) {
    } } }
}
public interface async_Sensor : com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Sensor_stub : ServiceStub , Sensor, async_Sensor{
    public Sensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public string name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("name"));
    }
    }
    public string type {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("type"));
    }
    }
    public string parent_name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("parent_name"));
    }
    }
    public com.robotraconteur.geometry.Pose pose {
    get {
    return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_innerstub.PropertyGet("pose"));
    }
    }
    public bool active {
    get {
    return (MessageElementUtil.UnpackScalar<bool>(rr_innerstub.PropertyGet("active")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<bool>("value",value))
    {
    rr_innerstub.PropertySet("active", m);
    }
    }
    }
    public double update_rate {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("update_rate")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<double>("value",value))
    {
    rr_innerstub.PropertySet("update_rate", m);
    }
    }
    }
    public com.robotraconteur.datetime.Duration last_update_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_update_time"));
    }
    }
    public com.robotraconteur.datetime.Duration last_measurement_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_measurement_time"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("type",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("parent_name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("pose",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("active",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<bool>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<bool>("value",value))
    {
    await rr_async_PropertySet("active",mm,rr_timeout);
    }
    }
    public virtual async Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("update_rate",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<double>("value",value))
    {
    await rr_async_PropertySet("update_rate",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_update_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_measurement_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
}
public interface async_CameraSensor : async_Sensor, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.image.Image> async_capture_image(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class CameraSensor_stub : ServiceStub , CameraSensor, async_CameraSensor{
    private Pipe<com.robotraconteur.image.Image> rr_image_stream;
    public CameraSensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_image_stream=new Pipe<com.robotraconteur.image.Image>(innerstub.GetPipe("image_stream"));
    }
    public string name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("name"));
    }
    }
    public string type {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("type"));
    }
    }
    public string parent_name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("parent_name"));
    }
    }
    public com.robotraconteur.geometry.Pose pose {
    get {
    return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_innerstub.PropertyGet("pose"));
    }
    }
    public bool active {
    get {
    return (MessageElementUtil.UnpackScalar<bool>(rr_innerstub.PropertyGet("active")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<bool>("value",value))
    {
    rr_innerstub.PropertySet("active", m);
    }
    }
    }
    public double update_rate {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("update_rate")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<double>("value",value))
    {
    rr_innerstub.PropertySet("update_rate", m);
    }
    }
    }
    public com.robotraconteur.datetime.Duration last_update_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_update_time"));
    }
    }
    public com.robotraconteur.datetime.Duration last_measurement_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_measurement_time"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public com.robotraconteur.image.Image capture_image() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("capture_image",rr_param))
    {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.image.Image>(rr_me);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<com.robotraconteur.image.Image> image_stream {
    get { return rr_image_stream;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("type",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("parent_name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("pose",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("active",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<bool>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<bool>("value",value))
    {
    await rr_async_PropertySet("active",mm,rr_timeout);
    }
    }
    public virtual async Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("update_rate",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<double>("value",value))
    {
    await rr_async_PropertySet("update_rate",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_update_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_measurement_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.image.Image> async_capture_image(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("capture_image",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.image.Image>(rr_return);
    return rr_ret;
    } } }
}
public interface async_MultiCameraSensor : async_Sensor, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<int> async_get_camera_count(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.image.Image> async_capture_image(int ind,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class MultiCameraSensor_stub : ServiceStub , MultiCameraSensor, async_MultiCameraSensor{
    private Pipe<Dictionary<int,com.robotraconteur.image.Image>> rr_image_stream;
    public MultiCameraSensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_image_stream=new Pipe<Dictionary<int,com.robotraconteur.image.Image>>(innerstub.GetPipe("image_stream"));
    }
    public string name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("name"));
    }
    }
    public string type {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("type"));
    }
    }
    public string parent_name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("parent_name"));
    }
    }
    public com.robotraconteur.geometry.Pose pose {
    get {
    return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_innerstub.PropertyGet("pose"));
    }
    }
    public bool active {
    get {
    return (MessageElementUtil.UnpackScalar<bool>(rr_innerstub.PropertyGet("active")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<bool>("value",value))
    {
    rr_innerstub.PropertySet("active", m);
    }
    }
    }
    public double update_rate {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("update_rate")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<double>("value",value))
    {
    rr_innerstub.PropertySet("update_rate", m);
    }
    }
    }
    public com.robotraconteur.datetime.Duration last_update_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_update_time"));
    }
    }
    public com.robotraconteur.datetime.Duration last_measurement_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_measurement_time"));
    }
    }
    public int camera_count {
    get {
    return (MessageElementUtil.UnpackScalar<int>(rr_innerstub.PropertyGet("camera_count")));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public com.robotraconteur.image.Image capture_image(int ind) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<int>("ind",ind));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("capture_image",rr_param))
    {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.image.Image>(rr_me);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<Dictionary<int,com.robotraconteur.image.Image>> image_stream {
    get { return rr_image_stream;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("type",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("parent_name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("pose",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("active",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<bool>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<bool>("value",value))
    {
    await rr_async_PropertySet("active",mm,rr_timeout);
    }
    }
    public virtual async Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("update_rate",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<double>("value",value))
    {
    await rr_async_PropertySet("update_rate",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_update_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_measurement_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<int> async_get_camera_count(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("camera_count",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<int>(rr_value));
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.image.Image> async_capture_image(int ind,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<int>("ind",ind));
    using(var rr_return = await rr_async_FunctionCall("capture_image",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.image.Image>(rr_return);
    return rr_ret;
    } } }
}
public interface async_DepthCameraSensor : async_Sensor, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.image.Image> async_capture_depth_image(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class DepthCameraSensor_stub : ServiceStub , DepthCameraSensor, async_DepthCameraSensor{
    private Pipe<com.robotraconteur.image.Image> rr_depth_image_stream;
    public DepthCameraSensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_depth_image_stream=new Pipe<com.robotraconteur.image.Image>(innerstub.GetPipe("depth_image_stream"));
    }
    public string name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("name"));
    }
    }
    public string type {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("type"));
    }
    }
    public string parent_name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("parent_name"));
    }
    }
    public com.robotraconteur.geometry.Pose pose {
    get {
    return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_innerstub.PropertyGet("pose"));
    }
    }
    public bool active {
    get {
    return (MessageElementUtil.UnpackScalar<bool>(rr_innerstub.PropertyGet("active")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<bool>("value",value))
    {
    rr_innerstub.PropertySet("active", m);
    }
    }
    }
    public double update_rate {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("update_rate")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<double>("value",value))
    {
    rr_innerstub.PropertySet("update_rate", m);
    }
    }
    }
    public com.robotraconteur.datetime.Duration last_update_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_update_time"));
    }
    }
    public com.robotraconteur.datetime.Duration last_measurement_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_measurement_time"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public com.robotraconteur.image.Image capture_depth_image() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("capture_depth_image",rr_param))
    {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.image.Image>(rr_me);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<com.robotraconteur.image.Image> depth_image_stream {
    get { return rr_depth_image_stream;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("type",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("parent_name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("pose",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("active",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<bool>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<bool>("value",value))
    {
    await rr_async_PropertySet("active",mm,rr_timeout);
    }
    }
    public virtual async Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("update_rate",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<double>("value",value))
    {
    await rr_async_PropertySet("update_rate",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_update_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_measurement_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.image.Image> async_capture_depth_image(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("capture_depth_image",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.image.Image>(rr_return);
    return rr_ret;
    } } }
}
public interface async_RaySensor : async_Sensor, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.laserscan.LaserScan> async_capture_scan(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class RaySensor_stub : ServiceStub , RaySensor, async_RaySensor{
    private Pipe<com.robotraconteur.laserscan.LaserScan> rr_scan_stream;
    public RaySensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_scan_stream=new Pipe<com.robotraconteur.laserscan.LaserScan>(innerstub.GetPipe("scan_stream"));
    }
    public string name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("name"));
    }
    }
    public string type {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("type"));
    }
    }
    public string parent_name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("parent_name"));
    }
    }
    public com.robotraconteur.geometry.Pose pose {
    get {
    return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_innerstub.PropertyGet("pose"));
    }
    }
    public bool active {
    get {
    return (MessageElementUtil.UnpackScalar<bool>(rr_innerstub.PropertyGet("active")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<bool>("value",value))
    {
    rr_innerstub.PropertySet("active", m);
    }
    }
    }
    public double update_rate {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("update_rate")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<double>("value",value))
    {
    rr_innerstub.PropertySet("update_rate", m);
    }
    }
    }
    public com.robotraconteur.datetime.Duration last_update_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_update_time"));
    }
    }
    public com.robotraconteur.datetime.Duration last_measurement_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_measurement_time"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public com.robotraconteur.laserscan.LaserScan capture_scan() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("capture_scan",rr_param))
    {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.laserscan.LaserScan>(rr_me);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<com.robotraconteur.laserscan.LaserScan> scan_stream {
    get { return rr_scan_stream;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("type",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("parent_name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("pose",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("active",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<bool>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<bool>("value",value))
    {
    await rr_async_PropertySet("active",mm,rr_timeout);
    }
    }
    public virtual async Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("update_rate",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<double>("value",value))
    {
    await rr_async_PropertySet("update_rate",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_update_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_measurement_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.laserscan.LaserScan> async_capture_scan(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("capture_scan",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.laserscan.LaserScan>(rr_return);
    return rr_ret;
    } } }
}
public interface async_ContactSensor : async_Sensor, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class ContactSensor_stub : ServiceStub , ContactSensor, async_ContactSensor{
    private Wire<List<Contact>> rr_contacts;
    public ContactSensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_contacts=new Wire<List<Contact>>(innerstub.GetWire("contacts"));
    }
    public string name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("name"));
    }
    }
    public string type {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("type"));
    }
    }
    public string parent_name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("parent_name"));
    }
    }
    public com.robotraconteur.geometry.Pose pose {
    get {
    return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_innerstub.PropertyGet("pose"));
    }
    }
    public bool active {
    get {
    return (MessageElementUtil.UnpackScalar<bool>(rr_innerstub.PropertyGet("active")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<bool>("value",value))
    {
    rr_innerstub.PropertySet("active", m);
    }
    }
    }
    public double update_rate {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("update_rate")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<double>("value",value))
    {
    rr_innerstub.PropertySet("update_rate", m);
    }
    }
    }
    public com.robotraconteur.datetime.Duration last_update_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_update_time"));
    }
    }
    public com.robotraconteur.datetime.Duration last_measurement_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_measurement_time"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Wire<List<Contact>> contacts {
    get { return rr_contacts;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("type",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("parent_name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("pose",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("active",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<bool>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<bool>("value",value))
    {
    await rr_async_PropertySet("active",mm,rr_timeout);
    }
    }
    public virtual async Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("update_rate",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<double>("value",value))
    {
    await rr_async_PropertySet("update_rate",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_update_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_measurement_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
}
public interface async_AltimeterSensor : async_Sensor, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class AltimeterSensor_stub : ServiceStub , AltimeterSensor, async_AltimeterSensor{
    private Wire<double> rr_altitude;
    public AltimeterSensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_altitude=new Wire<double>(innerstub.GetWire("altitude"));
    }
    public string name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("name"));
    }
    }
    public string type {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("type"));
    }
    }
    public string parent_name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("parent_name"));
    }
    }
    public com.robotraconteur.geometry.Pose pose {
    get {
    return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_innerstub.PropertyGet("pose"));
    }
    }
    public bool active {
    get {
    return (MessageElementUtil.UnpackScalar<bool>(rr_innerstub.PropertyGet("active")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<bool>("value",value))
    {
    rr_innerstub.PropertySet("active", m);
    }
    }
    }
    public double update_rate {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("update_rate")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<double>("value",value))
    {
    rr_innerstub.PropertySet("update_rate", m);
    }
    }
    }
    public com.robotraconteur.datetime.Duration last_update_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_update_time"));
    }
    }
    public com.robotraconteur.datetime.Duration last_measurement_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_measurement_time"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Wire<double> altitude {
    get { return rr_altitude;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("type",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("parent_name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("pose",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("active",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<bool>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<bool>("value",value))
    {
    await rr_async_PropertySet("active",mm,rr_timeout);
    }
    }
    public virtual async Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("update_rate",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<double>("value",value))
    {
    await rr_async_PropertySet("update_rate",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_update_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_measurement_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
}
public interface async_SonarSensor : async_Sensor, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_range_min(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_range_max(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_radius(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class SonarSensor_stub : ServiceStub , SonarSensor, async_SonarSensor{
    private Wire<double> rr_range;
    public SonarSensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_range=new Wire<double>(innerstub.GetWire("range"));
    }
    public string name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("name"));
    }
    }
    public string type {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("type"));
    }
    }
    public string parent_name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("parent_name"));
    }
    }
    public com.robotraconteur.geometry.Pose pose {
    get {
    return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_innerstub.PropertyGet("pose"));
    }
    }
    public bool active {
    get {
    return (MessageElementUtil.UnpackScalar<bool>(rr_innerstub.PropertyGet("active")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<bool>("value",value))
    {
    rr_innerstub.PropertySet("active", m);
    }
    }
    }
    public double update_rate {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("update_rate")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<double>("value",value))
    {
    rr_innerstub.PropertySet("update_rate", m);
    }
    }
    }
    public com.robotraconteur.datetime.Duration last_update_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_update_time"));
    }
    }
    public com.robotraconteur.datetime.Duration last_measurement_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_measurement_time"));
    }
    }
    public double range_min {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("range_min")));
    }
    }
    public double range_max {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("range_max")));
    }
    }
    public double radius {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("radius")));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Wire<double> range {
    get { return rr_range;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("type",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("parent_name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("pose",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("active",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<bool>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<bool>("value",value))
    {
    await rr_async_PropertySet("active",mm,rr_timeout);
    }
    }
    public virtual async Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("update_rate",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<double>("value",value))
    {
    await rr_async_PropertySet("update_rate",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_update_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_measurement_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<double> async_get_range_min(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("range_min",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task<double> async_get_range_max(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("range_max",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task<double> async_get_radius(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("radius",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
}
public interface async_MagnetometerSensor : async_Sensor, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class MagnetometerSensor_stub : ServiceStub , MagnetometerSensor, async_MagnetometerSensor{
    private Wire<com.robotraconteur.geometry.Vector3> rr_magnetic_field;
    public MagnetometerSensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_magnetic_field=new Wire<com.robotraconteur.geometry.Vector3>(innerstub.GetWire("magnetic_field"));
    }
    public string name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("name"));
    }
    }
    public string type {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("type"));
    }
    }
    public string parent_name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("parent_name"));
    }
    }
    public com.robotraconteur.geometry.Pose pose {
    get {
    return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_innerstub.PropertyGet("pose"));
    }
    }
    public bool active {
    get {
    return (MessageElementUtil.UnpackScalar<bool>(rr_innerstub.PropertyGet("active")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<bool>("value",value))
    {
    rr_innerstub.PropertySet("active", m);
    }
    }
    }
    public double update_rate {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("update_rate")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<double>("value",value))
    {
    rr_innerstub.PropertySet("update_rate", m);
    }
    }
    }
    public com.robotraconteur.datetime.Duration last_update_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_update_time"));
    }
    }
    public com.robotraconteur.datetime.Duration last_measurement_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_measurement_time"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Wire<com.robotraconteur.geometry.Vector3> magnetic_field {
    get { return rr_magnetic_field;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("type",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("parent_name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("pose",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("active",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<bool>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<bool>("value",value))
    {
    await rr_async_PropertySet("active",mm,rr_timeout);
    }
    }
    public virtual async Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("update_rate",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<double>("value",value))
    {
    await rr_async_PropertySet("update_rate",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_update_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_measurement_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
}
public interface async_ForceTorqueSensor : async_Sensor, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class ForceTorqueSensor_stub : ServiceStub , ForceTorqueSensor, async_ForceTorqueSensor{
    private Wire<com.robotraconteur.geometry.Wrench> rr_force_torque;
    public ForceTorqueSensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_force_torque=new Wire<com.robotraconteur.geometry.Wrench>(innerstub.GetWire("force_torque"));
    }
    public string name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("name"));
    }
    }
    public string type {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("type"));
    }
    }
    public string parent_name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("parent_name"));
    }
    }
    public com.robotraconteur.geometry.Pose pose {
    get {
    return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_innerstub.PropertyGet("pose"));
    }
    }
    public bool active {
    get {
    return (MessageElementUtil.UnpackScalar<bool>(rr_innerstub.PropertyGet("active")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<bool>("value",value))
    {
    rr_innerstub.PropertySet("active", m);
    }
    }
    }
    public double update_rate {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("update_rate")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<double>("value",value))
    {
    rr_innerstub.PropertySet("update_rate", m);
    }
    }
    }
    public com.robotraconteur.datetime.Duration last_update_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_update_time"));
    }
    }
    public com.robotraconteur.datetime.Duration last_measurement_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_measurement_time"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Wire<com.robotraconteur.geometry.Wrench> force_torque {
    get { return rr_force_torque;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("type",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("parent_name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("pose",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("active",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<bool>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<bool>("value",value))
    {
    await rr_async_PropertySet("active",mm,rr_timeout);
    }
    }
    public virtual async Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("update_rate",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<double>("value",value))
    {
    await rr_async_PropertySet("update_rate",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_update_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_measurement_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
}
public interface async_GpsSensor : async_Sensor, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class GpsSensor_stub : ServiceStub , GpsSensor, async_GpsSensor{
    private Wire<com.robotraconteur.gps.GpsState> rr_state;
    public GpsSensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_state=new Wire<com.robotraconteur.gps.GpsState>(innerstub.GetWire("state"));
    }
    public string name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("name"));
    }
    }
    public string type {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("type"));
    }
    }
    public string parent_name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("parent_name"));
    }
    }
    public com.robotraconteur.geometry.Pose pose {
    get {
    return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_innerstub.PropertyGet("pose"));
    }
    }
    public bool active {
    get {
    return (MessageElementUtil.UnpackScalar<bool>(rr_innerstub.PropertyGet("active")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<bool>("value",value))
    {
    rr_innerstub.PropertySet("active", m);
    }
    }
    }
    public double update_rate {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("update_rate")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<double>("value",value))
    {
    rr_innerstub.PropertySet("update_rate", m);
    }
    }
    }
    public com.robotraconteur.datetime.Duration last_update_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_update_time"));
    }
    }
    public com.robotraconteur.datetime.Duration last_measurement_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_measurement_time"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Wire<com.robotraconteur.gps.GpsState> state {
    get { return rr_state;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("type",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("parent_name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("pose",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("active",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<bool>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<bool>("value",value))
    {
    await rr_async_PropertySet("active",mm,rr_timeout);
    }
    }
    public virtual async Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("update_rate",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<double>("value",value))
    {
    await rr_async_PropertySet("update_rate",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_update_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_measurement_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
}
public interface async_ImuSensor : async_Sensor, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_reference_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class ImuSensor_stub : ServiceStub , ImuSensor, async_ImuSensor{
    private Wire<com.robotraconteur.imu.ImuState> rr_state;
    public ImuSensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_state=new Wire<com.robotraconteur.imu.ImuState>(innerstub.GetWire("state"));
    }
    public string name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("name"));
    }
    }
    public string type {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("type"));
    }
    }
    public string parent_name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("parent_name"));
    }
    }
    public com.robotraconteur.geometry.Pose pose {
    get {
    return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_innerstub.PropertyGet("pose"));
    }
    }
    public bool active {
    get {
    return (MessageElementUtil.UnpackScalar<bool>(rr_innerstub.PropertyGet("active")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<bool>("value",value))
    {
    rr_innerstub.PropertySet("active", m);
    }
    }
    }
    public double update_rate {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("update_rate")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<double>("value",value))
    {
    rr_innerstub.PropertySet("update_rate", m);
    }
    }
    }
    public com.robotraconteur.datetime.Duration last_update_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_update_time"));
    }
    }
    public com.robotraconteur.datetime.Duration last_measurement_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_measurement_time"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public void setf_reference_pose() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_reference_pose",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Wire<com.robotraconteur.imu.ImuState> state {
    get { return rr_state;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("type",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("parent_name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("pose",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("active",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<bool>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<bool>("value",value))
    {
    await rr_async_PropertySet("active",mm,rr_timeout);
    }
    }
    public virtual async Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("update_rate",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<double>("value",value))
    {
    await rr_async_PropertySet("update_rate",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_update_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_measurement_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task async_setf_reference_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("setf_reference_pose",rr_param,rr_timeout)) {
    } } }
}
public interface async_LogicalCameraSensor : async_Sensor, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.objectrecognition.RecognizedObjects> async_capture_image(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class LogicalCameraSensor_stub : ServiceStub , LogicalCameraSensor, async_LogicalCameraSensor{
    private Pipe<com.robotraconteur.objectrecognition.RecognizedObjects> rr_image_stream;
    public LogicalCameraSensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_image_stream=new Pipe<com.robotraconteur.objectrecognition.RecognizedObjects>(innerstub.GetPipe("image_stream"));
    }
    public string name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("name"));
    }
    }
    public string type {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("type"));
    }
    }
    public string parent_name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("parent_name"));
    }
    }
    public com.robotraconteur.geometry.Pose pose {
    get {
    return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_innerstub.PropertyGet("pose"));
    }
    }
    public bool active {
    get {
    return (MessageElementUtil.UnpackScalar<bool>(rr_innerstub.PropertyGet("active")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<bool>("value",value))
    {
    rr_innerstub.PropertySet("active", m);
    }
    }
    }
    public double update_rate {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("update_rate")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<double>("value",value))
    {
    rr_innerstub.PropertySet("update_rate", m);
    }
    }
    }
    public com.robotraconteur.datetime.Duration last_update_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_update_time"));
    }
    }
    public com.robotraconteur.datetime.Duration last_measurement_time {
    get {
    return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_innerstub.PropertyGet("last_measurement_time"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public com.robotraconteur.objectrecognition.RecognizedObjects capture_image() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("capture_image",rr_param))
    {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.objectrecognition.RecognizedObjects>(rr_me);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<com.robotraconteur.objectrecognition.RecognizedObjects> image_stream {
    get { return rr_image_stream;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("type",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_parent_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("parent_name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("pose",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<bool> async_get_active(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("active",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<bool>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_active(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<bool>("value",value))
    {
    await rr_async_PropertySet("active",mm,rr_timeout);
    }
    }
    public virtual async Task<double> async_get_update_rate(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("update_rate",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_update_rate(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<double>("value",value))
    {
    await rr_async_PropertySet("update_rate",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_update_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_update_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.datetime.Duration> async_get_last_measurement_time(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("last_measurement_time",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.objectrecognition.RecognizedObjects> async_capture_image(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("capture_image",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.objectrecognition.RecognizedObjects>(rr_return);
    return rr_ret;
    } } }
}
public interface async_Light
{
    Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.geometry.Vector3> async_get_direction(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.color.ColorRGBAf> async_get_diffuse_color(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_diffuse_color(com.robotraconteur.color.ColorRGBAf value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.color.ColorRGBAf> async_get_specular_color(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_specular_color(com.robotraconteur.color.ColorRGBAf value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Light_stub : ServiceStub , Light, async_Light{
    public Light_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public string name {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("name"));
    }
    }
    public string type {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("type"));
    }
    }
    public com.robotraconteur.geometry.Pose pose {
    get {
    return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_innerstub.PropertyGet("pose"));
    }
    }
    public com.robotraconteur.geometry.Vector3 direction {
    get {
    return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Vector3>(rr_innerstub.PropertyGet("direction"));
    }
    }
    public com.robotraconteur.color.ColorRGBAf diffuse_color {
    get {
    return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBAf>(rr_innerstub.PropertyGet("diffuse_color"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBAf>("value",ref value))
    {
    rr_innerstub.PropertySet("diffuse_color", m);
    }
    }
    }
    public com.robotraconteur.color.ColorRGBAf specular_color {
    get {
    return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBAf>(rr_innerstub.PropertyGet("specular_color"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBAf>("value",ref value))
    {
    rr_innerstub.PropertySet("specular_color", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_name(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("name",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<string> async_get_type(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("type",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.geometry.Pose> async_get_pose(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("pose",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.geometry.Vector3> async_get_direction(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("direction",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Vector3>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.color.ColorRGBAf> async_get_diffuse_color(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("diffuse_color",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBAf>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_diffuse_color(com.robotraconteur.color.ColorRGBAf value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBAf>("value",ref value))
    {
    await rr_async_PropertySet("diffuse_color",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.color.ColorRGBAf> async_get_specular_color(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("specular_color",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBAf>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_specular_color(com.robotraconteur.color.ColorRGBAf value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBAf>("value",ref value))
    {
    await rr_async_PropertySet("specular_color",mm,rr_timeout);
    }
    }
}
public class Base_skel : ServiceSkel {
    protected Base obj;
    protected async_Base async_obj;
    public Base_skel(object o) : base(o)    {
    obj=(Base)o;
    async_obj = o as async_Base;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "scoped_name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_scoped_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.scoped_name;
    return MessageElementUtil.PackString("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Base)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Base)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Base)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Base)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Base)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.Base"; } }
}
public class Server_skel : ServiceSkel {
    protected Server obj;
    protected async_Server async_obj;
    public Server_skel(object o) : base(o)    {
    obj=(Server)o;
    async_obj = o as async_Server;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "world_names":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_world_names().ContinueWith(t => async_adapter.EndTask<List<string>>(t,async_ret => MessageElementUtil.PackListType<string>("return",async_ret)));
    return null;
    }
    List<string> ret=obj.world_names;
    return MessageElementUtil.PackListType<string>("return",ret);
    }
    case "sensor_names":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_sensor_names().ContinueWith(t => async_adapter.EndTask<List<string>>(t,async_ret => MessageElementUtil.PackListType<string>("return",async_ret)));
    return null;
    }
    List<string> ret=obj.sensor_names;
    return MessageElementUtil.PackListType<string>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    case "worlds": {
    return obj.get_worlds(ind);
    }
    case "sensors": {
    return obj.get_sensors(ind);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Server)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Server)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Server)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Server)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Server)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.Server"; } }
}
public class World_skel : ServiceSkel {
    protected World obj;
    protected async_World async_obj;
    public World_skel(object o) : base(o)    {
    obj=(World)o;
    async_obj = o as async_World;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "model_names":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_model_names().ContinueWith(t => async_adapter.EndTask<List<string>>(t,async_ret => MessageElementUtil.PackListType<string>("return",async_ret)));
    return null;
    }
    List<string> ret=obj.model_names;
    return MessageElementUtil.PackListType<string>("return",ret);
    }
    case "light_names":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_light_names().ContinueWith(t => async_adapter.EndTask<List<string>>(t,async_ret => MessageElementUtil.PackListType<string>("return",async_ret)));
    return null;
    }
    List<string> ret=obj.light_names;
    return MessageElementUtil.PackListType<string>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "insert_model":
    {
    string model_sdf=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"model_sdf"));
    string model_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"model_name"));
    com.robotraconteur.geometry.Pose model_pose=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(vectorptr_messageelement_util.FindElement(rr_m,"model_pose"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_insert_model(model_sdf, model_name, model_pose).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.insert_model(model_sdf, model_name, model_pose);
    return new MessageElement("return",(int)0);
    }
    case "remove_model":
    {
    string model_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"model_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_remove_model(model_name).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.remove_model(model_name);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    case "models": {
    return obj.get_models(ind);
    }
    case "lights": {
    return obj.get_lights(ind);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(World)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(World)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(World)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(World)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(World)rrobj1;
    obj.sim_time=new Wire<com.robotraconteur.datetime.Duration>(innerskel.GetWire("sim_time"));
    obj.time=new Wire<WorldTimes>(innerskel.GetWire("time"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.World"; } }
}
public class Entity_skel : ServiceSkel {
    protected Entity obj;
    protected async_Entity async_obj;
    public Entity_skel(object o) : base(o)    {
    obj=(Entity)o;
    async_obj = o as async_Entity;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "scoped_name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_scoped_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.scoped_name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "setf_world_pose":
    {
    com.robotraconteur.geometry.Pose pose=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(vectorptr_messageelement_util.FindElement(rr_m,"pose"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_world_pose(pose).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_world_pose(pose);
    return new MessageElement("return",(int)0);
    }
    case "setf_relative_pose":
    {
    com.robotraconteur.geometry.Pose pose=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(vectorptr_messageelement_util.FindElement(rr_m,"pose"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_relative_pose(pose).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_relative_pose(pose);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Entity)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Entity)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Entity)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Entity)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Entity)rrobj1;
    obj.world_pose=new Wire<com.robotraconteur.geometry.Pose>(innerskel.GetWire("world_pose"));
    obj.relative_pose=new Wire<com.robotraconteur.geometry.Pose>(innerskel.GetWire("relative_pose"));
    obj.world_velocity=new Wire<com.robotraconteur.geometry.SpatialVelocity>(innerskel.GetWire("world_velocity"));
    obj.relative_velocity=new Wire<com.robotraconteur.geometry.SpatialVelocity>(innerskel.GetWire("relative_velocity"));
    obj.world_acceleration=new Wire<com.robotraconteur.geometry.SpatialAcceleration>(innerskel.GetWire("world_acceleration"));
    obj.relative_acceleration=new Wire<com.robotraconteur.geometry.SpatialAcceleration>(innerskel.GetWire("relative_acceleration"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.Entity"; } }
}
public class Model_skel : ServiceSkel {
    protected Model obj;
    protected async_Model async_obj;
    public Model_skel(object o) : base(o)    {
    obj=(Model)o;
    async_obj = o as async_Model;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "scoped_name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_scoped_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.scoped_name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "child_model_names":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_child_model_names().ContinueWith(t => async_adapter.EndTask<List<string>>(t,async_ret => MessageElementUtil.PackListType<string>("return",async_ret)));
    return null;
    }
    List<string> ret=obj.child_model_names;
    return MessageElementUtil.PackListType<string>("return",ret);
    }
    case "link_names":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_link_names().ContinueWith(t => async_adapter.EndTask<List<string>>(t,async_ret => MessageElementUtil.PackListType<string>("return",async_ret)));
    return null;
    }
    List<string> ret=obj.link_names;
    return MessageElementUtil.PackListType<string>("return",ret);
    }
    case "joint_names":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_joint_names().ContinueWith(t => async_adapter.EndTask<List<string>>(t,async_ret => MessageElementUtil.PackListType<string>("return",async_ret)));
    return null;
    }
    List<string> ret=obj.joint_names;
    return MessageElementUtil.PackListType<string>("return",ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "setf_world_pose":
    {
    com.robotraconteur.geometry.Pose pose=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(vectorptr_messageelement_util.FindElement(rr_m,"pose"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_world_pose(pose).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_world_pose(pose);
    return new MessageElement("return",(int)0);
    }
    case "setf_relative_pose":
    {
    com.robotraconteur.geometry.Pose pose=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(vectorptr_messageelement_util.FindElement(rr_m,"pose"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_relative_pose(pose).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_relative_pose(pose);
    return new MessageElement("return",(int)0);
    }
    case "create_joint_controller":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_create_joint_controller().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.create_joint_controller();
    return new MessageElement("return",(int)0);
    }
    case "destroy_joint_controller":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_destroy_joint_controller().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.destroy_joint_controller();
    return new MessageElement("return",(int)0);
    }
    case "create_kinematic_joint_controller":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_create_kinematic_joint_controller().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.create_kinematic_joint_controller();
    return new MessageElement("return",(int)0);
    }
    case "destroy_kinematic_joint_controller":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_destroy_kinematic_joint_controller().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.destroy_kinematic_joint_controller();
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    case "child_models": {
    return obj.get_child_models(ind);
    }
    case "links": {
    return obj.get_links(ind);
    }
    case "joints": {
    return obj.get_joints(ind);
    }
    case "joint_controller": {
    return obj.get_joint_controller();
    }
    case "kinematic_joint_controller": {
    return obj.get_kinematic_joint_controller();
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Model)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Model)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Model)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Model)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Model)rrobj1;
    obj.world_pose=new Wire<com.robotraconteur.geometry.Pose>(innerskel.GetWire("world_pose"));
    obj.relative_pose=new Wire<com.robotraconteur.geometry.Pose>(innerskel.GetWire("relative_pose"));
    obj.world_velocity=new Wire<com.robotraconteur.geometry.SpatialVelocity>(innerskel.GetWire("world_velocity"));
    obj.relative_velocity=new Wire<com.robotraconteur.geometry.SpatialVelocity>(innerskel.GetWire("relative_velocity"));
    obj.world_acceleration=new Wire<com.robotraconteur.geometry.SpatialAcceleration>(innerskel.GetWire("world_acceleration"));
    obj.relative_acceleration=new Wire<com.robotraconteur.geometry.SpatialAcceleration>(innerskel.GetWire("relative_acceleration"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.Model"; } }
}
public class Link_skel : ServiceSkel {
    protected Link obj;
    protected async_Link async_obj;
    public Link_skel(object o) : base(o)    {
    obj=(Link)o;
    async_obj = o as async_Link;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "scoped_name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_scoped_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.scoped_name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "sensor_names":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_sensor_names().ContinueWith(t => async_adapter.EndTask<List<string>>(t,async_ret => MessageElementUtil.PackListType<string>("return",async_ret)));
    return null;
    }
    List<string> ret=obj.sensor_names;
    return MessageElementUtil.PackListType<string>("return",ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "setf_world_pose":
    {
    com.robotraconteur.geometry.Pose pose=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(vectorptr_messageelement_util.FindElement(rr_m,"pose"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_world_pose(pose).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_world_pose(pose);
    return new MessageElement("return",(int)0);
    }
    case "setf_relative_pose":
    {
    com.robotraconteur.geometry.Pose pose=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(vectorptr_messageelement_util.FindElement(rr_m,"pose"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_relative_pose(pose).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_relative_pose(pose);
    return new MessageElement("return",(int)0);
    }
    case "attach_link":
    {
    string model=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"model"));
    string link_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"link_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_attach_link(model, link_name).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.attach_link(model, link_name);
    return new MessageElement("return",(int)0);
    }
    case "attach_link_with_pose":
    {
    string model_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"model_name"));
    string link_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"link_name"));
    com.robotraconteur.geometry.Pose pose=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(vectorptr_messageelement_util.FindElement(rr_m,"pose"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_attach_link_with_pose(model_name, link_name, pose).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.attach_link_with_pose(model_name, link_name, pose);
    return new MessageElement("return",(int)0);
    }
    case "detach_link":
    {
    string model_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"model_name"));
    string link_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"link_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_detach_link(model_name, link_name).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.detach_link(model_name, link_name);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Link)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Link)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Link)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Link)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Link)rrobj1;
    obj.world_pose=new Wire<com.robotraconteur.geometry.Pose>(innerskel.GetWire("world_pose"));
    obj.relative_pose=new Wire<com.robotraconteur.geometry.Pose>(innerskel.GetWire("relative_pose"));
    obj.world_velocity=new Wire<com.robotraconteur.geometry.SpatialVelocity>(innerskel.GetWire("world_velocity"));
    obj.relative_velocity=new Wire<com.robotraconteur.geometry.SpatialVelocity>(innerskel.GetWire("relative_velocity"));
    obj.world_acceleration=new Wire<com.robotraconteur.geometry.SpatialAcceleration>(innerskel.GetWire("world_acceleration"));
    obj.relative_acceleration=new Wire<com.robotraconteur.geometry.SpatialAcceleration>(innerskel.GetWire("relative_acceleration"));
    obj.applied_wrenches=new Wire<List<com.robotraconteur.geometry.Wrench>>(innerskel.GetWire("applied_wrenches"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.Link"; } }
}
public class Joint_skel : ServiceSkel {
    protected Joint obj;
    protected async_Joint async_obj;
    public Joint_skel(object o) : base(o)    {
    obj=(Joint)o;
    async_obj = o as async_Joint;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "scoped_name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_scoped_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.scoped_name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "parent_link_name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_parent_link_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.parent_link_name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "child_link_name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_child_link_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.child_link_name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "dof":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_dof().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.dof;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "getf_global_axes":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_global_axes().ContinueWith(t => rr_async_adapter.EndTask<com.robotraconteur.geometry.Vector3[]>(t,async_ret => MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Vector3>("return",async_ret)));
    return null;
    }
    com.robotraconteur.geometry.Vector3[] rr_ret=this.obj.getf_global_axes();
    return MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Vector3>("return",rr_ret);
    }
    case "getf_local_axes":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_local_axes().ContinueWith(t => rr_async_adapter.EndTask<com.robotraconteur.geometry.Vector3[]>(t,async_ret => MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Vector3>("return",async_ret)));
    return null;
    }
    com.robotraconteur.geometry.Vector3[] rr_ret=this.obj.getf_local_axes();
    return MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Vector3>("return",rr_ret);
    }
    case "setf_axis_position":
    {
    uint axis=(MessageElementUtil.UnpackScalar<uint>(vectorptr_messageelement_util.FindElement(rr_m,"axis")));
    double position=(MessageElementUtil.UnpackScalar<double>(vectorptr_messageelement_util.FindElement(rr_m,"position")));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_axis_position(axis, position).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_axis_position(axis, position);
    return new MessageElement("return",(int)0);
    }
    case "setf_axis_velocity":
    {
    uint axis=(MessageElementUtil.UnpackScalar<uint>(vectorptr_messageelement_util.FindElement(rr_m,"axis")));
    double vel=(MessageElementUtil.UnpackScalar<double>(vectorptr_messageelement_util.FindElement(rr_m,"vel")));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_axis_velocity(axis, vel).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_axis_velocity(axis, vel);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Joint)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Joint)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Joint)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Joint)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Joint)rrobj1;
    obj.axes_position=new Wire<double[]>(innerskel.GetWire("axes_position"));
    obj.axes_velocity=new Wire<double[]>(innerskel.GetWire("axes_velocity"));
    obj.axes_force=new Wire<double[]>(innerskel.GetWire("axes_force"));
    obj.force_torque=new Wire<JointWrench>(innerskel.GetWire("force_torque"));
    obj.apply_axes_force=new Wire<double[]>(innerskel.GetWire("apply_axes_force"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.Joint"; } }
}
public class JointController_skel : ServiceSkel {
    protected JointController obj;
    protected async_JointController async_obj;
    public JointController_skel(object o) : base(o)    {
    obj=(JointController)o;
    async_obj = o as async_JointController;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "joint_names":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_joint_names().ContinueWith(t => async_adapter.EndTask<List<string>>(t,async_ret => MessageElementUtil.PackListType<string>("return",async_ret)));
    return null;
    }
    List<string> ret=obj.joint_names;
    return MessageElementUtil.PackListType<string>("return",ret);
    }
    case "position_pid":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_position_pid().ContinueWith(t => async_adapter.EndTask<Dictionary<string,com.robotraconteur.pid.PIDParam>>(t,async_ret => MessageElementUtil.PackMapType<string,com.robotraconteur.pid.PIDParam>("return",async_ret)));
    return null;
    }
    Dictionary<string,com.robotraconteur.pid.PIDParam> ret=obj.position_pid;
    return MessageElementUtil.PackMapType<string,com.robotraconteur.pid.PIDParam>("return",ret);
    }
    case "velocity_pid":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_velocity_pid().ContinueWith(t => async_adapter.EndTask<Dictionary<string,com.robotraconteur.pid.PIDParam>>(t,async_ret => MessageElementUtil.PackMapType<string,com.robotraconteur.pid.PIDParam>("return",async_ret)));
    return null;
    }
    Dictionary<string,com.robotraconteur.pid.PIDParam> ret=obj.velocity_pid;
    return MessageElementUtil.PackMapType<string,com.robotraconteur.pid.PIDParam>("return",ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "add_joint":
    {
    string name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_add_joint(name).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.add_joint(name);
    return new MessageElement("return",(int)0);
    }
    case "setf_position_pid":
    {
    string name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"name"));
    com.robotraconteur.pid.PIDParam pid=MessageElementUtil.UnpackStructure<com.robotraconteur.pid.PIDParam>(vectorptr_messageelement_util.FindElement(rr_m,"pid"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_position_pid(name, pid).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_position_pid(name, pid);
    return new MessageElement("return",(int)0);
    }
    case "setf_velocity_pid":
    {
    string name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"name"));
    com.robotraconteur.pid.PIDParam pid=MessageElementUtil.UnpackStructure<com.robotraconteur.pid.PIDParam>(vectorptr_messageelement_util.FindElement(rr_m,"pid"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_velocity_pid(name, pid).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_velocity_pid(name, pid);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(JointController)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(JointController)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(JointController)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(JointController)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(JointController)rrobj1;
    obj.joint_position=new Wire<Dictionary<string,double>>(innerskel.GetWire("joint_position"));
    obj.joint_velocity=new Wire<Dictionary<string,double>>(innerskel.GetWire("joint_velocity"));
    obj.joint_position_command=new Wire<Dictionary<string,double>>(innerskel.GetWire("joint_position_command"));
    obj.joint_velocity_command=new Wire<Dictionary<string,double>>(innerskel.GetWire("joint_velocity_command"));
    obj.joint_forces=new Wire<Dictionary<string,double>>(innerskel.GetWire("joint_forces"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.JointController"; } }
}
public class Sensor_skel : ServiceSkel {
    protected Sensor obj;
    protected async_Sensor async_obj;
    public Sensor_skel(object o) : base(o)    {
    obj=(Sensor)o;
    async_obj = o as async_Sensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "type":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_type().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.type;
    return MessageElementUtil.PackString("return",ret);
    }
    case "parent_name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_parent_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.parent_name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "pose":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_pose().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.geometry.Pose>(t,async_ret => MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.geometry.Pose ret=obj.pose;
    return MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref ret);
    }
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_active().ContinueWith(t => async_adapter.EndTask<bool>(t,async_ret => MessageElementUtil.PackScalar<bool>("return",async_ret)));
    return null;
    }
    bool ret=obj.active;
    return MessageElementUtil.PackScalar<bool>("return",ret);
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_update_rate().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.update_rate;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "last_update_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_update_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_update_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "last_measurement_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_measurement_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_measurement_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_active((MessageElementUtil.UnpackScalar<bool>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.active=(MessageElementUtil.UnpackScalar<bool>(m));
    return;
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_update_rate((MessageElementUtil.UnpackScalar<double>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.update_rate=(MessageElementUtil.UnpackScalar<double>(m));
    return;
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Sensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Sensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Sensor)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Sensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Sensor)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.Sensor"; } }
}
public class CameraSensor_skel : ServiceSkel {
    protected CameraSensor obj;
    protected async_CameraSensor async_obj;
    public CameraSensor_skel(object o) : base(o)    {
    obj=(CameraSensor)o;
    async_obj = o as async_CameraSensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "type":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_type().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.type;
    return MessageElementUtil.PackString("return",ret);
    }
    case "parent_name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_parent_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.parent_name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "pose":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_pose().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.geometry.Pose>(t,async_ret => MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.geometry.Pose ret=obj.pose;
    return MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref ret);
    }
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_active().ContinueWith(t => async_adapter.EndTask<bool>(t,async_ret => MessageElementUtil.PackScalar<bool>("return",async_ret)));
    return null;
    }
    bool ret=obj.active;
    return MessageElementUtil.PackScalar<bool>("return",ret);
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_update_rate().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.update_rate;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "last_update_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_update_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_update_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "last_measurement_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_measurement_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_measurement_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_active((MessageElementUtil.UnpackScalar<bool>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.active=(MessageElementUtil.UnpackScalar<bool>(m));
    return;
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_update_rate((MessageElementUtil.UnpackScalar<double>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.update_rate=(MessageElementUtil.UnpackScalar<double>(m));
    return;
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "capture_image":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_capture_image().ContinueWith(t => rr_async_adapter.EndTask<com.robotraconteur.image.Image>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.image.Image rr_ret=this.obj.capture_image();
    return MessageElementUtil.PackStructure("return",rr_ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(CameraSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(CameraSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(CameraSensor)rrobj1;
    obj.image_stream=new Pipe<com.robotraconteur.image.Image>(innerskel.GetPipe("image_stream"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(CameraSensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(CameraSensor)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.CameraSensor"; } }
}
public class MultiCameraSensor_skel : ServiceSkel {
    protected MultiCameraSensor obj;
    protected async_MultiCameraSensor async_obj;
    public MultiCameraSensor_skel(object o) : base(o)    {
    obj=(MultiCameraSensor)o;
    async_obj = o as async_MultiCameraSensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "type":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_type().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.type;
    return MessageElementUtil.PackString("return",ret);
    }
    case "parent_name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_parent_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.parent_name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "pose":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_pose().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.geometry.Pose>(t,async_ret => MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.geometry.Pose ret=obj.pose;
    return MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref ret);
    }
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_active().ContinueWith(t => async_adapter.EndTask<bool>(t,async_ret => MessageElementUtil.PackScalar<bool>("return",async_ret)));
    return null;
    }
    bool ret=obj.active;
    return MessageElementUtil.PackScalar<bool>("return",ret);
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_update_rate().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.update_rate;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "last_update_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_update_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_update_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "last_measurement_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_measurement_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_measurement_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "camera_count":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_camera_count().ContinueWith(t => async_adapter.EndTask<int>(t,async_ret => MessageElementUtil.PackScalar<int>("return",async_ret)));
    return null;
    }
    int ret=obj.camera_count;
    return MessageElementUtil.PackScalar<int>("return",ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_active((MessageElementUtil.UnpackScalar<bool>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.active=(MessageElementUtil.UnpackScalar<bool>(m));
    return;
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_update_rate((MessageElementUtil.UnpackScalar<double>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.update_rate=(MessageElementUtil.UnpackScalar<double>(m));
    return;
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "capture_image":
    {
    int ind=(MessageElementUtil.UnpackScalar<int>(vectorptr_messageelement_util.FindElement(rr_m,"ind")));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_capture_image(ind).ContinueWith(t => rr_async_adapter.EndTask<com.robotraconteur.image.Image>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.image.Image rr_ret=this.obj.capture_image(ind);
    return MessageElementUtil.PackStructure("return",rr_ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(MultiCameraSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(MultiCameraSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(MultiCameraSensor)rrobj1;
    obj.image_stream=new Pipe<Dictionary<int,com.robotraconteur.image.Image>>(innerskel.GetPipe("image_stream"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(MultiCameraSensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(MultiCameraSensor)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.MultiCameraSensor"; } }
}
public class DepthCameraSensor_skel : ServiceSkel {
    protected DepthCameraSensor obj;
    protected async_DepthCameraSensor async_obj;
    public DepthCameraSensor_skel(object o) : base(o)    {
    obj=(DepthCameraSensor)o;
    async_obj = o as async_DepthCameraSensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "type":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_type().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.type;
    return MessageElementUtil.PackString("return",ret);
    }
    case "parent_name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_parent_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.parent_name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "pose":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_pose().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.geometry.Pose>(t,async_ret => MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.geometry.Pose ret=obj.pose;
    return MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref ret);
    }
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_active().ContinueWith(t => async_adapter.EndTask<bool>(t,async_ret => MessageElementUtil.PackScalar<bool>("return",async_ret)));
    return null;
    }
    bool ret=obj.active;
    return MessageElementUtil.PackScalar<bool>("return",ret);
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_update_rate().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.update_rate;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "last_update_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_update_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_update_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "last_measurement_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_measurement_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_measurement_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_active((MessageElementUtil.UnpackScalar<bool>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.active=(MessageElementUtil.UnpackScalar<bool>(m));
    return;
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_update_rate((MessageElementUtil.UnpackScalar<double>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.update_rate=(MessageElementUtil.UnpackScalar<double>(m));
    return;
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "capture_depth_image":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_capture_depth_image().ContinueWith(t => rr_async_adapter.EndTask<com.robotraconteur.image.Image>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.image.Image rr_ret=this.obj.capture_depth_image();
    return MessageElementUtil.PackStructure("return",rr_ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(DepthCameraSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(DepthCameraSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(DepthCameraSensor)rrobj1;
    obj.depth_image_stream=new Pipe<com.robotraconteur.image.Image>(innerskel.GetPipe("depth_image_stream"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(DepthCameraSensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(DepthCameraSensor)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.DepthCameraSensor"; } }
}
public class RaySensor_skel : ServiceSkel {
    protected RaySensor obj;
    protected async_RaySensor async_obj;
    public RaySensor_skel(object o) : base(o)    {
    obj=(RaySensor)o;
    async_obj = o as async_RaySensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "type":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_type().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.type;
    return MessageElementUtil.PackString("return",ret);
    }
    case "parent_name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_parent_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.parent_name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "pose":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_pose().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.geometry.Pose>(t,async_ret => MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.geometry.Pose ret=obj.pose;
    return MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref ret);
    }
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_active().ContinueWith(t => async_adapter.EndTask<bool>(t,async_ret => MessageElementUtil.PackScalar<bool>("return",async_ret)));
    return null;
    }
    bool ret=obj.active;
    return MessageElementUtil.PackScalar<bool>("return",ret);
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_update_rate().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.update_rate;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "last_update_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_update_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_update_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "last_measurement_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_measurement_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_measurement_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_active((MessageElementUtil.UnpackScalar<bool>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.active=(MessageElementUtil.UnpackScalar<bool>(m));
    return;
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_update_rate((MessageElementUtil.UnpackScalar<double>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.update_rate=(MessageElementUtil.UnpackScalar<double>(m));
    return;
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "capture_scan":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_capture_scan().ContinueWith(t => rr_async_adapter.EndTask<com.robotraconteur.laserscan.LaserScan>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.laserscan.LaserScan rr_ret=this.obj.capture_scan();
    return MessageElementUtil.PackStructure("return",rr_ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(RaySensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(RaySensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(RaySensor)rrobj1;
    obj.scan_stream=new Pipe<com.robotraconteur.laserscan.LaserScan>(innerskel.GetPipe("scan_stream"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(RaySensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(RaySensor)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.RaySensor"; } }
}
public class ContactSensor_skel : ServiceSkel {
    protected ContactSensor obj;
    protected async_ContactSensor async_obj;
    public ContactSensor_skel(object o) : base(o)    {
    obj=(ContactSensor)o;
    async_obj = o as async_ContactSensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "type":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_type().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.type;
    return MessageElementUtil.PackString("return",ret);
    }
    case "parent_name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_parent_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.parent_name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "pose":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_pose().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.geometry.Pose>(t,async_ret => MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.geometry.Pose ret=obj.pose;
    return MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref ret);
    }
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_active().ContinueWith(t => async_adapter.EndTask<bool>(t,async_ret => MessageElementUtil.PackScalar<bool>("return",async_ret)));
    return null;
    }
    bool ret=obj.active;
    return MessageElementUtil.PackScalar<bool>("return",ret);
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_update_rate().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.update_rate;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "last_update_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_update_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_update_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "last_measurement_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_measurement_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_measurement_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_active((MessageElementUtil.UnpackScalar<bool>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.active=(MessageElementUtil.UnpackScalar<bool>(m));
    return;
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_update_rate((MessageElementUtil.UnpackScalar<double>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.update_rate=(MessageElementUtil.UnpackScalar<double>(m));
    return;
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ContactSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ContactSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(ContactSensor)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ContactSensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(ContactSensor)rrobj1;
    obj.contacts=new Wire<List<Contact>>(innerskel.GetWire("contacts"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.ContactSensor"; } }
}
public class AltimeterSensor_skel : ServiceSkel {
    protected AltimeterSensor obj;
    protected async_AltimeterSensor async_obj;
    public AltimeterSensor_skel(object o) : base(o)    {
    obj=(AltimeterSensor)o;
    async_obj = o as async_AltimeterSensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "type":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_type().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.type;
    return MessageElementUtil.PackString("return",ret);
    }
    case "parent_name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_parent_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.parent_name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "pose":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_pose().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.geometry.Pose>(t,async_ret => MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.geometry.Pose ret=obj.pose;
    return MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref ret);
    }
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_active().ContinueWith(t => async_adapter.EndTask<bool>(t,async_ret => MessageElementUtil.PackScalar<bool>("return",async_ret)));
    return null;
    }
    bool ret=obj.active;
    return MessageElementUtil.PackScalar<bool>("return",ret);
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_update_rate().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.update_rate;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "last_update_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_update_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_update_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "last_measurement_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_measurement_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_measurement_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_active((MessageElementUtil.UnpackScalar<bool>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.active=(MessageElementUtil.UnpackScalar<bool>(m));
    return;
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_update_rate((MessageElementUtil.UnpackScalar<double>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.update_rate=(MessageElementUtil.UnpackScalar<double>(m));
    return;
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(AltimeterSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(AltimeterSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(AltimeterSensor)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(AltimeterSensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(AltimeterSensor)rrobj1;
    obj.altitude=new Wire<double>(innerskel.GetWire("altitude"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.AltimeterSensor"; } }
}
public class SonarSensor_skel : ServiceSkel {
    protected SonarSensor obj;
    protected async_SonarSensor async_obj;
    public SonarSensor_skel(object o) : base(o)    {
    obj=(SonarSensor)o;
    async_obj = o as async_SonarSensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "type":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_type().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.type;
    return MessageElementUtil.PackString("return",ret);
    }
    case "parent_name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_parent_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.parent_name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "pose":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_pose().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.geometry.Pose>(t,async_ret => MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.geometry.Pose ret=obj.pose;
    return MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref ret);
    }
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_active().ContinueWith(t => async_adapter.EndTask<bool>(t,async_ret => MessageElementUtil.PackScalar<bool>("return",async_ret)));
    return null;
    }
    bool ret=obj.active;
    return MessageElementUtil.PackScalar<bool>("return",ret);
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_update_rate().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.update_rate;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "last_update_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_update_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_update_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "last_measurement_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_measurement_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_measurement_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "range_min":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_range_min().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.range_min;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "range_max":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_range_max().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.range_max;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "radius":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_radius().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.radius;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_active((MessageElementUtil.UnpackScalar<bool>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.active=(MessageElementUtil.UnpackScalar<bool>(m));
    return;
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_update_rate((MessageElementUtil.UnpackScalar<double>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.update_rate=(MessageElementUtil.UnpackScalar<double>(m));
    return;
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(SonarSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(SonarSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(SonarSensor)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(SonarSensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(SonarSensor)rrobj1;
    obj.range=new Wire<double>(innerskel.GetWire("range"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.SonarSensor"; } }
}
public class MagnetometerSensor_skel : ServiceSkel {
    protected MagnetometerSensor obj;
    protected async_MagnetometerSensor async_obj;
    public MagnetometerSensor_skel(object o) : base(o)    {
    obj=(MagnetometerSensor)o;
    async_obj = o as async_MagnetometerSensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "type":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_type().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.type;
    return MessageElementUtil.PackString("return",ret);
    }
    case "parent_name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_parent_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.parent_name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "pose":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_pose().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.geometry.Pose>(t,async_ret => MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.geometry.Pose ret=obj.pose;
    return MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref ret);
    }
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_active().ContinueWith(t => async_adapter.EndTask<bool>(t,async_ret => MessageElementUtil.PackScalar<bool>("return",async_ret)));
    return null;
    }
    bool ret=obj.active;
    return MessageElementUtil.PackScalar<bool>("return",ret);
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_update_rate().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.update_rate;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "last_update_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_update_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_update_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "last_measurement_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_measurement_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_measurement_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_active((MessageElementUtil.UnpackScalar<bool>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.active=(MessageElementUtil.UnpackScalar<bool>(m));
    return;
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_update_rate((MessageElementUtil.UnpackScalar<double>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.update_rate=(MessageElementUtil.UnpackScalar<double>(m));
    return;
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(MagnetometerSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(MagnetometerSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(MagnetometerSensor)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(MagnetometerSensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(MagnetometerSensor)rrobj1;
    obj.magnetic_field=new Wire<com.robotraconteur.geometry.Vector3>(innerskel.GetWire("magnetic_field"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.MagnetometerSensor"; } }
}
public class ForceTorqueSensor_skel : ServiceSkel {
    protected ForceTorqueSensor obj;
    protected async_ForceTorqueSensor async_obj;
    public ForceTorqueSensor_skel(object o) : base(o)    {
    obj=(ForceTorqueSensor)o;
    async_obj = o as async_ForceTorqueSensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "type":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_type().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.type;
    return MessageElementUtil.PackString("return",ret);
    }
    case "parent_name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_parent_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.parent_name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "pose":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_pose().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.geometry.Pose>(t,async_ret => MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.geometry.Pose ret=obj.pose;
    return MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref ret);
    }
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_active().ContinueWith(t => async_adapter.EndTask<bool>(t,async_ret => MessageElementUtil.PackScalar<bool>("return",async_ret)));
    return null;
    }
    bool ret=obj.active;
    return MessageElementUtil.PackScalar<bool>("return",ret);
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_update_rate().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.update_rate;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "last_update_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_update_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_update_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "last_measurement_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_measurement_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_measurement_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_active((MessageElementUtil.UnpackScalar<bool>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.active=(MessageElementUtil.UnpackScalar<bool>(m));
    return;
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_update_rate((MessageElementUtil.UnpackScalar<double>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.update_rate=(MessageElementUtil.UnpackScalar<double>(m));
    return;
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ForceTorqueSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ForceTorqueSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(ForceTorqueSensor)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ForceTorqueSensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(ForceTorqueSensor)rrobj1;
    obj.force_torque=new Wire<com.robotraconteur.geometry.Wrench>(innerskel.GetWire("force_torque"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.ForceTorqueSensor"; } }
}
public class GpsSensor_skel : ServiceSkel {
    protected GpsSensor obj;
    protected async_GpsSensor async_obj;
    public GpsSensor_skel(object o) : base(o)    {
    obj=(GpsSensor)o;
    async_obj = o as async_GpsSensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "type":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_type().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.type;
    return MessageElementUtil.PackString("return",ret);
    }
    case "parent_name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_parent_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.parent_name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "pose":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_pose().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.geometry.Pose>(t,async_ret => MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.geometry.Pose ret=obj.pose;
    return MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref ret);
    }
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_active().ContinueWith(t => async_adapter.EndTask<bool>(t,async_ret => MessageElementUtil.PackScalar<bool>("return",async_ret)));
    return null;
    }
    bool ret=obj.active;
    return MessageElementUtil.PackScalar<bool>("return",ret);
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_update_rate().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.update_rate;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "last_update_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_update_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_update_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "last_measurement_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_measurement_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_measurement_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_active((MessageElementUtil.UnpackScalar<bool>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.active=(MessageElementUtil.UnpackScalar<bool>(m));
    return;
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_update_rate((MessageElementUtil.UnpackScalar<double>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.update_rate=(MessageElementUtil.UnpackScalar<double>(m));
    return;
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(GpsSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(GpsSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(GpsSensor)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(GpsSensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(GpsSensor)rrobj1;
    obj.state=new Wire<com.robotraconteur.gps.GpsState>(innerskel.GetWire("state"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.GpsSensor"; } }
}
public class ImuSensor_skel : ServiceSkel {
    protected ImuSensor obj;
    protected async_ImuSensor async_obj;
    public ImuSensor_skel(object o) : base(o)    {
    obj=(ImuSensor)o;
    async_obj = o as async_ImuSensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "type":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_type().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.type;
    return MessageElementUtil.PackString("return",ret);
    }
    case "parent_name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_parent_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.parent_name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "pose":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_pose().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.geometry.Pose>(t,async_ret => MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.geometry.Pose ret=obj.pose;
    return MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref ret);
    }
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_active().ContinueWith(t => async_adapter.EndTask<bool>(t,async_ret => MessageElementUtil.PackScalar<bool>("return",async_ret)));
    return null;
    }
    bool ret=obj.active;
    return MessageElementUtil.PackScalar<bool>("return",ret);
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_update_rate().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.update_rate;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "last_update_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_update_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_update_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "last_measurement_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_measurement_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_measurement_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_active((MessageElementUtil.UnpackScalar<bool>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.active=(MessageElementUtil.UnpackScalar<bool>(m));
    return;
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_update_rate((MessageElementUtil.UnpackScalar<double>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.update_rate=(MessageElementUtil.UnpackScalar<double>(m));
    return;
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "setf_reference_pose":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_reference_pose().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_reference_pose();
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ImuSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ImuSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(ImuSensor)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ImuSensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(ImuSensor)rrobj1;
    obj.state=new Wire<com.robotraconteur.imu.ImuState>(innerskel.GetWire("state"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.ImuSensor"; } }
}
public class LogicalCameraSensor_skel : ServiceSkel {
    protected LogicalCameraSensor obj;
    protected async_LogicalCameraSensor async_obj;
    public LogicalCameraSensor_skel(object o) : base(o)    {
    obj=(LogicalCameraSensor)o;
    async_obj = o as async_LogicalCameraSensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "type":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_type().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.type;
    return MessageElementUtil.PackString("return",ret);
    }
    case "parent_name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_parent_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.parent_name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "pose":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_pose().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.geometry.Pose>(t,async_ret => MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.geometry.Pose ret=obj.pose;
    return MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref ret);
    }
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_active().ContinueWith(t => async_adapter.EndTask<bool>(t,async_ret => MessageElementUtil.PackScalar<bool>("return",async_ret)));
    return null;
    }
    bool ret=obj.active;
    return MessageElementUtil.PackScalar<bool>("return",ret);
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_update_rate().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.update_rate;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "last_update_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_update_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_update_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "last_measurement_time":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_last_measurement_time().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.datetime.Duration>(t,async_ret => MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.datetime.Duration ret=obj.last_measurement_time;
    return MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>("return",ref ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "active":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_active((MessageElementUtil.UnpackScalar<bool>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.active=(MessageElementUtil.UnpackScalar<bool>(m));
    return;
    }
    case "update_rate":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_update_rate((MessageElementUtil.UnpackScalar<double>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.update_rate=(MessageElementUtil.UnpackScalar<double>(m));
    return;
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "capture_image":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_capture_image().ContinueWith(t => rr_async_adapter.EndTask<com.robotraconteur.objectrecognition.RecognizedObjects>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.objectrecognition.RecognizedObjects rr_ret=this.obj.capture_image();
    return MessageElementUtil.PackStructure("return",rr_ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(LogicalCameraSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(LogicalCameraSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(LogicalCameraSensor)rrobj1;
    obj.image_stream=new Pipe<com.robotraconteur.objectrecognition.RecognizedObjects>(innerskel.GetPipe("image_stream"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(LogicalCameraSensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(LogicalCameraSensor)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.LogicalCameraSensor"; } }
}
public class Light_skel : ServiceSkel {
    protected Light obj;
    protected async_Light async_obj;
    public Light_skel(object o) : base(o)    {
    obj=(Light)o;
    async_obj = o as async_Light;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "name":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_name().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.name;
    return MessageElementUtil.PackString("return",ret);
    }
    case "type":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_type().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.type;
    return MessageElementUtil.PackString("return",ret);
    }
    case "pose":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_pose().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.geometry.Pose>(t,async_ret => MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.geometry.Pose ret=obj.pose;
    return MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("return",ref ret);
    }
    case "direction":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_direction().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.geometry.Vector3>(t,async_ret => MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Vector3>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.geometry.Vector3 ret=obj.direction;
    return MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Vector3>("return",ref ret);
    }
    case "diffuse_color":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_diffuse_color().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.color.ColorRGBAf>(t,async_ret => MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBAf>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.color.ColorRGBAf ret=obj.diffuse_color;
    return MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBAf>("return",ref ret);
    }
    case "specular_color":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_specular_color().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.color.ColorRGBAf>(t,async_ret => MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBAf>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.color.ColorRGBAf ret=obj.specular_color;
    return MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBAf>("return",ref ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "diffuse_color":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_diffuse_color(MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBAf>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.diffuse_color=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBAf>(m);
    return;
    }
    case "specular_color":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_specular_color(MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBAf>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.specular_color=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBAf>(m);
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Light)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Light)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Light)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Light)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Light)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "org.gazebosim.gazebo.Light"; } }
}
public class Base_default_impl : Base{
    public virtual string name {get; set;} = "";
    public virtual string scoped_name {get; set;} = "";
}
public class Server_default_impl : Server{
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual List<string> world_names {get; set;} = default(List<string>);
    public virtual List<string> sensor_names {get; set;} = default(List<string>);
    public virtual World get_worlds(string ind) {
    throw new NotImplementedException();
    }
    public virtual Sensor get_sensors(string ind) {
    throw new NotImplementedException();
    }
}
public class World_default_impl : World{
    protected WireBroadcaster<com.robotraconteur.datetime.Duration> rrvar_sim_time;
    protected WireBroadcaster<WorldTimes> rrvar_time;
    public virtual string name {get; set;} = "";
    public virtual List<string> model_names {get; set;} = default(List<string>);
    public virtual List<string> light_names {get; set;} = default(List<string>);
    public virtual void insert_model(string model_sdf, string model_name, com.robotraconteur.geometry.Pose model_pose) {
    throw new NotImplementedException();    }
    public virtual void remove_model(string model_name) {
    throw new NotImplementedException();    }
    public virtual Model get_models(string ind) {
    throw new NotImplementedException();
    }
    public virtual Light get_lights(string ind) {
    throw new NotImplementedException();
    }
    public virtual Wire<com.robotraconteur.datetime.Duration> sim_time {
    get { return rrvar_sim_time.Wire;  }
    set {
    if (rrvar_sim_time!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sim_time= new WireBroadcaster<com.robotraconteur.datetime.Duration>(value);
    }
    }
    public virtual Wire<WorldTimes> time {
    get { return rrvar_time.Wire;  }
    set {
    if (rrvar_time!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_time= new WireBroadcaster<WorldTimes>(value);
    }
    }
}
public class Entity_default_impl : Entity{
    protected WireBroadcaster<com.robotraconteur.geometry.Pose> rrvar_world_pose;
    protected WireBroadcaster<com.robotraconteur.geometry.Pose> rrvar_relative_pose;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity> rrvar_world_velocity;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity> rrvar_relative_velocity;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration> rrvar_world_acceleration;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration> rrvar_relative_acceleration;
    public virtual string name {get; set;} = "";
    public virtual string scoped_name {get; set;} = "";
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual void setf_world_pose(com.robotraconteur.geometry.Pose pose) {
    throw new NotImplementedException();    }
    public virtual void setf_relative_pose(com.robotraconteur.geometry.Pose pose) {
    throw new NotImplementedException();    }
    public virtual Wire<com.robotraconteur.geometry.Pose> world_pose {
    get { return rrvar_world_pose.Wire;  }
    set {
    if (rrvar_world_pose!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_world_pose= new WireBroadcaster<com.robotraconteur.geometry.Pose>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.Pose> relative_pose {
    get { return rrvar_relative_pose.Wire;  }
    set {
    if (rrvar_relative_pose!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_relative_pose= new WireBroadcaster<com.robotraconteur.geometry.Pose>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialVelocity> world_velocity {
    get { return rrvar_world_velocity.Wire;  }
    set {
    if (rrvar_world_velocity!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_world_velocity= new WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialVelocity> relative_velocity {
    get { return rrvar_relative_velocity.Wire;  }
    set {
    if (rrvar_relative_velocity!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_relative_velocity= new WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialAcceleration> world_acceleration {
    get { return rrvar_world_acceleration.Wire;  }
    set {
    if (rrvar_world_acceleration!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_world_acceleration= new WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialAcceleration> relative_acceleration {
    get { return rrvar_relative_acceleration.Wire;  }
    set {
    if (rrvar_relative_acceleration!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_relative_acceleration= new WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration>(value);
    }
    }
}
public class Model_default_impl : Model{
    protected WireBroadcaster<com.robotraconteur.geometry.Pose> rrvar_world_pose;
    protected WireBroadcaster<com.robotraconteur.geometry.Pose> rrvar_relative_pose;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity> rrvar_world_velocity;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity> rrvar_relative_velocity;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration> rrvar_world_acceleration;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration> rrvar_relative_acceleration;
    public virtual string name {get; set;} = "";
    public virtual string scoped_name {get; set;} = "";
    public virtual List<string> child_model_names {get; set;} = default(List<string>);
    public virtual List<string> link_names {get; set;} = default(List<string>);
    public virtual List<string> joint_names {get; set;} = default(List<string>);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual void setf_world_pose(com.robotraconteur.geometry.Pose pose) {
    throw new NotImplementedException();    }
    public virtual void setf_relative_pose(com.robotraconteur.geometry.Pose pose) {
    throw new NotImplementedException();    }
    public virtual void create_joint_controller() {
    throw new NotImplementedException();    }
    public virtual void destroy_joint_controller() {
    throw new NotImplementedException();    }
    public virtual void create_kinematic_joint_controller() {
    throw new NotImplementedException();    }
    public virtual void destroy_kinematic_joint_controller() {
    throw new NotImplementedException();    }
    public virtual Model get_child_models(string ind) {
    throw new NotImplementedException();
    }
    public virtual Link get_links(string ind) {
    throw new NotImplementedException();
    }
    public virtual Joint get_joints(string ind) {
    throw new NotImplementedException();
    }
    public virtual JointController get_joint_controller() {
    throw new NotImplementedException();
    }
    public virtual JointController get_kinematic_joint_controller() {
    throw new NotImplementedException();
    }
    public virtual Wire<com.robotraconteur.geometry.Pose> world_pose {
    get { return rrvar_world_pose.Wire;  }
    set {
    if (rrvar_world_pose!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_world_pose= new WireBroadcaster<com.robotraconteur.geometry.Pose>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.Pose> relative_pose {
    get { return rrvar_relative_pose.Wire;  }
    set {
    if (rrvar_relative_pose!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_relative_pose= new WireBroadcaster<com.robotraconteur.geometry.Pose>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialVelocity> world_velocity {
    get { return rrvar_world_velocity.Wire;  }
    set {
    if (rrvar_world_velocity!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_world_velocity= new WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialVelocity> relative_velocity {
    get { return rrvar_relative_velocity.Wire;  }
    set {
    if (rrvar_relative_velocity!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_relative_velocity= new WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialAcceleration> world_acceleration {
    get { return rrvar_world_acceleration.Wire;  }
    set {
    if (rrvar_world_acceleration!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_world_acceleration= new WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialAcceleration> relative_acceleration {
    get { return rrvar_relative_acceleration.Wire;  }
    set {
    if (rrvar_relative_acceleration!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_relative_acceleration= new WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration>(value);
    }
    }
}
public class Link_default_impl : Link{
    protected WireBroadcaster<com.robotraconteur.geometry.Pose> rrvar_world_pose;
    protected WireBroadcaster<com.robotraconteur.geometry.Pose> rrvar_relative_pose;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity> rrvar_world_velocity;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity> rrvar_relative_velocity;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration> rrvar_world_acceleration;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration> rrvar_relative_acceleration;
    protected WireUnicastReceiver<List<com.robotraconteur.geometry.Wrench>> rrvar_applied_wrenches;
    public virtual string name {get; set;} = "";
    public virtual string scoped_name {get; set;} = "";
    public virtual List<string> sensor_names {get; set;} = default(List<string>);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual void setf_world_pose(com.robotraconteur.geometry.Pose pose) {
    throw new NotImplementedException();    }
    public virtual void setf_relative_pose(com.robotraconteur.geometry.Pose pose) {
    throw new NotImplementedException();    }
    public virtual void attach_link(string model, string link_name) {
    throw new NotImplementedException();    }
    public virtual void attach_link_with_pose(string model_name, string link_name, com.robotraconteur.geometry.Pose pose) {
    throw new NotImplementedException();    }
    public virtual void detach_link(string model_name, string link_name) {
    throw new NotImplementedException();    }
    public virtual Wire<com.robotraconteur.geometry.Pose> world_pose {
    get { return rrvar_world_pose.Wire;  }
    set {
    if (rrvar_world_pose!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_world_pose= new WireBroadcaster<com.robotraconteur.geometry.Pose>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.Pose> relative_pose {
    get { return rrvar_relative_pose.Wire;  }
    set {
    if (rrvar_relative_pose!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_relative_pose= new WireBroadcaster<com.robotraconteur.geometry.Pose>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialVelocity> world_velocity {
    get { return rrvar_world_velocity.Wire;  }
    set {
    if (rrvar_world_velocity!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_world_velocity= new WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialVelocity> relative_velocity {
    get { return rrvar_relative_velocity.Wire;  }
    set {
    if (rrvar_relative_velocity!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_relative_velocity= new WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialAcceleration> world_acceleration {
    get { return rrvar_world_acceleration.Wire;  }
    set {
    if (rrvar_world_acceleration!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_world_acceleration= new WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialAcceleration> relative_acceleration {
    get { return rrvar_relative_acceleration.Wire;  }
    set {
    if (rrvar_relative_acceleration!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_relative_acceleration= new WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration>(value);
    }
    }
    public virtual Wire<List<com.robotraconteur.geometry.Wrench>> applied_wrenches {
    get { return rrvar_applied_wrenches.Wire;  }
    set {
    if (rrvar_applied_wrenches!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_applied_wrenches= new WireUnicastReceiver<List<com.robotraconteur.geometry.Wrench>>(value);
    }
    }
}
public class Joint_default_impl : Joint{
    protected WireBroadcaster<double[]> rrvar_axes_position;
    protected WireBroadcaster<double[]> rrvar_axes_velocity;
    protected WireBroadcaster<double[]> rrvar_axes_force;
    protected WireBroadcaster<JointWrench> rrvar_force_torque;
    protected WireUnicastReceiver<double[]> rrvar_apply_axes_force;
    public virtual string name {get; set;} = "";
    public virtual string scoped_name {get; set;} = "";
    public virtual string parent_link_name {get; set;} = "";
    public virtual string child_link_name {get; set;} = "";
    public virtual uint dof {get; set;} = default(uint);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual com.robotraconteur.geometry.Vector3[] getf_global_axes() {
    throw new NotImplementedException();    }
    public virtual com.robotraconteur.geometry.Vector3[] getf_local_axes() {
    throw new NotImplementedException();    }
    public virtual void setf_axis_position(uint axis, double position) {
    throw new NotImplementedException();    }
    public virtual void setf_axis_velocity(uint axis, double vel) {
    throw new NotImplementedException();    }
    public virtual Wire<double[]> axes_position {
    get { return rrvar_axes_position.Wire;  }
    set {
    if (rrvar_axes_position!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_axes_position= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<double[]> axes_velocity {
    get { return rrvar_axes_velocity.Wire;  }
    set {
    if (rrvar_axes_velocity!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_axes_velocity= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<double[]> axes_force {
    get { return rrvar_axes_force.Wire;  }
    set {
    if (rrvar_axes_force!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_axes_force= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<JointWrench> force_torque {
    get { return rrvar_force_torque.Wire;  }
    set {
    if (rrvar_force_torque!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_force_torque= new WireBroadcaster<JointWrench>(value);
    }
    }
    public virtual Wire<double[]> apply_axes_force {
    get { return rrvar_apply_axes_force.Wire;  }
    set {
    if (rrvar_apply_axes_force!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_apply_axes_force= new WireUnicastReceiver<double[]>(value);
    }
    }
}
public class JointController_default_impl : JointController{
    protected WireBroadcaster<Dictionary<string,double>> rrvar_joint_position;
    protected WireBroadcaster<Dictionary<string,double>> rrvar_joint_velocity;
    protected WireUnicastReceiver<Dictionary<string,double>> rrvar_joint_position_command;
    protected WireUnicastReceiver<Dictionary<string,double>> rrvar_joint_velocity_command;
    protected WireBroadcaster<Dictionary<string,double>> rrvar_joint_forces;
    public virtual List<string> joint_names {get; set;} = default(List<string>);
    public virtual Dictionary<string,com.robotraconteur.pid.PIDParam> position_pid {get; set;} = default(Dictionary<string,com.robotraconteur.pid.PIDParam>);
    public virtual Dictionary<string,com.robotraconteur.pid.PIDParam> velocity_pid {get; set;} = default(Dictionary<string,com.robotraconteur.pid.PIDParam>);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual void add_joint(string name) {
    throw new NotImplementedException();    }
    public virtual void setf_position_pid(string name, com.robotraconteur.pid.PIDParam pid) {
    throw new NotImplementedException();    }
    public virtual void setf_velocity_pid(string name, com.robotraconteur.pid.PIDParam pid) {
    throw new NotImplementedException();    }
    public virtual Wire<Dictionary<string,double>> joint_position {
    get { return rrvar_joint_position.Wire;  }
    set {
    if (rrvar_joint_position!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_joint_position= new WireBroadcaster<Dictionary<string,double>>(value);
    }
    }
    public virtual Wire<Dictionary<string,double>> joint_velocity {
    get { return rrvar_joint_velocity.Wire;  }
    set {
    if (rrvar_joint_velocity!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_joint_velocity= new WireBroadcaster<Dictionary<string,double>>(value);
    }
    }
    public virtual Wire<Dictionary<string,double>> joint_position_command {
    get { return rrvar_joint_position_command.Wire;  }
    set {
    if (rrvar_joint_position_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_joint_position_command= new WireUnicastReceiver<Dictionary<string,double>>(value);
    }
    }
    public virtual Wire<Dictionary<string,double>> joint_velocity_command {
    get { return rrvar_joint_velocity_command.Wire;  }
    set {
    if (rrvar_joint_velocity_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_joint_velocity_command= new WireUnicastReceiver<Dictionary<string,double>>(value);
    }
    }
    public virtual Wire<Dictionary<string,double>> joint_forces {
    get { return rrvar_joint_forces.Wire;  }
    set {
    if (rrvar_joint_forces!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_joint_forces= new WireBroadcaster<Dictionary<string,double>>(value);
    }
    }
}
public class Sensor_default_impl : Sensor{
    public virtual string name {get; set;} = "";
    public virtual string type {get; set;} = "";
    public virtual string parent_name {get; set;} = "";
    public virtual com.robotraconteur.geometry.Pose pose {get; set;} = default(com.robotraconteur.geometry.Pose);
    public virtual bool active {get; set;} = default(bool);
    public virtual double update_rate {get; set;} = default(double);
    public virtual com.robotraconteur.datetime.Duration last_update_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.datetime.Duration last_measurement_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
}
public class CameraSensor_default_impl : CameraSensor{
    protected PipeBroadcaster<com.robotraconteur.image.Image> rrvar_image_stream;
    public virtual string name {get; set;} = "";
    public virtual string type {get; set;} = "";
    public virtual string parent_name {get; set;} = "";
    public virtual com.robotraconteur.geometry.Pose pose {get; set;} = default(com.robotraconteur.geometry.Pose);
    public virtual bool active {get; set;} = default(bool);
    public virtual double update_rate {get; set;} = default(double);
    public virtual com.robotraconteur.datetime.Duration last_update_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.datetime.Duration last_measurement_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual com.robotraconteur.image.Image capture_image() {
    throw new NotImplementedException();    }
    public virtual Pipe<com.robotraconteur.image.Image> image_stream {
    get { return rrvar_image_stream.Pipe;  }
    set {
    if (rrvar_image_stream!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_image_stream= new PipeBroadcaster<com.robotraconteur.image.Image>(value);
    }
    }
}
public class MultiCameraSensor_default_impl : MultiCameraSensor{
    protected PipeBroadcaster<Dictionary<int,com.robotraconteur.image.Image>> rrvar_image_stream;
    public virtual string name {get; set;} = "";
    public virtual string type {get; set;} = "";
    public virtual string parent_name {get; set;} = "";
    public virtual com.robotraconteur.geometry.Pose pose {get; set;} = default(com.robotraconteur.geometry.Pose);
    public virtual bool active {get; set;} = default(bool);
    public virtual double update_rate {get; set;} = default(double);
    public virtual com.robotraconteur.datetime.Duration last_update_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.datetime.Duration last_measurement_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual int camera_count {get; set;} = default(int);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual com.robotraconteur.image.Image capture_image(int ind) {
    throw new NotImplementedException();    }
    public virtual Pipe<Dictionary<int,com.robotraconteur.image.Image>> image_stream {
    get { return rrvar_image_stream.Pipe;  }
    set {
    if (rrvar_image_stream!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_image_stream= new PipeBroadcaster<Dictionary<int,com.robotraconteur.image.Image>>(value);
    }
    }
}
public class DepthCameraSensor_default_impl : DepthCameraSensor{
    protected PipeBroadcaster<com.robotraconteur.image.Image> rrvar_depth_image_stream;
    public virtual string name {get; set;} = "";
    public virtual string type {get; set;} = "";
    public virtual string parent_name {get; set;} = "";
    public virtual com.robotraconteur.geometry.Pose pose {get; set;} = default(com.robotraconteur.geometry.Pose);
    public virtual bool active {get; set;} = default(bool);
    public virtual double update_rate {get; set;} = default(double);
    public virtual com.robotraconteur.datetime.Duration last_update_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.datetime.Duration last_measurement_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual com.robotraconteur.image.Image capture_depth_image() {
    throw new NotImplementedException();    }
    public virtual Pipe<com.robotraconteur.image.Image> depth_image_stream {
    get { return rrvar_depth_image_stream.Pipe;  }
    set {
    if (rrvar_depth_image_stream!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_depth_image_stream= new PipeBroadcaster<com.robotraconteur.image.Image>(value);
    }
    }
}
public class RaySensor_default_impl : RaySensor{
    protected PipeBroadcaster<com.robotraconteur.laserscan.LaserScan> rrvar_scan_stream;
    public virtual string name {get; set;} = "";
    public virtual string type {get; set;} = "";
    public virtual string parent_name {get; set;} = "";
    public virtual com.robotraconteur.geometry.Pose pose {get; set;} = default(com.robotraconteur.geometry.Pose);
    public virtual bool active {get; set;} = default(bool);
    public virtual double update_rate {get; set;} = default(double);
    public virtual com.robotraconteur.datetime.Duration last_update_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.datetime.Duration last_measurement_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual com.robotraconteur.laserscan.LaserScan capture_scan() {
    throw new NotImplementedException();    }
    public virtual Pipe<com.robotraconteur.laserscan.LaserScan> scan_stream {
    get { return rrvar_scan_stream.Pipe;  }
    set {
    if (rrvar_scan_stream!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_scan_stream= new PipeBroadcaster<com.robotraconteur.laserscan.LaserScan>(value);
    }
    }
}
public class ContactSensor_default_impl : ContactSensor{
    protected WireBroadcaster<List<Contact>> rrvar_contacts;
    public virtual string name {get; set;} = "";
    public virtual string type {get; set;} = "";
    public virtual string parent_name {get; set;} = "";
    public virtual com.robotraconteur.geometry.Pose pose {get; set;} = default(com.robotraconteur.geometry.Pose);
    public virtual bool active {get; set;} = default(bool);
    public virtual double update_rate {get; set;} = default(double);
    public virtual com.robotraconteur.datetime.Duration last_update_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.datetime.Duration last_measurement_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual Wire<List<Contact>> contacts {
    get { return rrvar_contacts.Wire;  }
    set {
    if (rrvar_contacts!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_contacts= new WireBroadcaster<List<Contact>>(value);
    }
    }
}
public class AltimeterSensor_default_impl : AltimeterSensor{
    protected WireBroadcaster<double> rrvar_altitude;
    public virtual string name {get; set;} = "";
    public virtual string type {get; set;} = "";
    public virtual string parent_name {get; set;} = "";
    public virtual com.robotraconteur.geometry.Pose pose {get; set;} = default(com.robotraconteur.geometry.Pose);
    public virtual bool active {get; set;} = default(bool);
    public virtual double update_rate {get; set;} = default(double);
    public virtual com.robotraconteur.datetime.Duration last_update_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.datetime.Duration last_measurement_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual Wire<double> altitude {
    get { return rrvar_altitude.Wire;  }
    set {
    if (rrvar_altitude!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_altitude= new WireBroadcaster<double>(value);
    }
    }
}
public class SonarSensor_default_impl : SonarSensor{
    protected WireBroadcaster<double> rrvar_range;
    public virtual string name {get; set;} = "";
    public virtual string type {get; set;} = "";
    public virtual string parent_name {get; set;} = "";
    public virtual com.robotraconteur.geometry.Pose pose {get; set;} = default(com.robotraconteur.geometry.Pose);
    public virtual bool active {get; set;} = default(bool);
    public virtual double update_rate {get; set;} = default(double);
    public virtual com.robotraconteur.datetime.Duration last_update_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.datetime.Duration last_measurement_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual double range_min {get; set;} = default(double);
    public virtual double range_max {get; set;} = default(double);
    public virtual double radius {get; set;} = default(double);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual Wire<double> range {
    get { return rrvar_range.Wire;  }
    set {
    if (rrvar_range!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_range= new WireBroadcaster<double>(value);
    }
    }
}
public class MagnetometerSensor_default_impl : MagnetometerSensor{
    protected WireBroadcaster<com.robotraconteur.geometry.Vector3> rrvar_magnetic_field;
    public virtual string name {get; set;} = "";
    public virtual string type {get; set;} = "";
    public virtual string parent_name {get; set;} = "";
    public virtual com.robotraconteur.geometry.Pose pose {get; set;} = default(com.robotraconteur.geometry.Pose);
    public virtual bool active {get; set;} = default(bool);
    public virtual double update_rate {get; set;} = default(double);
    public virtual com.robotraconteur.datetime.Duration last_update_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.datetime.Duration last_measurement_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual Wire<com.robotraconteur.geometry.Vector3> magnetic_field {
    get { return rrvar_magnetic_field.Wire;  }
    set {
    if (rrvar_magnetic_field!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_magnetic_field= new WireBroadcaster<com.robotraconteur.geometry.Vector3>(value);
    }
    }
}
public class ForceTorqueSensor_default_impl : ForceTorqueSensor{
    protected WireBroadcaster<com.robotraconteur.geometry.Wrench> rrvar_force_torque;
    public virtual string name {get; set;} = "";
    public virtual string type {get; set;} = "";
    public virtual string parent_name {get; set;} = "";
    public virtual com.robotraconteur.geometry.Pose pose {get; set;} = default(com.robotraconteur.geometry.Pose);
    public virtual bool active {get; set;} = default(bool);
    public virtual double update_rate {get; set;} = default(double);
    public virtual com.robotraconteur.datetime.Duration last_update_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.datetime.Duration last_measurement_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual Wire<com.robotraconteur.geometry.Wrench> force_torque {
    get { return rrvar_force_torque.Wire;  }
    set {
    if (rrvar_force_torque!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_force_torque= new WireBroadcaster<com.robotraconteur.geometry.Wrench>(value);
    }
    }
}
public class GpsSensor_default_impl : GpsSensor{
    protected WireBroadcaster<com.robotraconteur.gps.GpsState> rrvar_state;
    public virtual string name {get; set;} = "";
    public virtual string type {get; set;} = "";
    public virtual string parent_name {get; set;} = "";
    public virtual com.robotraconteur.geometry.Pose pose {get; set;} = default(com.robotraconteur.geometry.Pose);
    public virtual bool active {get; set;} = default(bool);
    public virtual double update_rate {get; set;} = default(double);
    public virtual com.robotraconteur.datetime.Duration last_update_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.datetime.Duration last_measurement_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual Wire<com.robotraconteur.gps.GpsState> state {
    get { return rrvar_state.Wire;  }
    set {
    if (rrvar_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_state= new WireBroadcaster<com.robotraconteur.gps.GpsState>(value);
    }
    }
}
public class ImuSensor_default_impl : ImuSensor{
    protected WireBroadcaster<com.robotraconteur.imu.ImuState> rrvar_state;
    public virtual string name {get; set;} = "";
    public virtual string type {get; set;} = "";
    public virtual string parent_name {get; set;} = "";
    public virtual com.robotraconteur.geometry.Pose pose {get; set;} = default(com.robotraconteur.geometry.Pose);
    public virtual bool active {get; set;} = default(bool);
    public virtual double update_rate {get; set;} = default(double);
    public virtual com.robotraconteur.datetime.Duration last_update_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.datetime.Duration last_measurement_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual void setf_reference_pose() {
    throw new NotImplementedException();    }
    public virtual Wire<com.robotraconteur.imu.ImuState> state {
    get { return rrvar_state.Wire;  }
    set {
    if (rrvar_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_state= new WireBroadcaster<com.robotraconteur.imu.ImuState>(value);
    }
    }
}
public class LogicalCameraSensor_default_impl : LogicalCameraSensor{
    protected PipeBroadcaster<com.robotraconteur.objectrecognition.RecognizedObjects> rrvar_image_stream;
    public virtual string name {get; set;} = "";
    public virtual string type {get; set;} = "";
    public virtual string parent_name {get; set;} = "";
    public virtual com.robotraconteur.geometry.Pose pose {get; set;} = default(com.robotraconteur.geometry.Pose);
    public virtual bool active {get; set;} = default(bool);
    public virtual double update_rate {get; set;} = default(double);
    public virtual com.robotraconteur.datetime.Duration last_update_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.datetime.Duration last_measurement_time {get; set;} = default(com.robotraconteur.datetime.Duration);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual com.robotraconteur.objectrecognition.RecognizedObjects capture_image() {
    throw new NotImplementedException();    }
    public virtual Pipe<com.robotraconteur.objectrecognition.RecognizedObjects> image_stream {
    get { return rrvar_image_stream.Pipe;  }
    set {
    if (rrvar_image_stream!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_image_stream= new PipeBroadcaster<com.robotraconteur.objectrecognition.RecognizedObjects>(value);
    }
    }
}
public class Light_default_impl : Light{
    public virtual string name {get; set;} = "";
    public virtual string type {get; set;} = "";
    public virtual com.robotraconteur.geometry.Pose pose {get; set;} = default(com.robotraconteur.geometry.Pose);
    public virtual com.robotraconteur.geometry.Vector3 direction {get; set;} = default(com.robotraconteur.geometry.Vector3);
    public virtual com.robotraconteur.color.ColorRGBAf diffuse_color {get; set;} = default(com.robotraconteur.color.ColorRGBAf);
    public virtual com.robotraconteur.color.ColorRGBAf specular_color {get; set;} = default(com.robotraconteur.color.ColorRGBAf);
}
public static class RRExtensions{
    public static double[] GetNumericArray(this JointWrench[] s)
    {
    var a=new ArraySegment<double>(new double[12 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this JointWrench[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 12 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 12*i,12);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this JointWrench[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 12 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 12*i,12);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}
