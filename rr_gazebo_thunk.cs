//This file is automatically generated. DO NOT EDIT!
using System;
using RobotRaconteurWeb;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 0108


namespace experimental.gazebo
{
[RobotRaconteurServiceStruct("experimental.gazebo.Contact")]
public class Contact
{
    public string contact_name1;
    public string contact_name2;
}

[RobotRaconteurServiceStruct("experimental.gazebo.WorldTimes")]
public class WorldTimes
{
    public com.robotraconteur.datetime.Duration sim_time;
    public com.robotraconteur.datetime.Duration real_time;
    public com.robotraconteur.datetime.DateTimeUTC wall_time;
    public com.robotraconteur.datetime.DateTimeUTC start_time;
}

[RobotRaconteurNamedArrayElementTypeAndCount("experimental.gazebo.JointWrench",typeof(double), 12)]
public struct JointWrench
{
    public com.robotraconteur.geometry.Wrench body1_wrench;
    public com.robotraconteur.geometry.Wrench body2_wrench;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[12]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 12) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 6);
    this.body1_wrench.GetNumericArray(ref a0);
    var a6 = new ArraySegment<double>(a.Array, a.Offset + 6, 6);
    this.body2_wrench.GetNumericArray(ref a6);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 12) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 6);
    this.body1_wrench.AssignFromNumericArray(ref a0);
    var a6 = new ArraySegment<double>(a.Array, a.Offset + 6, 6);
    this.body2_wrench.AssignFromNumericArray(ref a6);
    }
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.Base")]
public interface Base
{
    Task<string> get_name(CancellationToken cancel=default(CancellationToken));
    Task set_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_scoped_name(CancellationToken cancel=default(CancellationToken));
    Task set_scoped_name(string value, CancellationToken cancel=default(CancellationToken));
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.Server")]
public interface Server
{
    Task<List<string>> get_world_names(CancellationToken cancel=default(CancellationToken));
    Task set_world_names(List<string> value, CancellationToken cancel=default(CancellationToken));
    Task<List<string>> get_sensor_names(CancellationToken cancel=default(CancellationToken));
    Task set_sensor_names(List<string> value, CancellationToken cancel=default(CancellationToken));
    Task<World> get_worlds(string ind, CancellationToken rr_cancel=default(CancellationToken));
    Task<Sensor> get_sensors(string ind, CancellationToken rr_cancel=default(CancellationToken));
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.World")]
public interface World
{
    Task<string> get_name(CancellationToken cancel=default(CancellationToken));
    Task set_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<List<string>> get_model_names(CancellationToken cancel=default(CancellationToken));
    Task set_model_names(List<string> value, CancellationToken cancel=default(CancellationToken));
    Task<List<string>> get_light_names(CancellationToken cancel=default(CancellationToken));
    Task set_light_names(List<string> value, CancellationToken cancel=default(CancellationToken));
    Task insert_model(string model_sdf, string model_name, com.robotraconteur.geometry.Pose model_pose,CancellationToken rr_cancel=default(CancellationToken));
    Task remove_model(string model_name,CancellationToken rr_cancel=default(CancellationToken));
    Task<Model> get_models(string ind, CancellationToken rr_cancel=default(CancellationToken));
    Task<Light> get_lights(string ind, CancellationToken rr_cancel=default(CancellationToken));
    Wire<com.robotraconteur.datetime.Duration> sim_time { get; set; }
    Wire<WorldTimes> time { get; set; }
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.Entity")]
public interface Entity : Base
{
    Task<string> get_name(CancellationToken cancel=default(CancellationToken));
    Task set_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_scoped_name(CancellationToken cancel=default(CancellationToken));
    Task set_scoped_name(string value, CancellationToken cancel=default(CancellationToken));
    Task setf_world_pose(com.robotraconteur.geometry.Pose pose,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_relative_pose(com.robotraconteur.geometry.Pose pose,CancellationToken rr_cancel=default(CancellationToken));
    Wire<com.robotraconteur.geometry.Pose> world_pose { get; set; }
    Wire<com.robotraconteur.geometry.Pose> relative_pose { get; set; }
    Wire<com.robotraconteur.geometry.SpatialVelocity> world_velocity { get; set; }
    Wire<com.robotraconteur.geometry.SpatialVelocity> relative_velocity { get; set; }
    Wire<com.robotraconteur.geometry.SpatialAcceleration> world_acceleration { get; set; }
    Wire<com.robotraconteur.geometry.SpatialAcceleration> relative_acceleration { get; set; }
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.Model")]
public interface Model : Entity, Base
{
    Task<string> get_name(CancellationToken cancel=default(CancellationToken));
    Task set_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_scoped_name(CancellationToken cancel=default(CancellationToken));
    Task set_scoped_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<List<string>> get_child_model_names(CancellationToken cancel=default(CancellationToken));
    Task set_child_model_names(List<string> value, CancellationToken cancel=default(CancellationToken));
    Task<List<string>> get_link_names(CancellationToken cancel=default(CancellationToken));
    Task set_link_names(List<string> value, CancellationToken cancel=default(CancellationToken));
    Task<List<string>> get_joint_names(CancellationToken cancel=default(CancellationToken));
    Task set_joint_names(List<string> value, CancellationToken cancel=default(CancellationToken));
    Task setf_world_pose(com.robotraconteur.geometry.Pose pose,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_relative_pose(com.robotraconteur.geometry.Pose pose,CancellationToken rr_cancel=default(CancellationToken));
    Task create_joint_controller(CancellationToken rr_cancel=default(CancellationToken));
    Task destroy_joint_controller(CancellationToken rr_cancel=default(CancellationToken));
    Task create_kinematic_joint_controller(CancellationToken rr_cancel=default(CancellationToken));
    Task destroy_kinematic_joint_controller(CancellationToken rr_cancel=default(CancellationToken));
    Task<Model> get_child_models(string ind, CancellationToken rr_cancel=default(CancellationToken));
    Task<Link> get_links(string ind, CancellationToken rr_cancel=default(CancellationToken));
    Task<Joint> get_joints(string ind, CancellationToken rr_cancel=default(CancellationToken));
    Task<JointController> get_joint_controller(CancellationToken rr_cancel=default(CancellationToken));
    Task<JointController> get_kinematic_joint_controller(CancellationToken rr_cancel=default(CancellationToken));
    Wire<com.robotraconteur.geometry.Pose> world_pose { get; set; }
    Wire<com.robotraconteur.geometry.Pose> relative_pose { get; set; }
    Wire<com.robotraconteur.geometry.SpatialVelocity> world_velocity { get; set; }
    Wire<com.robotraconteur.geometry.SpatialVelocity> relative_velocity { get; set; }
    Wire<com.robotraconteur.geometry.SpatialAcceleration> world_acceleration { get; set; }
    Wire<com.robotraconteur.geometry.SpatialAcceleration> relative_acceleration { get; set; }
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.Link")]
public interface Link : Entity, Base
{
    Task<string> get_name(CancellationToken cancel=default(CancellationToken));
    Task set_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_scoped_name(CancellationToken cancel=default(CancellationToken));
    Task set_scoped_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<List<string>> get_sensor_names(CancellationToken cancel=default(CancellationToken));
    Task set_sensor_names(List<string> value, CancellationToken cancel=default(CancellationToken));
    Task setf_world_pose(com.robotraconteur.geometry.Pose pose,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_relative_pose(com.robotraconteur.geometry.Pose pose,CancellationToken rr_cancel=default(CancellationToken));
    Wire<com.robotraconteur.geometry.Pose> world_pose { get; set; }
    Wire<com.robotraconteur.geometry.Pose> relative_pose { get; set; }
    Wire<com.robotraconteur.geometry.SpatialVelocity> world_velocity { get; set; }
    Wire<com.robotraconteur.geometry.SpatialVelocity> relative_velocity { get; set; }
    Wire<com.robotraconteur.geometry.SpatialAcceleration> world_acceleration { get; set; }
    Wire<com.robotraconteur.geometry.SpatialAcceleration> relative_acceleration { get; set; }
    Wire<List<com.robotraconteur.geometry.Wrench>> applied_wrenches { get; set; }
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.Joint")]
public interface Joint : Base
{
    Task<string> get_name(CancellationToken cancel=default(CancellationToken));
    Task set_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_scoped_name(CancellationToken cancel=default(CancellationToken));
    Task set_scoped_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_parent_link_name(CancellationToken cancel=default(CancellationToken));
    Task set_parent_link_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_child_link_name(CancellationToken cancel=default(CancellationToken));
    Task set_child_link_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<uint> get_dof(CancellationToken cancel=default(CancellationToken));
    Task set_dof(uint value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.geometry.Vector3[]> getf_global_axes(CancellationToken rr_cancel=default(CancellationToken));
    Task<com.robotraconteur.geometry.Vector3[]> getf_local_axes(CancellationToken rr_cancel=default(CancellationToken));
    Task setf_axis_position(uint axis, double position,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_axis_velocity(uint axis, double vel,CancellationToken rr_cancel=default(CancellationToken));
    Wire<double[]> axes_position { get; set; }
    Wire<double[]> axes_velocity { get; set; }
    Wire<double[]> axes_force { get; set; }
    Wire<JointWrench> force_torque { get; set; }
    Wire<double[]> apply_axes_force { get; set; }
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.JointController")]
public interface JointController
{
    Task<List<string>> get_joint_names(CancellationToken cancel=default(CancellationToken));
    Task set_joint_names(List<string> value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<string,com.robotraconteur.pid.PIDParam>> get_position_pid(CancellationToken cancel=default(CancellationToken));
    Task set_position_pid(Dictionary<string,com.robotraconteur.pid.PIDParam> value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<string,com.robotraconteur.pid.PIDParam>> get_velocity_pid(CancellationToken cancel=default(CancellationToken));
    Task set_velocity_pid(Dictionary<string,com.robotraconteur.pid.PIDParam> value, CancellationToken cancel=default(CancellationToken));
    Task add_joint(string name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_position_pid(string name, com.robotraconteur.pid.PIDParam pid,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_velocity_pid(string name, com.robotraconteur.pid.PIDParam pid,CancellationToken rr_cancel=default(CancellationToken));
    Wire<Dictionary<string,double>> joint_position { get; set; }
    Wire<Dictionary<string,double>> joint_velocity { get; set; }
    Wire<Dictionary<string,double>> joint_position_command { get; set; }
    Wire<Dictionary<string,double>> joint_velocity_command { get; set; }
    Wire<Dictionary<string,double>> joint_forces { get; set; }
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.Sensor")]
public interface Sensor
{
    Task<string> get_name(CancellationToken cancel=default(CancellationToken));
    Task set_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_type(CancellationToken cancel=default(CancellationToken));
    Task set_type(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken));
    Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken));
    Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken));
    Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.CameraSensor")]
public interface CameraSensor : Sensor
{
    Task<string> get_name(CancellationToken cancel=default(CancellationToken));
    Task set_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_type(CancellationToken cancel=default(CancellationToken));
    Task set_type(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken));
    Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken));
    Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken));
    Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.image.Image> capture_image(CancellationToken rr_cancel=default(CancellationToken));
    Pipe<com.robotraconteur.image.Image> image_stream{ get; set; }
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.MultiCameraSensor")]
public interface MultiCameraSensor : Sensor
{
    Task<string> get_name(CancellationToken cancel=default(CancellationToken));
    Task set_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_type(CancellationToken cancel=default(CancellationToken));
    Task set_type(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken));
    Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken));
    Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken));
    Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Task<int> get_camera_count(CancellationToken cancel=default(CancellationToken));
    Task set_camera_count(int value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.image.Image> capture_image(int ind,CancellationToken rr_cancel=default(CancellationToken));
    Pipe<Dictionary<int,com.robotraconteur.image.Image>> image_stream{ get; set; }
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.DepthCameraSensor")]
public interface DepthCameraSensor : Sensor
{
    Task<string> get_name(CancellationToken cancel=default(CancellationToken));
    Task set_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_type(CancellationToken cancel=default(CancellationToken));
    Task set_type(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken));
    Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken));
    Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken));
    Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.image.DepthImage> capture_image(CancellationToken rr_cancel=default(CancellationToken));
    Pipe<com.robotraconteur.image.DepthImage> image_stream{ get; set; }
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.RaySensor")]
public interface RaySensor : Sensor
{
    Task<string> get_name(CancellationToken cancel=default(CancellationToken));
    Task set_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_type(CancellationToken cancel=default(CancellationToken));
    Task set_type(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken));
    Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken));
    Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken));
    Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.laserscan.LaserScan> capture_scan(CancellationToken rr_cancel=default(CancellationToken));
    Pipe<com.robotraconteur.laserscan.LaserScan> scan_stream{ get; set; }
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.ContactSensor")]
public interface ContactSensor : Sensor
{
    Task<string> get_name(CancellationToken cancel=default(CancellationToken));
    Task set_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_type(CancellationToken cancel=default(CancellationToken));
    Task set_type(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken));
    Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken));
    Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken));
    Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Wire<List<Contact>> contacts { get; set; }
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.AltimeterSensor")]
public interface AltimeterSensor : Sensor
{
    Task<string> get_name(CancellationToken cancel=default(CancellationToken));
    Task set_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_type(CancellationToken cancel=default(CancellationToken));
    Task set_type(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken));
    Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken));
    Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken));
    Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Wire<double> altitude { get; set; }
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.SonarSensor")]
public interface SonarSensor : Sensor
{
    Task<string> get_name(CancellationToken cancel=default(CancellationToken));
    Task set_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_type(CancellationToken cancel=default(CancellationToken));
    Task set_type(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken));
    Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken));
    Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken));
    Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_range_min(CancellationToken cancel=default(CancellationToken));
    Task set_range_min(double value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_range_max(CancellationToken cancel=default(CancellationToken));
    Task set_range_max(double value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_radius(CancellationToken cancel=default(CancellationToken));
    Task set_radius(double value, CancellationToken cancel=default(CancellationToken));
    Wire<double> range { get; set; }
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.MagnetometerSensor")]
public interface MagnetometerSensor : Sensor
{
    Task<string> get_name(CancellationToken cancel=default(CancellationToken));
    Task set_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_type(CancellationToken cancel=default(CancellationToken));
    Task set_type(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken));
    Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken));
    Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken));
    Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Wire<com.robotraconteur.geometry.Vector3> magnetic_field { get; set; }
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.ForceTorqueSensor")]
public interface ForceTorqueSensor : Sensor
{
    Task<string> get_name(CancellationToken cancel=default(CancellationToken));
    Task set_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_type(CancellationToken cancel=default(CancellationToken));
    Task set_type(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken));
    Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken));
    Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken));
    Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Wire<com.robotraconteur.geometry.Wrench> force_torque { get; set; }
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.GpsSensor")]
public interface GpsSensor : Sensor
{
    Task<string> get_name(CancellationToken cancel=default(CancellationToken));
    Task set_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_type(CancellationToken cancel=default(CancellationToken));
    Task set_type(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken));
    Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken));
    Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken));
    Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Wire<com.robotraconteur.gps.GpsState> state { get; set; }
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.ImuSensor")]
public interface ImuSensor : Sensor
{
    Task<string> get_name(CancellationToken cancel=default(CancellationToken));
    Task set_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_type(CancellationToken cancel=default(CancellationToken));
    Task set_type(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken));
    Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken));
    Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken));
    Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken));
    Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken));
    Task setf_reference_pose(CancellationToken rr_cancel=default(CancellationToken));
    Wire<com.robotraconteur.imu.ImuState> state { get; set; }
}

[RobotRaconteurServiceObjectInterface("experimental.gazebo.Light")]
public interface Light
{
    Task<string> get_name(CancellationToken cancel=default(CancellationToken));
    Task set_name(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_type(CancellationToken cancel=default(CancellationToken));
    Task set_type(string value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken));
    Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.geometry.Vector3> get_direction(CancellationToken cancel=default(CancellationToken));
    Task set_direction(com.robotraconteur.geometry.Vector3 value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.color.ColorRGBAf> get_diffuse_color(CancellationToken cancel=default(CancellationToken));
    Task set_diffuse_color(com.robotraconteur.color.ColorRGBAf value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.color.ColorRGBAf> get_specular_color(CancellationToken cancel=default(CancellationToken));
    Task set_specular_color(com.robotraconteur.color.ColorRGBAf value, CancellationToken cancel=default(CancellationToken));
}

}

namespace experimental.gazebo
{
public class experimental__gazeboFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service experimental.gazebo\n\nstdver 0.9\n\nimport com.robotraconteur.geometry\nimport com.robotraconteur.image\nimport com.robotraconteur.color\nimport com.robotraconteur.datetime\nimport com.robotraconteur.laserscan\nimport com.robotraconteur.pid\nimport com.robotraconteur.gps\nimport com.robotraconteur.imu\n\nusing com.robotraconteur.geometry.Vector3\nusing com.robotraconteur.geometry.Quaternion\nusing com.robotraconteur.geometry.Pose\nusing com.robotraconteur.geometry.SpatialVelocity\nusing com.robotraconteur.geometry.SpatialAcceleration\nusing com.robotraconteur.geometry.Wrench\nusing com.robotraconteur.image.Image\nusing com.robotraconteur.image.DepthImage\nusing com.robotraconteur.color.ColorRGBAf as Color\nusing com.robotraconteur.datetime.DateTimeUTC\nusing com.robotraconteur.datetime.Duration\nusing com.robotraconteur.laserscan.LaserScan\nusing com.robotraconteur.pid.PIDParam\nusing com.robotraconteur.gps.GpsState\nusing com.robotraconteur.imu.ImuState\n\nstruct Contact\nfield string contact_name1\nfield string contact_name2\nend struct\n\nobject Base\nproperty string name [readonly]\nproperty string scoped_name [readonly]\nend object\n\nobject Server\nproperty string{list} world_names [readonly]\nobjref World{string} worlds\n\nproperty string{list} sensor_names [readonly]\nobjref Sensor{string} sensors\nend object\n\nstruct WorldTimes\nfield Duration sim_time\nfield Duration real_time\nfield DateTimeUTC wall_time\nfield DateTimeUTC start_time\nend\n\nobject World\nproperty string name [readonly]\n\nwire Duration sim_time [readonly]\nwire WorldTimes time [readonly]\n\nproperty string{list} model_names [readonly]\nobjref Model{string} models\n\nproperty string{list} light_names [readonly]\nobjref Light{string} lights\n\nfunction void insert_model(string model_sdf, string model_name, Pose model_pose)\nfunction void remove_model(string model_name)\n\nend object\n\nobject Entity\nimplements Base\nproperty string name [readonly]\nproperty string scoped_name [readonly]\n\nwire Pose world_pose [readonly]\nwire Pose relative_pose [readonly]\nfunction void setf_world_pose(Pose pose)\nfunction void setf_relative_pose(Pose pose)\n\nwire SpatialVelocity world_velocity [readonly]\nwire SpatialVelocity relative_velocity [readonly]\nwire SpatialAcceleration world_acceleration [readonly]\nwire SpatialAcceleration relative_acceleration [readonly]\nend object\n\nobject Model\nimplements Entity\nimplements Base\nproperty string name [readonly]\nproperty string scoped_name [readonly]\n\nproperty string{list} child_model_names [readonly]\nobjref Model{string} child_models\n\nproperty string{list} link_names [readonly]\nobjref Link{string} links\n\nproperty string{list} joint_names [readonly]\nobjref Joint{string} joints\n\nwire Pose world_pose [readonly]\nwire Pose relative_pose [readonly]\nfunction void setf_world_pose(Pose pose)\nfunction void setf_relative_pose(Pose pose)\n\nwire SpatialVelocity world_velocity [readonly]\nwire SpatialVelocity relative_velocity [readonly]\nwire SpatialAcceleration world_acceleration [readonly]\nwire SpatialAcceleration relative_acceleration [readonly]\n\nfunction void create_joint_controller()\nfunction void destroy_joint_controller()\n\nobjref JointController joint_controller\n\nfunction void create_kinematic_joint_controller()\nfunction void destroy_kinematic_joint_controller()\n\nobjref JointController kinematic_joint_controller\n\nend object\n\nobject Link\nimplements Entity\nimplements Base\nproperty string name [readonly]\nproperty string scoped_name [readonly]\n\nproperty string{list} sensor_names [readonly]\n\nwire Pose world_pose [readonly]\nwire Pose relative_pose [readonly]\nfunction void setf_world_pose(Pose pose)\nfunction void setf_relative_pose(Pose pose)\n\nwire SpatialVelocity world_velocity [readonly]\nwire SpatialVelocity relative_velocity [readonly]\nwire SpatialAcceleration world_acceleration [readonly]\nwire SpatialAcceleration relative_acceleration [readonly]\n\nwire Wrench{list} applied_wrenches [writeonly]\nend object\n\nnamedarray JointWrench\nfield Wrench body1_wrench\nfield Wrench body2_wrench\nend\n\nobject Joint\nimplements Base\n\nproperty string name [readonly]\nproperty string scoped_name [readonly]\n\nproperty string parent_link_name [readonly]\nproperty string child_link_name [readonly]\n\nproperty uint32 dof [readonly]\n\nfunction Vector3[] getf_global_axes()\nfunction Vector3[] getf_local_axes()\n\nwire double[] axes_position [readonly]\nwire double[] axes_velocity [readonly]\nwire double[] axes_force [readonly]\n\nfunction void setf_axis_position(uint32 axis, double position)\nfunction void setf_axis_velocity(uint32 axis, double vel)\n\nwire JointWrench force_torque [readonly]\n\nwire double[] apply_axes_force [writeonly]\n\nend object\n\nobject JointController\nproperty string{list} joint_names [readonly]\nproperty PIDParam{string} position_pid [readonly]\nproperty PIDParam{string} velocity_pid [readonly]\nwire double{string} joint_position [readonly]\nwire double{string} joint_velocity [readonly]\nwire double{string} joint_position_command [writeonly]\nwire double{string} joint_velocity_command [writeonly]\n\nwire double{string} joint_forces [readonly]\n\nfunction void add_joint(string name)\nfunction void setf_position_pid(string name, PIDParam pid)\nfunction void setf_velocity_pid(string name, PIDParam pid)\nend object\n\nobject Sensor\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time	[readonly]\nend object\n\nobject CameraSensor\nimplements Sensor\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time	[readonly]\n\nfunction Image capture_image()\npipe Image image_stream [readonly]\nend object\n\nobject MultiCameraSensor\nimplements Sensor\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time	[readonly]\n\nproperty int32 camera_count [readonly]\nfunction Image capture_image(int32 ind)\npipe Image{int32} image_stream [readonly]\nend object\n\nobject DepthCameraSensor\nimplements Sensor\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time	[readonly]\n\nfunction DepthImage capture_image()\npipe DepthImage image_stream [readonly]\nend object\n\nobject RaySensor\nimplements Sensor\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time	[readonly]\n\nfunction LaserScan capture_scan()\npipe LaserScan scan_stream [readonly]\nend object\n\nobject ContactSensor\nimplements Sensor\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time [readonly]\n\nwire Contact{list} contacts [readonly]\nend object\n\nobject AltimeterSensor\nimplements Sensor\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time [readonly]\n\nwire double altitude [readonly]\nend object\n\nobject SonarSensor\nimplements Sensor\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time [readonly]\n\nproperty double range_min [readonly]\nproperty double range_max [readonly]\nproperty double radius [readonly]\n\nwire double range [readonly]\nend object\n\nobject MagnetometerSensor\nimplements Sensor\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time [readonly]\n\nwire Vector3 magnetic_field [readonly]\nend object\n\nobject ForceTorqueSensor\nimplements Sensor\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time [readonly]\n\nwire Wrench force_torque [readonly]\nend object\n\nobject GpsSensor\nimplements Sensor\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time [readonly]\n\nwire GpsState state [readonly]\nend object\n\nobject ImuSensor\nimplements Sensor\nproperty string name [readonly]\nproperty string type [readonly]\nproperty string parent_name [readonly]\nproperty Pose pose [readonly]\n\nproperty bool active\nproperty double update_rate\nproperty Duration last_update_time [readonly]\nproperty Duration last_measurement_time [readonly]\n\nfunction void setf_reference_pose()\n\nwire ImuState state [readonly]\nend object\n\nobject Light\nproperty string name [readonly]\nproperty string type [readonly]\nproperty Pose pose [readonly]\nproperty Vector3 direction [readonly]\n\nproperty Color diffuse_color\nproperty Color specular_color\nend object\n";
    return s;
    }
    public override string GetServiceName() {return "experimental.gazebo";}
    public Contact_stub Contact_stubentry;
    public WorldTimes_stub WorldTimes_stubentry;
    public JointWrench_stub JointWrench_stubentry;
    public experimental__gazeboFactory() : this(null,null) {}
    public experimental__gazeboFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    Contact_stubentry=new Contact_stub(this,this.node,this.context);
    WorldTimes_stubentry=new WorldTimes_stub(this,this.node,this.context);
    JointWrench_stubentry=new JointWrench_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="Contact")
    return Contact_stubentry;
    if (objecttype=="WorldTimes")
    return WorldTimes_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="JointWrench")
    return JointWrench_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Base":
    return new Base_stub(path, context);
    case "Server":
    return new Server_stub(path, context);
    case "World":
    return new World_stub(path, context);
    case "Entity":
    return new Entity_stub(path, context);
    case "Model":
    return new Model_stub(path, context);
    case "Link":
    return new Link_stub(path, context);
    case "Joint":
    return new Joint_stub(path, context);
    case "JointController":
    return new JointController_stub(path, context);
    case "Sensor":
    return new Sensor_stub(path, context);
    case "CameraSensor":
    return new CameraSensor_stub(path, context);
    case "MultiCameraSensor":
    return new MultiCameraSensor_stub(path, context);
    case "DepthCameraSensor":
    return new DepthCameraSensor_stub(path, context);
    case "RaySensor":
    return new RaySensor_stub(path, context);
    case "ContactSensor":
    return new ContactSensor_stub(path, context);
    case "AltimeterSensor":
    return new AltimeterSensor_stub(path, context);
    case "SonarSensor":
    return new SonarSensor_stub(path, context);
    case "MagnetometerSensor":
    return new MagnetometerSensor_stub(path, context);
    case "ForceTorqueSensor":
    return new ForceTorqueSensor_stub(path, context);
    case "GpsSensor":
    return new GpsSensor_stub(path, context);
    case "ImuSensor":
    return new ImuSensor_stub(path, context);
    case "Light":
    return new Light_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Base":
    return new Base_skel(path,(Base)obj,context);
    case "Server":
    return new Server_skel(path,(Server)obj,context);
    case "World":
    return new World_skel(path,(World)obj,context);
    case "Entity":
    return new Entity_skel(path,(Entity)obj,context);
    case "Model":
    return new Model_skel(path,(Model)obj,context);
    case "Link":
    return new Link_skel(path,(Link)obj,context);
    case "Joint":
    return new Joint_skel(path,(Joint)obj,context);
    case "JointController":
    return new JointController_skel(path,(JointController)obj,context);
    case "Sensor":
    return new Sensor_skel(path,(Sensor)obj,context);
    case "CameraSensor":
    return new CameraSensor_skel(path,(CameraSensor)obj,context);
    case "MultiCameraSensor":
    return new MultiCameraSensor_skel(path,(MultiCameraSensor)obj,context);
    case "DepthCameraSensor":
    return new DepthCameraSensor_skel(path,(DepthCameraSensor)obj,context);
    case "RaySensor":
    return new RaySensor_skel(path,(RaySensor)obj,context);
    case "ContactSensor":
    return new ContactSensor_skel(path,(ContactSensor)obj,context);
    case "AltimeterSensor":
    return new AltimeterSensor_skel(path,(AltimeterSensor)obj,context);
    case "SonarSensor":
    return new SonarSensor_skel(path,(SonarSensor)obj,context);
    case "MagnetometerSensor":
    return new MagnetometerSensor_skel(path,(MagnetometerSensor)obj,context);
    case "ForceTorqueSensor":
    return new ForceTorqueSensor_skel(path,(ForceTorqueSensor)obj,context);
    case "GpsSensor":
    return new GpsSensor_skel(path,(GpsSensor)obj,context);
    case "ImuSensor":
    return new ImuSensor_skel(path,(ImuSensor)obj,context);
    case "Light":
    return new Light_skel(path,(Light)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class Contact_stub : IStructureStub {
    public Contact_stub(experimental__gazeboFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private experimental__gazeboFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    Contact s = (Contact)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("contact_name1",s.contact_name1));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("contact_name2",s.contact_name2));
    return new MessageElementStructure("experimental.gazebo.Contact",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    Contact s=new Contact();
    s.contact_name1 =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"contact_name1"));
    s.contact_name2 =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"contact_name2"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class WorldTimes_stub : IStructureStub {
    public WorldTimes_stub(experimental__gazeboFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private experimental__gazeboFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    WorldTimes s = (WorldTimes)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "sim_time",ref s.sim_time));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "real_time",ref s.real_time));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.DateTimeUTC>(rr_node, rr_context, "wall_time",ref s.wall_time));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.DateTimeUTC>(rr_node, rr_context, "start_time",ref s.start_time));
    return new MessageElementStructure("experimental.gazebo.WorldTimes",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    WorldTimes s=new WorldTimes();
    s.sim_time =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"sim_time"));
    s.real_time =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"real_time"));
    s.wall_time =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.DateTimeUTC>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"wall_time"));
    s.start_time =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.DateTimeUTC>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"start_time"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class JointWrench_stub : NamedArrayStub<JointWrench,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref JointWrench s) {
    return s.GetNumericArray();
    }
    public override JointWrench GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 12) throw new DataTypeException("Invalid namedarray array");
    var s = new JointWrench();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(JointWrench[] s) {
    return s.GetNumericArray();
    }
    public override JointWrench[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 12 != 0) throw new DataTypeException("Invalid namedarray array");
    JointWrench[] s = new JointWrench[m.Length / 12];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "experimental.gazebo.JointWrench"; } }
}

public class Base_stub : ServiceStub , Base {
    public Base_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_scoped_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "scoped_name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_scoped_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"scoped_name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class Server_stub : ServiceStub , Server {
    public Server_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<List<string>> get_world_names(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "world_names");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<string>(rr_node, rr_context, me);
        }
    public async Task set_world_names(List<string> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"world_names");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<string>> get_sensor_names(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "sensor_names");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<string>(rr_node, rr_context, me);
        }
    public async Task set_sensor_names(List<string> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"sensor_names");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public async Task<World> get_worlds(string ind, CancellationToken cancel=default(CancellationToken)) {
    return (World)await FindObjRefTyped("worlds",ind.ToString(),"experimental.gazebo.World",cancel);
    }
    public async Task<Sensor> get_sensors(string ind, CancellationToken cancel=default(CancellationToken)) {
    return (Sensor)await FindObjRefTyped("sensors",ind.ToString(),"experimental.gazebo.Sensor",cancel);
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class World_stub : ServiceStub , World {
    private Wire<com.robotraconteur.datetime.Duration> rr_sim_time;
    private Wire<WorldTimes> rr_time;
    public World_stub(string path, ClientContext c) : base(path, c) {
    rr_sim_time=new WireClient<com.robotraconteur.datetime.Duration>("sim_time", this);
    rr_time=new WireClient<WorldTimes>("time", this);
    }
    public async Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<string>> get_model_names(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "model_names");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<string>(rr_node, rr_context, me);
        }
    public async Task set_model_names(List<string> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"model_names");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<string>> get_light_names(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "light_names");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<string>(rr_node, rr_context, me);
        }
    public async Task set_light_names(List<string> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"light_names");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task insert_model(string model_sdf, string model_name, com.robotraconteur.geometry.Pose model_pose, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"insert_model");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("model_sdf",model_sdf));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("model_name",model_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "model_pose",ref model_pose));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task remove_model(string model_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"remove_model");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("model_name",model_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public async Task<Model> get_models(string ind, CancellationToken cancel=default(CancellationToken)) {
    return (Model)await FindObjRefTyped("models",ind.ToString(),"experimental.gazebo.Model",cancel);
    }
    public async Task<Light> get_lights(string ind, CancellationToken cancel=default(CancellationToken)) {
    return (Light)await FindObjRefTyped("lights",ind.ToString(),"experimental.gazebo.Light",cancel);
    }
    public Wire<com.robotraconteur.datetime.Duration> sim_time {
    get { return rr_sim_time;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<WorldTimes> time {
    get { return rr_time;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "sim_time":
    this.rr_sim_time.WirePacketReceived(m);
    break;
    case "time":
    this.rr_time.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class Entity_stub : ServiceStub , Entity {
    private Wire<com.robotraconteur.geometry.Pose> rr_world_pose;
    private Wire<com.robotraconteur.geometry.Pose> rr_relative_pose;
    private Wire<com.robotraconteur.geometry.SpatialVelocity> rr_world_velocity;
    private Wire<com.robotraconteur.geometry.SpatialVelocity> rr_relative_velocity;
    private Wire<com.robotraconteur.geometry.SpatialAcceleration> rr_world_acceleration;
    private Wire<com.robotraconteur.geometry.SpatialAcceleration> rr_relative_acceleration;
    public Entity_stub(string path, ClientContext c) : base(path, c) {
    rr_world_pose=new WireClient<com.robotraconteur.geometry.Pose>("world_pose", this);
    rr_relative_pose=new WireClient<com.robotraconteur.geometry.Pose>("relative_pose", this);
    rr_world_velocity=new WireClient<com.robotraconteur.geometry.SpatialVelocity>("world_velocity", this);
    rr_relative_velocity=new WireClient<com.robotraconteur.geometry.SpatialVelocity>("relative_velocity", this);
    rr_world_acceleration=new WireClient<com.robotraconteur.geometry.SpatialAcceleration>("world_acceleration", this);
    rr_relative_acceleration=new WireClient<com.robotraconteur.geometry.SpatialAcceleration>("relative_acceleration", this);
    }
    public async Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_scoped_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "scoped_name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_scoped_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"scoped_name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task setf_world_pose(com.robotraconteur.geometry.Pose pose, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_world_pose");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "pose",ref pose));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task setf_relative_pose(com.robotraconteur.geometry.Pose pose, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_relative_pose");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "pose",ref pose));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Wire<com.robotraconteur.geometry.Pose> world_pose {
    get { return rr_world_pose;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.Pose> relative_pose {
    get { return rr_relative_pose;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialVelocity> world_velocity {
    get { return rr_world_velocity;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialVelocity> relative_velocity {
    get { return rr_relative_velocity;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialAcceleration> world_acceleration {
    get { return rr_world_acceleration;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialAcceleration> relative_acceleration {
    get { return rr_relative_acceleration;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "world_pose":
    this.rr_world_pose.WirePacketReceived(m);
    break;
    case "relative_pose":
    this.rr_relative_pose.WirePacketReceived(m);
    break;
    case "world_velocity":
    this.rr_world_velocity.WirePacketReceived(m);
    break;
    case "relative_velocity":
    this.rr_relative_velocity.WirePacketReceived(m);
    break;
    case "world_acceleration":
    this.rr_world_acceleration.WirePacketReceived(m);
    break;
    case "relative_acceleration":
    this.rr_relative_acceleration.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class Model_stub : ServiceStub , Model {
    private Wire<com.robotraconteur.geometry.Pose> rr_world_pose;
    private Wire<com.robotraconteur.geometry.Pose> rr_relative_pose;
    private Wire<com.robotraconteur.geometry.SpatialVelocity> rr_world_velocity;
    private Wire<com.robotraconteur.geometry.SpatialVelocity> rr_relative_velocity;
    private Wire<com.robotraconteur.geometry.SpatialAcceleration> rr_world_acceleration;
    private Wire<com.robotraconteur.geometry.SpatialAcceleration> rr_relative_acceleration;
    public Model_stub(string path, ClientContext c) : base(path, c) {
    rr_world_pose=new WireClient<com.robotraconteur.geometry.Pose>("world_pose", this);
    rr_relative_pose=new WireClient<com.robotraconteur.geometry.Pose>("relative_pose", this);
    rr_world_velocity=new WireClient<com.robotraconteur.geometry.SpatialVelocity>("world_velocity", this);
    rr_relative_velocity=new WireClient<com.robotraconteur.geometry.SpatialVelocity>("relative_velocity", this);
    rr_world_acceleration=new WireClient<com.robotraconteur.geometry.SpatialAcceleration>("world_acceleration", this);
    rr_relative_acceleration=new WireClient<com.robotraconteur.geometry.SpatialAcceleration>("relative_acceleration", this);
    }
    public async Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_scoped_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "scoped_name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_scoped_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"scoped_name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<string>> get_child_model_names(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "child_model_names");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<string>(rr_node, rr_context, me);
        }
    public async Task set_child_model_names(List<string> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"child_model_names");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<string>> get_link_names(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "link_names");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<string>(rr_node, rr_context, me);
        }
    public async Task set_link_names(List<string> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"link_names");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<string>> get_joint_names(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "joint_names");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<string>(rr_node, rr_context, me);
        }
    public async Task set_joint_names(List<string> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"joint_names");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task setf_world_pose(com.robotraconteur.geometry.Pose pose, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_world_pose");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "pose",ref pose));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task setf_relative_pose(com.robotraconteur.geometry.Pose pose, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_relative_pose");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "pose",ref pose));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task create_joint_controller(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"create_joint_controller");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task destroy_joint_controller(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"destroy_joint_controller");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task create_kinematic_joint_controller(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"create_kinematic_joint_controller");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task destroy_kinematic_joint_controller(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"destroy_kinematic_joint_controller");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public async Task<Model> get_child_models(string ind, CancellationToken cancel=default(CancellationToken)) {
    return (Model)await FindObjRefTyped("child_models",ind.ToString(),"experimental.gazebo.Model",cancel);
    }
    public async Task<Link> get_links(string ind, CancellationToken cancel=default(CancellationToken)) {
    return (Link)await FindObjRefTyped("links",ind.ToString(),"experimental.gazebo.Link",cancel);
    }
    public async Task<Joint> get_joints(string ind, CancellationToken cancel=default(CancellationToken)) {
    return (Joint)await FindObjRefTyped("joints",ind.ToString(),"experimental.gazebo.Joint",cancel);
    }
    public async Task<JointController> get_joint_controller(CancellationToken cancel=default(CancellationToken)) {
    return (JointController)await FindObjRefTyped("joint_controller","experimental.gazebo.JointController",cancel);
    }
    public async Task<JointController> get_kinematic_joint_controller(CancellationToken cancel=default(CancellationToken)) {
    return (JointController)await FindObjRefTyped("kinematic_joint_controller","experimental.gazebo.JointController",cancel);
    }
    public Wire<com.robotraconteur.geometry.Pose> world_pose {
    get { return rr_world_pose;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.Pose> relative_pose {
    get { return rr_relative_pose;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialVelocity> world_velocity {
    get { return rr_world_velocity;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialVelocity> relative_velocity {
    get { return rr_relative_velocity;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialAcceleration> world_acceleration {
    get { return rr_world_acceleration;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialAcceleration> relative_acceleration {
    get { return rr_relative_acceleration;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "world_pose":
    this.rr_world_pose.WirePacketReceived(m);
    break;
    case "relative_pose":
    this.rr_relative_pose.WirePacketReceived(m);
    break;
    case "world_velocity":
    this.rr_world_velocity.WirePacketReceived(m);
    break;
    case "relative_velocity":
    this.rr_relative_velocity.WirePacketReceived(m);
    break;
    case "world_acceleration":
    this.rr_world_acceleration.WirePacketReceived(m);
    break;
    case "relative_acceleration":
    this.rr_relative_acceleration.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class Link_stub : ServiceStub , Link {
    private Wire<com.robotraconteur.geometry.Pose> rr_world_pose;
    private Wire<com.robotraconteur.geometry.Pose> rr_relative_pose;
    private Wire<com.robotraconteur.geometry.SpatialVelocity> rr_world_velocity;
    private Wire<com.robotraconteur.geometry.SpatialVelocity> rr_relative_velocity;
    private Wire<com.robotraconteur.geometry.SpatialAcceleration> rr_world_acceleration;
    private Wire<com.robotraconteur.geometry.SpatialAcceleration> rr_relative_acceleration;
    private Wire<List<com.robotraconteur.geometry.Wrench>> rr_applied_wrenches;
    public Link_stub(string path, ClientContext c) : base(path, c) {
    rr_world_pose=new WireClient<com.robotraconteur.geometry.Pose>("world_pose", this);
    rr_relative_pose=new WireClient<com.robotraconteur.geometry.Pose>("relative_pose", this);
    rr_world_velocity=new WireClient<com.robotraconteur.geometry.SpatialVelocity>("world_velocity", this);
    rr_relative_velocity=new WireClient<com.robotraconteur.geometry.SpatialVelocity>("relative_velocity", this);
    rr_world_acceleration=new WireClient<com.robotraconteur.geometry.SpatialAcceleration>("world_acceleration", this);
    rr_relative_acceleration=new WireClient<com.robotraconteur.geometry.SpatialAcceleration>("relative_acceleration", this);
    rr_applied_wrenches=new WireClient<List<com.robotraconteur.geometry.Wrench>>("applied_wrenches", this);
    }
    public async Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_scoped_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "scoped_name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_scoped_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"scoped_name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<string>> get_sensor_names(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "sensor_names");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<string>(rr_node, rr_context, me);
        }
    public async Task set_sensor_names(List<string> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"sensor_names");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task setf_world_pose(com.robotraconteur.geometry.Pose pose, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_world_pose");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "pose",ref pose));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task setf_relative_pose(com.robotraconteur.geometry.Pose pose, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_relative_pose");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "pose",ref pose));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Wire<com.robotraconteur.geometry.Pose> world_pose {
    get { return rr_world_pose;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.Pose> relative_pose {
    get { return rr_relative_pose;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialVelocity> world_velocity {
    get { return rr_world_velocity;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialVelocity> relative_velocity {
    get { return rr_relative_velocity;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialAcceleration> world_acceleration {
    get { return rr_world_acceleration;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.SpatialAcceleration> relative_acceleration {
    get { return rr_relative_acceleration;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<List<com.robotraconteur.geometry.Wrench>> applied_wrenches {
    get { return rr_applied_wrenches;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "world_pose":
    this.rr_world_pose.WirePacketReceived(m);
    break;
    case "relative_pose":
    this.rr_relative_pose.WirePacketReceived(m);
    break;
    case "world_velocity":
    this.rr_world_velocity.WirePacketReceived(m);
    break;
    case "relative_velocity":
    this.rr_relative_velocity.WirePacketReceived(m);
    break;
    case "world_acceleration":
    this.rr_world_acceleration.WirePacketReceived(m);
    break;
    case "relative_acceleration":
    this.rr_relative_acceleration.WirePacketReceived(m);
    break;
    case "applied_wrenches":
    this.rr_applied_wrenches.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class Joint_stub : ServiceStub , Joint {
    private Wire<double[]> rr_axes_position;
    private Wire<double[]> rr_axes_velocity;
    private Wire<double[]> rr_axes_force;
    private Wire<JointWrench> rr_force_torque;
    private Wire<double[]> rr_apply_axes_force;
    public Joint_stub(string path, ClientContext c) : base(path, c) {
    rr_axes_position=new WireClient<double[]>("axes_position", this);
    rr_axes_velocity=new WireClient<double[]>("axes_velocity", this);
    rr_axes_force=new WireClient<double[]>("axes_force", this);
    rr_force_torque=new WireClient<JointWrench>("force_torque", this);
    rr_apply_axes_force=new WireClient<double[]>("apply_axes_force", this);
    }
    public async Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_scoped_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "scoped_name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_scoped_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"scoped_name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_parent_link_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "parent_link_name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_parent_link_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"parent_link_name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_child_link_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "child_link_name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_child_link_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"child_link_name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<uint> get_dof(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "dof");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<uint>(me));
        }
    public async Task set_dof(uint value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"dof");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.geometry.Vector3[]> getf_global_axes(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_global_axes");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task<com.robotraconteur.geometry.Vector3[]> getf_local_axes(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_local_axes");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_axis_position(uint axis, double position, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_axis_position");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<uint>("axis",axis));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<double>("position",position));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task setf_axis_velocity(uint axis, double vel, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_axis_velocity");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<uint>("axis",axis));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<double>("vel",vel));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Wire<double[]> axes_position {
    get { return rr_axes_position;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> axes_velocity {
    get { return rr_axes_velocity;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> axes_force {
    get { return rr_axes_force;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<JointWrench> force_torque {
    get { return rr_force_torque;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> apply_axes_force {
    get { return rr_apply_axes_force;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "axes_position":
    this.rr_axes_position.WirePacketReceived(m);
    break;
    case "axes_velocity":
    this.rr_axes_velocity.WirePacketReceived(m);
    break;
    case "axes_force":
    this.rr_axes_force.WirePacketReceived(m);
    break;
    case "force_torque":
    this.rr_force_torque.WirePacketReceived(m);
    break;
    case "apply_axes_force":
    this.rr_apply_axes_force.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class JointController_stub : ServiceStub , JointController {
    private Wire<Dictionary<string,double>> rr_joint_position;
    private Wire<Dictionary<string,double>> rr_joint_velocity;
    private Wire<Dictionary<string,double>> rr_joint_position_command;
    private Wire<Dictionary<string,double>> rr_joint_velocity_command;
    private Wire<Dictionary<string,double>> rr_joint_forces;
    public JointController_stub(string path, ClientContext c) : base(path, c) {
    rr_joint_position=new WireClient<Dictionary<string,double>>("joint_position", this);
    rr_joint_velocity=new WireClient<Dictionary<string,double>>("joint_velocity", this);
    rr_joint_position_command=new WireClient<Dictionary<string,double>>("joint_position_command", this);
    rr_joint_velocity_command=new WireClient<Dictionary<string,double>>("joint_velocity_command", this);
    rr_joint_forces=new WireClient<Dictionary<string,double>>("joint_forces", this);
    }
    public async Task<List<string>> get_joint_names(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "joint_names");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<string>(rr_node, rr_context, me);
        }
    public async Task set_joint_names(List<string> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"joint_names");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<Dictionary<string,com.robotraconteur.pid.PIDParam>> get_position_pid(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "position_pid");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<string,com.robotraconteur.pid.PIDParam>(rr_node, rr_context, me);
        }
    public async Task set_position_pid(Dictionary<string,com.robotraconteur.pid.PIDParam> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"position_pid");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,com.robotraconteur.pid.PIDParam>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<Dictionary<string,com.robotraconteur.pid.PIDParam>> get_velocity_pid(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "velocity_pid");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<string,com.robotraconteur.pid.PIDParam>(rr_node, rr_context, me);
        }
    public async Task set_velocity_pid(Dictionary<string,com.robotraconteur.pid.PIDParam> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"velocity_pid");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,com.robotraconteur.pid.PIDParam>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task add_joint(string name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"add_joint");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("name",name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task setf_position_pid(string name, com.robotraconteur.pid.PIDParam pid, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_position_pid");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("name",name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "pid",pid));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task setf_velocity_pid(string name, com.robotraconteur.pid.PIDParam pid, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_velocity_pid");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("name",name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "pid",pid));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Wire<Dictionary<string,double>> joint_position {
    get { return rr_joint_position;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<Dictionary<string,double>> joint_velocity {
    get { return rr_joint_velocity;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<Dictionary<string,double>> joint_position_command {
    get { return rr_joint_position_command;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<Dictionary<string,double>> joint_velocity_command {
    get { return rr_joint_velocity_command;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<Dictionary<string,double>> joint_forces {
    get { return rr_joint_forces;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "joint_position":
    this.rr_joint_position.WirePacketReceived(m);
    break;
    case "joint_velocity":
    this.rr_joint_velocity.WirePacketReceived(m);
    break;
    case "joint_position_command":
    this.rr_joint_position_command.WirePacketReceived(m);
    break;
    case "joint_velocity_command":
    this.rr_joint_velocity_command.WirePacketReceived(m);
    break;
    case "joint_forces":
    this.rr_joint_forces.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class Sensor_stub : ServiceStub , Sensor {
    public Sensor_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "type");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"type");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "parent_name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"parent_name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "pose");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me);
        }
    public async Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"pose");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_rate");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_rate");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_update_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_update_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_measurement_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_measurement_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class CameraSensor_stub : ServiceStub , CameraSensor {
    private Pipe<com.robotraconteur.image.Image> rr_image_stream;
    public CameraSensor_stub(string path, ClientContext c) : base(path, c) {
    rr_image_stream=new PipeClient<com.robotraconteur.image.Image>("image_stream", this);
    }
    public async Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "type");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"type");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "parent_name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"parent_name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "pose");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me);
        }
    public async Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"pose");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_rate");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_rate");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_update_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_update_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_measurement_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_measurement_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.image.Image> capture_image(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"capture_image");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackStructure<com.robotraconteur.image.Image>(rr_node, rr_context, rr_me.FindElement("return"));
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<com.robotraconteur.image.Image> image_stream {
    get { return rr_image_stream;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "image_stream":
    this.rr_image_stream.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class MultiCameraSensor_stub : ServiceStub , MultiCameraSensor {
    private Pipe<Dictionary<int,com.robotraconteur.image.Image>> rr_image_stream;
    public MultiCameraSensor_stub(string path, ClientContext c) : base(path, c) {
    rr_image_stream=new PipeClient<Dictionary<int,com.robotraconteur.image.Image>>("image_stream", this);
    }
    public async Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "type");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"type");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "parent_name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"parent_name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "pose");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me);
        }
    public async Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"pose");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_rate");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_rate");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_update_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_update_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_measurement_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_measurement_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<int> get_camera_count(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "camera_count");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<int>(me));
        }
    public async Task set_camera_count(int value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"camera_count");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<int>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.image.Image> capture_image(int ind, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"capture_image");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<int>("ind",ind));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackStructure<com.robotraconteur.image.Image>(rr_node, rr_context, rr_me.FindElement("return"));
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<Dictionary<int,com.robotraconteur.image.Image>> image_stream {
    get { return rr_image_stream;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "image_stream":
    this.rr_image_stream.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class DepthCameraSensor_stub : ServiceStub , DepthCameraSensor {
    private Pipe<com.robotraconteur.image.DepthImage> rr_image_stream;
    public DepthCameraSensor_stub(string path, ClientContext c) : base(path, c) {
    rr_image_stream=new PipeClient<com.robotraconteur.image.DepthImage>("image_stream", this);
    }
    public async Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "type");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"type");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "parent_name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"parent_name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "pose");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me);
        }
    public async Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"pose");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_rate");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_rate");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_update_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_update_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_measurement_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_measurement_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.image.DepthImage> capture_image(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"capture_image");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackStructure<com.robotraconteur.image.DepthImage>(rr_node, rr_context, rr_me.FindElement("return"));
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<com.robotraconteur.image.DepthImage> image_stream {
    get { return rr_image_stream;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "image_stream":
    this.rr_image_stream.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class RaySensor_stub : ServiceStub , RaySensor {
    private Pipe<com.robotraconteur.laserscan.LaserScan> rr_scan_stream;
    public RaySensor_stub(string path, ClientContext c) : base(path, c) {
    rr_scan_stream=new PipeClient<com.robotraconteur.laserscan.LaserScan>("scan_stream", this);
    }
    public async Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "type");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"type");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "parent_name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"parent_name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "pose");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me);
        }
    public async Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"pose");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_rate");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_rate");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_update_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_update_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_measurement_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_measurement_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.laserscan.LaserScan> capture_scan(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"capture_scan");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackStructure<com.robotraconteur.laserscan.LaserScan>(rr_node, rr_context, rr_me.FindElement("return"));
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<com.robotraconteur.laserscan.LaserScan> scan_stream {
    get { return rr_scan_stream;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "scan_stream":
    this.rr_scan_stream.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class ContactSensor_stub : ServiceStub , ContactSensor {
    private Wire<List<Contact>> rr_contacts;
    public ContactSensor_stub(string path, ClientContext c) : base(path, c) {
    rr_contacts=new WireClient<List<Contact>>("contacts", this);
    }
    public async Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "type");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"type");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "parent_name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"parent_name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "pose");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me);
        }
    public async Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"pose");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_rate");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_rate");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_update_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_update_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_measurement_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_measurement_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Wire<List<Contact>> contacts {
    get { return rr_contacts;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "contacts":
    this.rr_contacts.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class AltimeterSensor_stub : ServiceStub , AltimeterSensor {
    private Wire<double> rr_altitude;
    public AltimeterSensor_stub(string path, ClientContext c) : base(path, c) {
    rr_altitude=new WireClient<double>("altitude", this);
    }
    public async Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "type");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"type");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "parent_name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"parent_name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "pose");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me);
        }
    public async Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"pose");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_rate");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_rate");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_update_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_update_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_measurement_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_measurement_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Wire<double> altitude {
    get { return rr_altitude;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "altitude":
    this.rr_altitude.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class SonarSensor_stub : ServiceStub , SonarSensor {
    private Wire<double> rr_range;
    public SonarSensor_stub(string path, ClientContext c) : base(path, c) {
    rr_range=new WireClient<double>("range", this);
    }
    public async Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "type");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"type");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "parent_name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"parent_name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "pose");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me);
        }
    public async Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"pose");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_rate");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_rate");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_update_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_update_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_measurement_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_measurement_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_range_min(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "range_min");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_range_min(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"range_min");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_range_max(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "range_max");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_range_max(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"range_max");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_radius(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "radius");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_radius(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"radius");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Wire<double> range {
    get { return rr_range;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "range":
    this.rr_range.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class MagnetometerSensor_stub : ServiceStub , MagnetometerSensor {
    private Wire<com.robotraconteur.geometry.Vector3> rr_magnetic_field;
    public MagnetometerSensor_stub(string path, ClientContext c) : base(path, c) {
    rr_magnetic_field=new WireClient<com.robotraconteur.geometry.Vector3>("magnetic_field", this);
    }
    public async Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "type");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"type");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "parent_name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"parent_name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "pose");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me);
        }
    public async Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"pose");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_rate");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_rate");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_update_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_update_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_measurement_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_measurement_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Wire<com.robotraconteur.geometry.Vector3> magnetic_field {
    get { return rr_magnetic_field;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "magnetic_field":
    this.rr_magnetic_field.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class ForceTorqueSensor_stub : ServiceStub , ForceTorqueSensor {
    private Wire<com.robotraconteur.geometry.Wrench> rr_force_torque;
    public ForceTorqueSensor_stub(string path, ClientContext c) : base(path, c) {
    rr_force_torque=new WireClient<com.robotraconteur.geometry.Wrench>("force_torque", this);
    }
    public async Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "type");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"type");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "parent_name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"parent_name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "pose");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me);
        }
    public async Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"pose");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_rate");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_rate");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_update_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_update_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_measurement_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_measurement_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Wire<com.robotraconteur.geometry.Wrench> force_torque {
    get { return rr_force_torque;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "force_torque":
    this.rr_force_torque.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class GpsSensor_stub : ServiceStub , GpsSensor {
    private Wire<com.robotraconteur.gps.GpsState> rr_state;
    public GpsSensor_stub(string path, ClientContext c) : base(path, c) {
    rr_state=new WireClient<com.robotraconteur.gps.GpsState>("state", this);
    }
    public async Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "type");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"type");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "parent_name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"parent_name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "pose");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me);
        }
    public async Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"pose");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_rate");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_rate");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_update_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_update_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_measurement_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_measurement_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Wire<com.robotraconteur.gps.GpsState> state {
    get { return rr_state;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "state":
    this.rr_state.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class ImuSensor_stub : ServiceStub , ImuSensor {
    private Wire<com.robotraconteur.imu.ImuState> rr_state;
    public ImuSensor_stub(string path, ClientContext c) : base(path, c) {
    rr_state=new WireClient<com.robotraconteur.imu.ImuState>("state", this);
    }
    public async Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "type");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"type");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "parent_name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"parent_name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "pose");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me);
        }
    public async Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"pose");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_rate");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_rate");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_update_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_update_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "last_measurement_time");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me);
        }
    public async Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"last_measurement_time");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task setf_reference_pose(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_reference_pose");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Wire<com.robotraconteur.imu.ImuState> state {
    get { return rr_state;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "state":
    this.rr_state.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class Light_stub : ServiceStub , Light {
    public Light_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "name");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"name");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "type");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"type");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "pose");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me);
        }
    public async Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"pose");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.geometry.Vector3> get_direction(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "direction");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, me);
        }
    public async Task set_direction(com.robotraconteur.geometry.Vector3 value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"direction");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.color.ColorRGBAf> get_diffuse_color(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "diffuse_color");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBAf>(rr_node, rr_context, me);
        }
    public async Task set_diffuse_color(com.robotraconteur.color.ColorRGBAf value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"diffuse_color");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBAf>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.color.ColorRGBAf> get_specular_color(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "specular_color");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBAf>(rr_node, rr_context, me);
        }
    public async Task set_specular_color(com.robotraconteur.color.ColorRGBAf value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"specular_color");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBAf>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class Base_skel : ServiceSkel {
    protected Base obj;
    public Base_skel(string p,Base o,ServerContext c) : base(p,o,c) { obj=(Base)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "name":
    {
    string ret=await obj.get_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "scoped_name":
    {
    string ret=await obj.get_scoped_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "name":
    {
    await obj.set_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "scoped_name":
    {
    await obj.set_scoped_name(MessageElementUtil.UnpackString(me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Base)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Base)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Base castobj=(Base)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Base)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class Server_skel : ServiceSkel {
    protected Server obj;
    public Server_skel(string p,Server o,ServerContext c) : base(p,o,c) { obj=(Server)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "world_names":
    {
    List<string> ret=await obj.get_world_names();
    mr.AddElement(MessageElementUtil.PackListType<string>(rr_node, rr_context, "value",ret));
    break;
    }
    case "sensor_names":
    {
    List<string> ret=await obj.get_sensor_names();
    mr.AddElement(MessageElementUtil.PackListType<string>(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "world_names":
    {
    await obj.set_world_names(MessageElementUtil.UnpackList<string>(rr_node, rr_context, me));
    break;
    }
    case "sensor_names":
    {
    await obj.set_sensor_names(MessageElementUtil.UnpackList<string>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    case "worlds": {
    return await obj.get_worlds(ind);
    }
    case "sensors": {
    return await obj.get_sensors(ind);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Server)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Server)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Server castobj=(Server)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Server)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class World_skel : ServiceSkel {
    protected World obj;
    public World_skel(string p,World o,ServerContext c) : base(p,o,c) { obj=(World)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "name":
    {
    string ret=await obj.get_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "model_names":
    {
    List<string> ret=await obj.get_model_names();
    mr.AddElement(MessageElementUtil.PackListType<string>(rr_node, rr_context, "value",ret));
    break;
    }
    case "light_names":
    {
    List<string> ret=await obj.get_light_names();
    mr.AddElement(MessageElementUtil.PackListType<string>(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "name":
    {
    await obj.set_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "model_names":
    {
    await obj.set_model_names(MessageElementUtil.UnpackList<string>(rr_node, rr_context, me));
    break;
    }
    case "light_names":
    {
    await obj.set_light_names(MessageElementUtil.UnpackList<string>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "insert_model":
    {
    string model_sdf=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"model_sdf"));
    string model_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"model_name"));
    com.robotraconteur.geometry.Pose model_pose=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"model_pose"));
    await this.obj.insert_model(model_sdf, model_name, model_pose, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "remove_model":
    {
    string model_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"model_name"));
    await this.obj.remove_model(model_name, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    case "models": {
    return await obj.get_models(ind);
    }
    case "lights": {
    return await obj.get_lights(ind);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(World)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(World)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private WireServer<com.robotraconteur.datetime.Duration> rr_sim_time;
    private WireServer<WorldTimes> rr_time;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    World castobj=(World)o;
    this.rr_sim_time=new WireServer<com.robotraconteur.datetime.Duration>("sim_time",this);
    this.rr_time=new WireServer<WorldTimes>("time",this);
    castobj.sim_time=this.rr_sim_time;
    castobj.time=this.rr_time;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(World)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "sim_time":
    return await this.rr_sim_time.WireCommand(m,e);
    case "time":
    return await this.rr_time.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "sim_time":
    this.rr_sim_time.WirePacketReceived(m,e);
    break;
    case "time":
    this.rr_time.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class Entity_skel : ServiceSkel {
    protected Entity obj;
    public Entity_skel(string p,Entity o,ServerContext c) : base(p,o,c) { obj=(Entity)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "name":
    {
    string ret=await obj.get_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "scoped_name":
    {
    string ret=await obj.get_scoped_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "name":
    {
    await obj.set_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "scoped_name":
    {
    await obj.set_scoped_name(MessageElementUtil.UnpackString(me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "setf_world_pose":
    {
    com.robotraconteur.geometry.Pose pose=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"pose"));
    await this.obj.setf_world_pose(pose, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "setf_relative_pose":
    {
    com.robotraconteur.geometry.Pose pose=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"pose"));
    await this.obj.setf_relative_pose(pose, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Entity)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Entity)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private WireServer<com.robotraconteur.geometry.Pose> rr_world_pose;
    private WireServer<com.robotraconteur.geometry.Pose> rr_relative_pose;
    private WireServer<com.robotraconteur.geometry.SpatialVelocity> rr_world_velocity;
    private WireServer<com.robotraconteur.geometry.SpatialVelocity> rr_relative_velocity;
    private WireServer<com.robotraconteur.geometry.SpatialAcceleration> rr_world_acceleration;
    private WireServer<com.robotraconteur.geometry.SpatialAcceleration> rr_relative_acceleration;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Entity castobj=(Entity)o;
    this.rr_world_pose=new WireServer<com.robotraconteur.geometry.Pose>("world_pose",this);
    this.rr_relative_pose=new WireServer<com.robotraconteur.geometry.Pose>("relative_pose",this);
    this.rr_world_velocity=new WireServer<com.robotraconteur.geometry.SpatialVelocity>("world_velocity",this);
    this.rr_relative_velocity=new WireServer<com.robotraconteur.geometry.SpatialVelocity>("relative_velocity",this);
    this.rr_world_acceleration=new WireServer<com.robotraconteur.geometry.SpatialAcceleration>("world_acceleration",this);
    this.rr_relative_acceleration=new WireServer<com.robotraconteur.geometry.SpatialAcceleration>("relative_acceleration",this);
    castobj.world_pose=this.rr_world_pose;
    castobj.relative_pose=this.rr_relative_pose;
    castobj.world_velocity=this.rr_world_velocity;
    castobj.relative_velocity=this.rr_relative_velocity;
    castobj.world_acceleration=this.rr_world_acceleration;
    castobj.relative_acceleration=this.rr_relative_acceleration;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Entity)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "world_pose":
    return await this.rr_world_pose.WireCommand(m,e);
    case "relative_pose":
    return await this.rr_relative_pose.WireCommand(m,e);
    case "world_velocity":
    return await this.rr_world_velocity.WireCommand(m,e);
    case "relative_velocity":
    return await this.rr_relative_velocity.WireCommand(m,e);
    case "world_acceleration":
    return await this.rr_world_acceleration.WireCommand(m,e);
    case "relative_acceleration":
    return await this.rr_relative_acceleration.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "world_pose":
    this.rr_world_pose.WirePacketReceived(m,e);
    break;
    case "relative_pose":
    this.rr_relative_pose.WirePacketReceived(m,e);
    break;
    case "world_velocity":
    this.rr_world_velocity.WirePacketReceived(m,e);
    break;
    case "relative_velocity":
    this.rr_relative_velocity.WirePacketReceived(m,e);
    break;
    case "world_acceleration":
    this.rr_world_acceleration.WirePacketReceived(m,e);
    break;
    case "relative_acceleration":
    this.rr_relative_acceleration.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class Model_skel : ServiceSkel {
    protected Model obj;
    public Model_skel(string p,Model o,ServerContext c) : base(p,o,c) { obj=(Model)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "name":
    {
    string ret=await obj.get_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "scoped_name":
    {
    string ret=await obj.get_scoped_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "child_model_names":
    {
    List<string> ret=await obj.get_child_model_names();
    mr.AddElement(MessageElementUtil.PackListType<string>(rr_node, rr_context, "value",ret));
    break;
    }
    case "link_names":
    {
    List<string> ret=await obj.get_link_names();
    mr.AddElement(MessageElementUtil.PackListType<string>(rr_node, rr_context, "value",ret));
    break;
    }
    case "joint_names":
    {
    List<string> ret=await obj.get_joint_names();
    mr.AddElement(MessageElementUtil.PackListType<string>(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "name":
    {
    await obj.set_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "scoped_name":
    {
    await obj.set_scoped_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "child_model_names":
    {
    await obj.set_child_model_names(MessageElementUtil.UnpackList<string>(rr_node, rr_context, me));
    break;
    }
    case "link_names":
    {
    await obj.set_link_names(MessageElementUtil.UnpackList<string>(rr_node, rr_context, me));
    break;
    }
    case "joint_names":
    {
    await obj.set_joint_names(MessageElementUtil.UnpackList<string>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "setf_world_pose":
    {
    com.robotraconteur.geometry.Pose pose=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"pose"));
    await this.obj.setf_world_pose(pose, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "setf_relative_pose":
    {
    com.robotraconteur.geometry.Pose pose=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"pose"));
    await this.obj.setf_relative_pose(pose, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "create_joint_controller":
    {
    await this.obj.create_joint_controller(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "destroy_joint_controller":
    {
    await this.obj.destroy_joint_controller(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "create_kinematic_joint_controller":
    {
    await this.obj.create_kinematic_joint_controller(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "destroy_kinematic_joint_controller":
    {
    await this.obj.destroy_kinematic_joint_controller(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    case "child_models": {
    return await obj.get_child_models(ind);
    }
    case "links": {
    return await obj.get_links(ind);
    }
    case "joints": {
    return await obj.get_joints(ind);
    }
    case "joint_controller": {
    return await obj.get_joint_controller();
    }
    case "kinematic_joint_controller": {
    return await obj.get_kinematic_joint_controller();
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Model)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Model)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private WireServer<com.robotraconteur.geometry.Pose> rr_world_pose;
    private WireServer<com.robotraconteur.geometry.Pose> rr_relative_pose;
    private WireServer<com.robotraconteur.geometry.SpatialVelocity> rr_world_velocity;
    private WireServer<com.robotraconteur.geometry.SpatialVelocity> rr_relative_velocity;
    private WireServer<com.robotraconteur.geometry.SpatialAcceleration> rr_world_acceleration;
    private WireServer<com.robotraconteur.geometry.SpatialAcceleration> rr_relative_acceleration;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Model castobj=(Model)o;
    this.rr_world_pose=new WireServer<com.robotraconteur.geometry.Pose>("world_pose",this);
    this.rr_relative_pose=new WireServer<com.robotraconteur.geometry.Pose>("relative_pose",this);
    this.rr_world_velocity=new WireServer<com.robotraconteur.geometry.SpatialVelocity>("world_velocity",this);
    this.rr_relative_velocity=new WireServer<com.robotraconteur.geometry.SpatialVelocity>("relative_velocity",this);
    this.rr_world_acceleration=new WireServer<com.robotraconteur.geometry.SpatialAcceleration>("world_acceleration",this);
    this.rr_relative_acceleration=new WireServer<com.robotraconteur.geometry.SpatialAcceleration>("relative_acceleration",this);
    castobj.world_pose=this.rr_world_pose;
    castobj.relative_pose=this.rr_relative_pose;
    castobj.world_velocity=this.rr_world_velocity;
    castobj.relative_velocity=this.rr_relative_velocity;
    castobj.world_acceleration=this.rr_world_acceleration;
    castobj.relative_acceleration=this.rr_relative_acceleration;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Model)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "world_pose":
    return await this.rr_world_pose.WireCommand(m,e);
    case "relative_pose":
    return await this.rr_relative_pose.WireCommand(m,e);
    case "world_velocity":
    return await this.rr_world_velocity.WireCommand(m,e);
    case "relative_velocity":
    return await this.rr_relative_velocity.WireCommand(m,e);
    case "world_acceleration":
    return await this.rr_world_acceleration.WireCommand(m,e);
    case "relative_acceleration":
    return await this.rr_relative_acceleration.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "world_pose":
    this.rr_world_pose.WirePacketReceived(m,e);
    break;
    case "relative_pose":
    this.rr_relative_pose.WirePacketReceived(m,e);
    break;
    case "world_velocity":
    this.rr_world_velocity.WirePacketReceived(m,e);
    break;
    case "relative_velocity":
    this.rr_relative_velocity.WirePacketReceived(m,e);
    break;
    case "world_acceleration":
    this.rr_world_acceleration.WirePacketReceived(m,e);
    break;
    case "relative_acceleration":
    this.rr_relative_acceleration.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class Link_skel : ServiceSkel {
    protected Link obj;
    public Link_skel(string p,Link o,ServerContext c) : base(p,o,c) { obj=(Link)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "name":
    {
    string ret=await obj.get_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "scoped_name":
    {
    string ret=await obj.get_scoped_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "sensor_names":
    {
    List<string> ret=await obj.get_sensor_names();
    mr.AddElement(MessageElementUtil.PackListType<string>(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "name":
    {
    await obj.set_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "scoped_name":
    {
    await obj.set_scoped_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "sensor_names":
    {
    await obj.set_sensor_names(MessageElementUtil.UnpackList<string>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "setf_world_pose":
    {
    com.robotraconteur.geometry.Pose pose=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"pose"));
    await this.obj.setf_world_pose(pose, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "setf_relative_pose":
    {
    com.robotraconteur.geometry.Pose pose=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"pose"));
    await this.obj.setf_relative_pose(pose, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Link)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Link)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private WireServer<com.robotraconteur.geometry.Pose> rr_world_pose;
    private WireServer<com.robotraconteur.geometry.Pose> rr_relative_pose;
    private WireServer<com.robotraconteur.geometry.SpatialVelocity> rr_world_velocity;
    private WireServer<com.robotraconteur.geometry.SpatialVelocity> rr_relative_velocity;
    private WireServer<com.robotraconteur.geometry.SpatialAcceleration> rr_world_acceleration;
    private WireServer<com.robotraconteur.geometry.SpatialAcceleration> rr_relative_acceleration;
    private WireServer<List<com.robotraconteur.geometry.Wrench>> rr_applied_wrenches;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Link castobj=(Link)o;
    this.rr_world_pose=new WireServer<com.robotraconteur.geometry.Pose>("world_pose",this);
    this.rr_relative_pose=new WireServer<com.robotraconteur.geometry.Pose>("relative_pose",this);
    this.rr_world_velocity=new WireServer<com.robotraconteur.geometry.SpatialVelocity>("world_velocity",this);
    this.rr_relative_velocity=new WireServer<com.robotraconteur.geometry.SpatialVelocity>("relative_velocity",this);
    this.rr_world_acceleration=new WireServer<com.robotraconteur.geometry.SpatialAcceleration>("world_acceleration",this);
    this.rr_relative_acceleration=new WireServer<com.robotraconteur.geometry.SpatialAcceleration>("relative_acceleration",this);
    this.rr_applied_wrenches=new WireServer<List<com.robotraconteur.geometry.Wrench>>("applied_wrenches",this);
    castobj.world_pose=this.rr_world_pose;
    castobj.relative_pose=this.rr_relative_pose;
    castobj.world_velocity=this.rr_world_velocity;
    castobj.relative_velocity=this.rr_relative_velocity;
    castobj.world_acceleration=this.rr_world_acceleration;
    castobj.relative_acceleration=this.rr_relative_acceleration;
    castobj.applied_wrenches=this.rr_applied_wrenches;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Link)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "world_pose":
    return await this.rr_world_pose.WireCommand(m,e);
    case "relative_pose":
    return await this.rr_relative_pose.WireCommand(m,e);
    case "world_velocity":
    return await this.rr_world_velocity.WireCommand(m,e);
    case "relative_velocity":
    return await this.rr_relative_velocity.WireCommand(m,e);
    case "world_acceleration":
    return await this.rr_world_acceleration.WireCommand(m,e);
    case "relative_acceleration":
    return await this.rr_relative_acceleration.WireCommand(m,e);
    case "applied_wrenches":
    return await this.rr_applied_wrenches.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "world_pose":
    this.rr_world_pose.WirePacketReceived(m,e);
    break;
    case "relative_pose":
    this.rr_relative_pose.WirePacketReceived(m,e);
    break;
    case "world_velocity":
    this.rr_world_velocity.WirePacketReceived(m,e);
    break;
    case "relative_velocity":
    this.rr_relative_velocity.WirePacketReceived(m,e);
    break;
    case "world_acceleration":
    this.rr_world_acceleration.WirePacketReceived(m,e);
    break;
    case "relative_acceleration":
    this.rr_relative_acceleration.WirePacketReceived(m,e);
    break;
    case "applied_wrenches":
    this.rr_applied_wrenches.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class Joint_skel : ServiceSkel {
    protected Joint obj;
    public Joint_skel(string p,Joint o,ServerContext c) : base(p,o,c) { obj=(Joint)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "name":
    {
    string ret=await obj.get_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "scoped_name":
    {
    string ret=await obj.get_scoped_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "parent_link_name":
    {
    string ret=await obj.get_parent_link_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "child_link_name":
    {
    string ret=await obj.get_child_link_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "dof":
    {
    uint ret=await obj.get_dof();
    mr.AddElement(MessageElementUtil.PackScalar<uint>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "name":
    {
    await obj.set_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "scoped_name":
    {
    await obj.set_scoped_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "parent_link_name":
    {
    await obj.set_parent_link_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "child_link_name":
    {
    await obj.set_child_link_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "dof":
    {
    await obj.set_dof((MessageElementUtil.UnpackScalar<uint>(me)));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "getf_global_axes":
    {
    com.robotraconteur.geometry.Vector3[] rr_ret=await this.obj.getf_global_axes(default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "getf_local_axes":
    {
    com.robotraconteur.geometry.Vector3[] rr_ret=await this.obj.getf_local_axes(default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_axis_position":
    {
    uint axis=(MessageElementUtil.UnpackScalar<uint>(MessageElementUtil.FindElement(rr_m,"axis")));
    double position=(MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m,"position")));
    await this.obj.setf_axis_position(axis, position, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "setf_axis_velocity":
    {
    uint axis=(MessageElementUtil.UnpackScalar<uint>(MessageElementUtil.FindElement(rr_m,"axis")));
    double vel=(MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m,"vel")));
    await this.obj.setf_axis_velocity(axis, vel, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Joint)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Joint)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private WireServer<double[]> rr_axes_position;
    private WireServer<double[]> rr_axes_velocity;
    private WireServer<double[]> rr_axes_force;
    private WireServer<JointWrench> rr_force_torque;
    private WireServer<double[]> rr_apply_axes_force;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Joint castobj=(Joint)o;
    this.rr_axes_position=new WireServer<double[]>("axes_position",this);
    this.rr_axes_velocity=new WireServer<double[]>("axes_velocity",this);
    this.rr_axes_force=new WireServer<double[]>("axes_force",this);
    this.rr_force_torque=new WireServer<JointWrench>("force_torque",this);
    this.rr_apply_axes_force=new WireServer<double[]>("apply_axes_force",this);
    castobj.axes_position=this.rr_axes_position;
    castobj.axes_velocity=this.rr_axes_velocity;
    castobj.axes_force=this.rr_axes_force;
    castobj.force_torque=this.rr_force_torque;
    castobj.apply_axes_force=this.rr_apply_axes_force;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Joint)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "axes_position":
    return await this.rr_axes_position.WireCommand(m,e);
    case "axes_velocity":
    return await this.rr_axes_velocity.WireCommand(m,e);
    case "axes_force":
    return await this.rr_axes_force.WireCommand(m,e);
    case "force_torque":
    return await this.rr_force_torque.WireCommand(m,e);
    case "apply_axes_force":
    return await this.rr_apply_axes_force.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "axes_position":
    this.rr_axes_position.WirePacketReceived(m,e);
    break;
    case "axes_velocity":
    this.rr_axes_velocity.WirePacketReceived(m,e);
    break;
    case "axes_force":
    this.rr_axes_force.WirePacketReceived(m,e);
    break;
    case "force_torque":
    this.rr_force_torque.WirePacketReceived(m,e);
    break;
    case "apply_axes_force":
    this.rr_apply_axes_force.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class JointController_skel : ServiceSkel {
    protected JointController obj;
    public JointController_skel(string p,JointController o,ServerContext c) : base(p,o,c) { obj=(JointController)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "joint_names":
    {
    List<string> ret=await obj.get_joint_names();
    mr.AddElement(MessageElementUtil.PackListType<string>(rr_node, rr_context, "value",ret));
    break;
    }
    case "position_pid":
    {
    Dictionary<string,com.robotraconteur.pid.PIDParam> ret=await obj.get_position_pid();
    mr.AddElement(MessageElementUtil.PackMapType<string,com.robotraconteur.pid.PIDParam>(rr_node, rr_context, "value",ret));
    break;
    }
    case "velocity_pid":
    {
    Dictionary<string,com.robotraconteur.pid.PIDParam> ret=await obj.get_velocity_pid();
    mr.AddElement(MessageElementUtil.PackMapType<string,com.robotraconteur.pid.PIDParam>(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "joint_names":
    {
    await obj.set_joint_names(MessageElementUtil.UnpackList<string>(rr_node, rr_context, me));
    break;
    }
    case "position_pid":
    {
    await obj.set_position_pid(MessageElementUtil.UnpackMap<string,com.robotraconteur.pid.PIDParam>(rr_node, rr_context, me));
    break;
    }
    case "velocity_pid":
    {
    await obj.set_velocity_pid(MessageElementUtil.UnpackMap<string,com.robotraconteur.pid.PIDParam>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "add_joint":
    {
    string name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"name"));
    await this.obj.add_joint(name, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "setf_position_pid":
    {
    string name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"name"));
    com.robotraconteur.pid.PIDParam pid=MessageElementUtil.UnpackStructure<com.robotraconteur.pid.PIDParam>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"pid"));
    await this.obj.setf_position_pid(name, pid, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "setf_velocity_pid":
    {
    string name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"name"));
    com.robotraconteur.pid.PIDParam pid=MessageElementUtil.UnpackStructure<com.robotraconteur.pid.PIDParam>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"pid"));
    await this.obj.setf_velocity_pid(name, pid, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(JointController)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(JointController)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private WireServer<Dictionary<string,double>> rr_joint_position;
    private WireServer<Dictionary<string,double>> rr_joint_velocity;
    private WireServer<Dictionary<string,double>> rr_joint_position_command;
    private WireServer<Dictionary<string,double>> rr_joint_velocity_command;
    private WireServer<Dictionary<string,double>> rr_joint_forces;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    JointController castobj=(JointController)o;
    this.rr_joint_position=new WireServer<Dictionary<string,double>>("joint_position",this);
    this.rr_joint_velocity=new WireServer<Dictionary<string,double>>("joint_velocity",this);
    this.rr_joint_position_command=new WireServer<Dictionary<string,double>>("joint_position_command",this);
    this.rr_joint_velocity_command=new WireServer<Dictionary<string,double>>("joint_velocity_command",this);
    this.rr_joint_forces=new WireServer<Dictionary<string,double>>("joint_forces",this);
    castobj.joint_position=this.rr_joint_position;
    castobj.joint_velocity=this.rr_joint_velocity;
    castobj.joint_position_command=this.rr_joint_position_command;
    castobj.joint_velocity_command=this.rr_joint_velocity_command;
    castobj.joint_forces=this.rr_joint_forces;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(JointController)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "joint_position":
    return await this.rr_joint_position.WireCommand(m,e);
    case "joint_velocity":
    return await this.rr_joint_velocity.WireCommand(m,e);
    case "joint_position_command":
    return await this.rr_joint_position_command.WireCommand(m,e);
    case "joint_velocity_command":
    return await this.rr_joint_velocity_command.WireCommand(m,e);
    case "joint_forces":
    return await this.rr_joint_forces.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "joint_position":
    this.rr_joint_position.WirePacketReceived(m,e);
    break;
    case "joint_velocity":
    this.rr_joint_velocity.WirePacketReceived(m,e);
    break;
    case "joint_position_command":
    this.rr_joint_position_command.WirePacketReceived(m,e);
    break;
    case "joint_velocity_command":
    this.rr_joint_velocity_command.WirePacketReceived(m,e);
    break;
    case "joint_forces":
    this.rr_joint_forces.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class Sensor_skel : ServiceSkel {
    protected Sensor obj;
    public Sensor_skel(string p,Sensor o,ServerContext c) : base(p,o,c) { obj=(Sensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "name":
    {
    string ret=await obj.get_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "type":
    {
    string ret=await obj.get_type();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "parent_name":
    {
    string ret=await obj.get_parent_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "pose":
    {
    com.robotraconteur.geometry.Pose ret=await obj.get_pose();
    mr.AddElement(MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "update_rate":
    {
    double ret=await obj.get_update_rate();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "last_update_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_update_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "last_measurement_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_measurement_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "name":
    {
    await obj.set_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "type":
    {
    await obj.set_type(MessageElementUtil.UnpackString(me));
    break;
    }
    case "parent_name":
    {
    await obj.set_parent_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "pose":
    {
    await obj.set_pose(MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me));
    break;
    }
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "update_rate":
    {
    await obj.set_update_rate((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    case "last_update_time":
    {
    await obj.set_last_update_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    case "last_measurement_time":
    {
    await obj.set_last_measurement_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Sensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Sensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Sensor castobj=(Sensor)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Sensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class CameraSensor_skel : ServiceSkel {
    protected CameraSensor obj;
    public CameraSensor_skel(string p,CameraSensor o,ServerContext c) : base(p,o,c) { obj=(CameraSensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "name":
    {
    string ret=await obj.get_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "type":
    {
    string ret=await obj.get_type();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "parent_name":
    {
    string ret=await obj.get_parent_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "pose":
    {
    com.robotraconteur.geometry.Pose ret=await obj.get_pose();
    mr.AddElement(MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "update_rate":
    {
    double ret=await obj.get_update_rate();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "last_update_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_update_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "last_measurement_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_measurement_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "name":
    {
    await obj.set_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "type":
    {
    await obj.set_type(MessageElementUtil.UnpackString(me));
    break;
    }
    case "parent_name":
    {
    await obj.set_parent_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "pose":
    {
    await obj.set_pose(MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me));
    break;
    }
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "update_rate":
    {
    await obj.set_update_rate((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    case "last_update_time":
    {
    await obj.set_last_update_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    case "last_measurement_time":
    {
    await obj.set_last_measurement_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "capture_image":
    {
    com.robotraconteur.image.Image rr_ret=await this.obj.capture_image(default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "return",rr_ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(CameraSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(CameraSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<com.robotraconteur.image.Image> rr_image_stream;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    CameraSensor castobj=(CameraSensor)o;
    this.rr_image_stream=new PipeServer<com.robotraconteur.image.Image>("image_stream",this);
    castobj.image_stream=this.rr_image_stream;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(CameraSensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "image_stream":
    return await this.rr_image_stream.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "image_stream":
    this.rr_image_stream.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class MultiCameraSensor_skel : ServiceSkel {
    protected MultiCameraSensor obj;
    public MultiCameraSensor_skel(string p,MultiCameraSensor o,ServerContext c) : base(p,o,c) { obj=(MultiCameraSensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "name":
    {
    string ret=await obj.get_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "type":
    {
    string ret=await obj.get_type();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "parent_name":
    {
    string ret=await obj.get_parent_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "pose":
    {
    com.robotraconteur.geometry.Pose ret=await obj.get_pose();
    mr.AddElement(MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "update_rate":
    {
    double ret=await obj.get_update_rate();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "last_update_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_update_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "last_measurement_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_measurement_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "camera_count":
    {
    int ret=await obj.get_camera_count();
    mr.AddElement(MessageElementUtil.PackScalar<int>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "name":
    {
    await obj.set_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "type":
    {
    await obj.set_type(MessageElementUtil.UnpackString(me));
    break;
    }
    case "parent_name":
    {
    await obj.set_parent_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "pose":
    {
    await obj.set_pose(MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me));
    break;
    }
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "update_rate":
    {
    await obj.set_update_rate((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    case "last_update_time":
    {
    await obj.set_last_update_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    case "last_measurement_time":
    {
    await obj.set_last_measurement_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    case "camera_count":
    {
    await obj.set_camera_count((MessageElementUtil.UnpackScalar<int>(me)));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "capture_image":
    {
    int ind=(MessageElementUtil.UnpackScalar<int>(MessageElementUtil.FindElement(rr_m,"ind")));
    com.robotraconteur.image.Image rr_ret=await this.obj.capture_image(ind, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "return",rr_ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(MultiCameraSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(MultiCameraSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<Dictionary<int,com.robotraconteur.image.Image>> rr_image_stream;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    MultiCameraSensor castobj=(MultiCameraSensor)o;
    this.rr_image_stream=new PipeServer<Dictionary<int,com.robotraconteur.image.Image>>("image_stream",this);
    castobj.image_stream=this.rr_image_stream;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(MultiCameraSensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "image_stream":
    return await this.rr_image_stream.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "image_stream":
    this.rr_image_stream.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class DepthCameraSensor_skel : ServiceSkel {
    protected DepthCameraSensor obj;
    public DepthCameraSensor_skel(string p,DepthCameraSensor o,ServerContext c) : base(p,o,c) { obj=(DepthCameraSensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "name":
    {
    string ret=await obj.get_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "type":
    {
    string ret=await obj.get_type();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "parent_name":
    {
    string ret=await obj.get_parent_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "pose":
    {
    com.robotraconteur.geometry.Pose ret=await obj.get_pose();
    mr.AddElement(MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "update_rate":
    {
    double ret=await obj.get_update_rate();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "last_update_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_update_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "last_measurement_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_measurement_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "name":
    {
    await obj.set_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "type":
    {
    await obj.set_type(MessageElementUtil.UnpackString(me));
    break;
    }
    case "parent_name":
    {
    await obj.set_parent_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "pose":
    {
    await obj.set_pose(MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me));
    break;
    }
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "update_rate":
    {
    await obj.set_update_rate((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    case "last_update_time":
    {
    await obj.set_last_update_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    case "last_measurement_time":
    {
    await obj.set_last_measurement_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "capture_image":
    {
    com.robotraconteur.image.DepthImage rr_ret=await this.obj.capture_image(default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "return",rr_ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(DepthCameraSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(DepthCameraSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<com.robotraconteur.image.DepthImage> rr_image_stream;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    DepthCameraSensor castobj=(DepthCameraSensor)o;
    this.rr_image_stream=new PipeServer<com.robotraconteur.image.DepthImage>("image_stream",this);
    castobj.image_stream=this.rr_image_stream;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(DepthCameraSensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "image_stream":
    return await this.rr_image_stream.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "image_stream":
    this.rr_image_stream.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class RaySensor_skel : ServiceSkel {
    protected RaySensor obj;
    public RaySensor_skel(string p,RaySensor o,ServerContext c) : base(p,o,c) { obj=(RaySensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "name":
    {
    string ret=await obj.get_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "type":
    {
    string ret=await obj.get_type();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "parent_name":
    {
    string ret=await obj.get_parent_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "pose":
    {
    com.robotraconteur.geometry.Pose ret=await obj.get_pose();
    mr.AddElement(MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "update_rate":
    {
    double ret=await obj.get_update_rate();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "last_update_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_update_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "last_measurement_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_measurement_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "name":
    {
    await obj.set_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "type":
    {
    await obj.set_type(MessageElementUtil.UnpackString(me));
    break;
    }
    case "parent_name":
    {
    await obj.set_parent_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "pose":
    {
    await obj.set_pose(MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me));
    break;
    }
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "update_rate":
    {
    await obj.set_update_rate((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    case "last_update_time":
    {
    await obj.set_last_update_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    case "last_measurement_time":
    {
    await obj.set_last_measurement_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "capture_scan":
    {
    com.robotraconteur.laserscan.LaserScan rr_ret=await this.obj.capture_scan(default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "return",rr_ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(RaySensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(RaySensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<com.robotraconteur.laserscan.LaserScan> rr_scan_stream;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    RaySensor castobj=(RaySensor)o;
    this.rr_scan_stream=new PipeServer<com.robotraconteur.laserscan.LaserScan>("scan_stream",this);
    castobj.scan_stream=this.rr_scan_stream;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(RaySensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "scan_stream":
    return await this.rr_scan_stream.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "scan_stream":
    this.rr_scan_stream.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class ContactSensor_skel : ServiceSkel {
    protected ContactSensor obj;
    public ContactSensor_skel(string p,ContactSensor o,ServerContext c) : base(p,o,c) { obj=(ContactSensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "name":
    {
    string ret=await obj.get_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "type":
    {
    string ret=await obj.get_type();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "parent_name":
    {
    string ret=await obj.get_parent_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "pose":
    {
    com.robotraconteur.geometry.Pose ret=await obj.get_pose();
    mr.AddElement(MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "update_rate":
    {
    double ret=await obj.get_update_rate();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "last_update_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_update_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "last_measurement_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_measurement_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "name":
    {
    await obj.set_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "type":
    {
    await obj.set_type(MessageElementUtil.UnpackString(me));
    break;
    }
    case "parent_name":
    {
    await obj.set_parent_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "pose":
    {
    await obj.set_pose(MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me));
    break;
    }
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "update_rate":
    {
    await obj.set_update_rate((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    case "last_update_time":
    {
    await obj.set_last_update_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    case "last_measurement_time":
    {
    await obj.set_last_measurement_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ContactSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ContactSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private WireServer<List<Contact>> rr_contacts;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    ContactSensor castobj=(ContactSensor)o;
    this.rr_contacts=new WireServer<List<Contact>>("contacts",this);
    castobj.contacts=this.rr_contacts;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ContactSensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "contacts":
    return await this.rr_contacts.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "contacts":
    this.rr_contacts.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class AltimeterSensor_skel : ServiceSkel {
    protected AltimeterSensor obj;
    public AltimeterSensor_skel(string p,AltimeterSensor o,ServerContext c) : base(p,o,c) { obj=(AltimeterSensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "name":
    {
    string ret=await obj.get_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "type":
    {
    string ret=await obj.get_type();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "parent_name":
    {
    string ret=await obj.get_parent_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "pose":
    {
    com.robotraconteur.geometry.Pose ret=await obj.get_pose();
    mr.AddElement(MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "update_rate":
    {
    double ret=await obj.get_update_rate();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "last_update_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_update_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "last_measurement_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_measurement_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "name":
    {
    await obj.set_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "type":
    {
    await obj.set_type(MessageElementUtil.UnpackString(me));
    break;
    }
    case "parent_name":
    {
    await obj.set_parent_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "pose":
    {
    await obj.set_pose(MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me));
    break;
    }
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "update_rate":
    {
    await obj.set_update_rate((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    case "last_update_time":
    {
    await obj.set_last_update_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    case "last_measurement_time":
    {
    await obj.set_last_measurement_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(AltimeterSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(AltimeterSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private WireServer<double> rr_altitude;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    AltimeterSensor castobj=(AltimeterSensor)o;
    this.rr_altitude=new WireServer<double>("altitude",this);
    castobj.altitude=this.rr_altitude;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(AltimeterSensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "altitude":
    return await this.rr_altitude.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "altitude":
    this.rr_altitude.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class SonarSensor_skel : ServiceSkel {
    protected SonarSensor obj;
    public SonarSensor_skel(string p,SonarSensor o,ServerContext c) : base(p,o,c) { obj=(SonarSensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "name":
    {
    string ret=await obj.get_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "type":
    {
    string ret=await obj.get_type();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "parent_name":
    {
    string ret=await obj.get_parent_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "pose":
    {
    com.robotraconteur.geometry.Pose ret=await obj.get_pose();
    mr.AddElement(MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "update_rate":
    {
    double ret=await obj.get_update_rate();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "last_update_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_update_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "last_measurement_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_measurement_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "range_min":
    {
    double ret=await obj.get_range_min();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "range_max":
    {
    double ret=await obj.get_range_max();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "radius":
    {
    double ret=await obj.get_radius();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "name":
    {
    await obj.set_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "type":
    {
    await obj.set_type(MessageElementUtil.UnpackString(me));
    break;
    }
    case "parent_name":
    {
    await obj.set_parent_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "pose":
    {
    await obj.set_pose(MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me));
    break;
    }
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "update_rate":
    {
    await obj.set_update_rate((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    case "last_update_time":
    {
    await obj.set_last_update_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    case "last_measurement_time":
    {
    await obj.set_last_measurement_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    case "range_min":
    {
    await obj.set_range_min((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    case "range_max":
    {
    await obj.set_range_max((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    case "radius":
    {
    await obj.set_radius((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(SonarSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(SonarSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private WireServer<double> rr_range;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    SonarSensor castobj=(SonarSensor)o;
    this.rr_range=new WireServer<double>("range",this);
    castobj.range=this.rr_range;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(SonarSensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "range":
    return await this.rr_range.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "range":
    this.rr_range.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class MagnetometerSensor_skel : ServiceSkel {
    protected MagnetometerSensor obj;
    public MagnetometerSensor_skel(string p,MagnetometerSensor o,ServerContext c) : base(p,o,c) { obj=(MagnetometerSensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "name":
    {
    string ret=await obj.get_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "type":
    {
    string ret=await obj.get_type();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "parent_name":
    {
    string ret=await obj.get_parent_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "pose":
    {
    com.robotraconteur.geometry.Pose ret=await obj.get_pose();
    mr.AddElement(MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "update_rate":
    {
    double ret=await obj.get_update_rate();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "last_update_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_update_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "last_measurement_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_measurement_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "name":
    {
    await obj.set_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "type":
    {
    await obj.set_type(MessageElementUtil.UnpackString(me));
    break;
    }
    case "parent_name":
    {
    await obj.set_parent_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "pose":
    {
    await obj.set_pose(MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me));
    break;
    }
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "update_rate":
    {
    await obj.set_update_rate((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    case "last_update_time":
    {
    await obj.set_last_update_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    case "last_measurement_time":
    {
    await obj.set_last_measurement_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(MagnetometerSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(MagnetometerSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private WireServer<com.robotraconteur.geometry.Vector3> rr_magnetic_field;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    MagnetometerSensor castobj=(MagnetometerSensor)o;
    this.rr_magnetic_field=new WireServer<com.robotraconteur.geometry.Vector3>("magnetic_field",this);
    castobj.magnetic_field=this.rr_magnetic_field;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(MagnetometerSensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "magnetic_field":
    return await this.rr_magnetic_field.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "magnetic_field":
    this.rr_magnetic_field.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class ForceTorqueSensor_skel : ServiceSkel {
    protected ForceTorqueSensor obj;
    public ForceTorqueSensor_skel(string p,ForceTorqueSensor o,ServerContext c) : base(p,o,c) { obj=(ForceTorqueSensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "name":
    {
    string ret=await obj.get_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "type":
    {
    string ret=await obj.get_type();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "parent_name":
    {
    string ret=await obj.get_parent_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "pose":
    {
    com.robotraconteur.geometry.Pose ret=await obj.get_pose();
    mr.AddElement(MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "update_rate":
    {
    double ret=await obj.get_update_rate();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "last_update_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_update_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "last_measurement_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_measurement_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "name":
    {
    await obj.set_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "type":
    {
    await obj.set_type(MessageElementUtil.UnpackString(me));
    break;
    }
    case "parent_name":
    {
    await obj.set_parent_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "pose":
    {
    await obj.set_pose(MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me));
    break;
    }
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "update_rate":
    {
    await obj.set_update_rate((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    case "last_update_time":
    {
    await obj.set_last_update_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    case "last_measurement_time":
    {
    await obj.set_last_measurement_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ForceTorqueSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ForceTorqueSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private WireServer<com.robotraconteur.geometry.Wrench> rr_force_torque;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    ForceTorqueSensor castobj=(ForceTorqueSensor)o;
    this.rr_force_torque=new WireServer<com.robotraconteur.geometry.Wrench>("force_torque",this);
    castobj.force_torque=this.rr_force_torque;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ForceTorqueSensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "force_torque":
    return await this.rr_force_torque.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "force_torque":
    this.rr_force_torque.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class GpsSensor_skel : ServiceSkel {
    protected GpsSensor obj;
    public GpsSensor_skel(string p,GpsSensor o,ServerContext c) : base(p,o,c) { obj=(GpsSensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "name":
    {
    string ret=await obj.get_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "type":
    {
    string ret=await obj.get_type();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "parent_name":
    {
    string ret=await obj.get_parent_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "pose":
    {
    com.robotraconteur.geometry.Pose ret=await obj.get_pose();
    mr.AddElement(MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "update_rate":
    {
    double ret=await obj.get_update_rate();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "last_update_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_update_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "last_measurement_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_measurement_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "name":
    {
    await obj.set_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "type":
    {
    await obj.set_type(MessageElementUtil.UnpackString(me));
    break;
    }
    case "parent_name":
    {
    await obj.set_parent_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "pose":
    {
    await obj.set_pose(MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me));
    break;
    }
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "update_rate":
    {
    await obj.set_update_rate((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    case "last_update_time":
    {
    await obj.set_last_update_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    case "last_measurement_time":
    {
    await obj.set_last_measurement_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(GpsSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(GpsSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private WireServer<com.robotraconteur.gps.GpsState> rr_state;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    GpsSensor castobj=(GpsSensor)o;
    this.rr_state=new WireServer<com.robotraconteur.gps.GpsState>("state",this);
    castobj.state=this.rr_state;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(GpsSensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "state":
    return await this.rr_state.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "state":
    this.rr_state.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class ImuSensor_skel : ServiceSkel {
    protected ImuSensor obj;
    public ImuSensor_skel(string p,ImuSensor o,ServerContext c) : base(p,o,c) { obj=(ImuSensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "name":
    {
    string ret=await obj.get_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "type":
    {
    string ret=await obj.get_type();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "parent_name":
    {
    string ret=await obj.get_parent_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "pose":
    {
    com.robotraconteur.geometry.Pose ret=await obj.get_pose();
    mr.AddElement(MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "update_rate":
    {
    double ret=await obj.get_update_rate();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "last_update_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_update_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "last_measurement_time":
    {
    com.robotraconteur.datetime.Duration ret=await obj.get_last_measurement_time();
    mr.AddElement(MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, "value",ref ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "name":
    {
    await obj.set_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "type":
    {
    await obj.set_type(MessageElementUtil.UnpackString(me));
    break;
    }
    case "parent_name":
    {
    await obj.set_parent_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "pose":
    {
    await obj.set_pose(MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me));
    break;
    }
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "update_rate":
    {
    await obj.set_update_rate((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    case "last_update_time":
    {
    await obj.set_last_update_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    case "last_measurement_time":
    {
    await obj.set_last_measurement_time(MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.Duration>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "setf_reference_pose":
    {
    await this.obj.setf_reference_pose(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ImuSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ImuSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private WireServer<com.robotraconteur.imu.ImuState> rr_state;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    ImuSensor castobj=(ImuSensor)o;
    this.rr_state=new WireServer<com.robotraconteur.imu.ImuState>("state",this);
    castobj.state=this.rr_state;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ImuSensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "state":
    return await this.rr_state.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "state":
    this.rr_state.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class Light_skel : ServiceSkel {
    protected Light obj;
    public Light_skel(string p,Light o,ServerContext c) : base(p,o,c) { obj=(Light)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "name":
    {
    string ret=await obj.get_name();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "type":
    {
    string ret=await obj.get_type();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "pose":
    {
    com.robotraconteur.geometry.Pose ret=await obj.get_pose();
    mr.AddElement(MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "direction":
    {
    com.robotraconteur.geometry.Vector3 ret=await obj.get_direction();
    mr.AddElement(MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "diffuse_color":
    {
    com.robotraconteur.color.ColorRGBAf ret=await obj.get_diffuse_color();
    mr.AddElement(MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBAf>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "specular_color":
    {
    com.robotraconteur.color.ColorRGBAf ret=await obj.get_specular_color();
    mr.AddElement(MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBAf>(rr_node, rr_context, "value",ref ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "name":
    {
    await obj.set_name(MessageElementUtil.UnpackString(me));
    break;
    }
    case "type":
    {
    await obj.set_type(MessageElementUtil.UnpackString(me));
    break;
    }
    case "pose":
    {
    await obj.set_pose(MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, me));
    break;
    }
    case "direction":
    {
    await obj.set_direction(MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, me));
    break;
    }
    case "diffuse_color":
    {
    await obj.set_diffuse_color(MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBAf>(rr_node, rr_context, me));
    break;
    }
    case "specular_color":
    {
    await obj.set_specular_color(MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBAf>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Light)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Light)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Light castobj=(Light)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Light)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class Base_default_impl : Base{
    public virtual Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_scoped_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_scoped_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public class Server_default_impl : Server{
    public virtual Task<List<string>> get_world_names(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_world_names(List<string> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<string>> get_sensor_names(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_sensor_names(List<string> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<World> get_worlds(string ind, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Sensor> get_sensors(string ind, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public class World_default_impl : World{
    protected WireBroadcaster<com.robotraconteur.datetime.Duration> rrvar_sim_time;
    protected WireBroadcaster<WorldTimes> rrvar_time;
    public virtual Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<string>> get_model_names(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_model_names(List<string> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<string>> get_light_names(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_light_names(List<string> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task insert_model(string model_sdf, string model_name, com.robotraconteur.geometry.Pose model_pose,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task remove_model(string model_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Model> get_models(string ind, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Light> get_lights(string ind, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Wire<com.robotraconteur.datetime.Duration> sim_time {
    get { return rrvar_sim_time.Wire;  }
    set {
    if (rrvar_sim_time!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sim_time= new WireBroadcaster<com.robotraconteur.datetime.Duration>(value);
    }
    }
    public virtual Wire<WorldTimes> time {
    get { return rrvar_time.Wire;  }
    set {
    if (rrvar_time!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_time= new WireBroadcaster<WorldTimes>(value);
    }
    }
}
public class Entity_default_impl : Entity{
    protected WireBroadcaster<com.robotraconteur.geometry.Pose> rrvar_world_pose;
    protected WireBroadcaster<com.robotraconteur.geometry.Pose> rrvar_relative_pose;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity> rrvar_world_velocity;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity> rrvar_relative_velocity;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration> rrvar_world_acceleration;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration> rrvar_relative_acceleration;
    public virtual Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_scoped_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_scoped_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_world_pose(com.robotraconteur.geometry.Pose pose,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_relative_pose(com.robotraconteur.geometry.Pose pose,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Wire<com.robotraconteur.geometry.Pose> world_pose {
    get { return rrvar_world_pose.Wire;  }
    set {
    if (rrvar_world_pose!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_world_pose= new WireBroadcaster<com.robotraconteur.geometry.Pose>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.Pose> relative_pose {
    get { return rrvar_relative_pose.Wire;  }
    set {
    if (rrvar_relative_pose!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_relative_pose= new WireBroadcaster<com.robotraconteur.geometry.Pose>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialVelocity> world_velocity {
    get { return rrvar_world_velocity.Wire;  }
    set {
    if (rrvar_world_velocity!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_world_velocity= new WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialVelocity> relative_velocity {
    get { return rrvar_relative_velocity.Wire;  }
    set {
    if (rrvar_relative_velocity!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_relative_velocity= new WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialAcceleration> world_acceleration {
    get { return rrvar_world_acceleration.Wire;  }
    set {
    if (rrvar_world_acceleration!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_world_acceleration= new WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialAcceleration> relative_acceleration {
    get { return rrvar_relative_acceleration.Wire;  }
    set {
    if (rrvar_relative_acceleration!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_relative_acceleration= new WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration>(value);
    }
    }
}
public class Model_default_impl : Model{
    protected WireBroadcaster<com.robotraconteur.geometry.Pose> rrvar_world_pose;
    protected WireBroadcaster<com.robotraconteur.geometry.Pose> rrvar_relative_pose;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity> rrvar_world_velocity;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity> rrvar_relative_velocity;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration> rrvar_world_acceleration;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration> rrvar_relative_acceleration;
    public virtual Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_scoped_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_scoped_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<string>> get_child_model_names(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_child_model_names(List<string> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<string>> get_link_names(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_link_names(List<string> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<string>> get_joint_names(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_joint_names(List<string> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_world_pose(com.robotraconteur.geometry.Pose pose,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_relative_pose(com.robotraconteur.geometry.Pose pose,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task create_joint_controller(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task destroy_joint_controller(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task create_kinematic_joint_controller(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task destroy_kinematic_joint_controller(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Model> get_child_models(string ind, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Link> get_links(string ind, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Joint> get_joints(string ind, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<JointController> get_joint_controller(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<JointController> get_kinematic_joint_controller(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Wire<com.robotraconteur.geometry.Pose> world_pose {
    get { return rrvar_world_pose.Wire;  }
    set {
    if (rrvar_world_pose!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_world_pose= new WireBroadcaster<com.robotraconteur.geometry.Pose>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.Pose> relative_pose {
    get { return rrvar_relative_pose.Wire;  }
    set {
    if (rrvar_relative_pose!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_relative_pose= new WireBroadcaster<com.robotraconteur.geometry.Pose>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialVelocity> world_velocity {
    get { return rrvar_world_velocity.Wire;  }
    set {
    if (rrvar_world_velocity!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_world_velocity= new WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialVelocity> relative_velocity {
    get { return rrvar_relative_velocity.Wire;  }
    set {
    if (rrvar_relative_velocity!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_relative_velocity= new WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialAcceleration> world_acceleration {
    get { return rrvar_world_acceleration.Wire;  }
    set {
    if (rrvar_world_acceleration!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_world_acceleration= new WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialAcceleration> relative_acceleration {
    get { return rrvar_relative_acceleration.Wire;  }
    set {
    if (rrvar_relative_acceleration!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_relative_acceleration= new WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration>(value);
    }
    }
}
public class Link_default_impl : Link{
    protected WireBroadcaster<com.robotraconteur.geometry.Pose> rrvar_world_pose;
    protected WireBroadcaster<com.robotraconteur.geometry.Pose> rrvar_relative_pose;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity> rrvar_world_velocity;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity> rrvar_relative_velocity;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration> rrvar_world_acceleration;
    protected WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration> rrvar_relative_acceleration;
    protected WireUnicastReceiver<List<com.robotraconteur.geometry.Wrench>> rrvar_applied_wrenches;
    public virtual Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_scoped_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_scoped_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<string>> get_sensor_names(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_sensor_names(List<string> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_world_pose(com.robotraconteur.geometry.Pose pose,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_relative_pose(com.robotraconteur.geometry.Pose pose,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Wire<com.robotraconteur.geometry.Pose> world_pose {
    get { return rrvar_world_pose.Wire;  }
    set {
    if (rrvar_world_pose!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_world_pose= new WireBroadcaster<com.robotraconteur.geometry.Pose>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.Pose> relative_pose {
    get { return rrvar_relative_pose.Wire;  }
    set {
    if (rrvar_relative_pose!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_relative_pose= new WireBroadcaster<com.robotraconteur.geometry.Pose>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialVelocity> world_velocity {
    get { return rrvar_world_velocity.Wire;  }
    set {
    if (rrvar_world_velocity!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_world_velocity= new WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialVelocity> relative_velocity {
    get { return rrvar_relative_velocity.Wire;  }
    set {
    if (rrvar_relative_velocity!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_relative_velocity= new WireBroadcaster<com.robotraconteur.geometry.SpatialVelocity>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialAcceleration> world_acceleration {
    get { return rrvar_world_acceleration.Wire;  }
    set {
    if (rrvar_world_acceleration!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_world_acceleration= new WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.SpatialAcceleration> relative_acceleration {
    get { return rrvar_relative_acceleration.Wire;  }
    set {
    if (rrvar_relative_acceleration!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_relative_acceleration= new WireBroadcaster<com.robotraconteur.geometry.SpatialAcceleration>(value);
    }
    }
    public virtual Wire<List<com.robotraconteur.geometry.Wrench>> applied_wrenches {
    get { return rrvar_applied_wrenches.Wire;  }
    set {
    if (rrvar_applied_wrenches!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_applied_wrenches= new WireUnicastReceiver<List<com.robotraconteur.geometry.Wrench>>(value);
    }
    }
}
public class Joint_default_impl : Joint{
    protected WireBroadcaster<double[]> rrvar_axes_position;
    protected WireBroadcaster<double[]> rrvar_axes_velocity;
    protected WireBroadcaster<double[]> rrvar_axes_force;
    protected WireBroadcaster<JointWrench> rrvar_force_torque;
    protected WireUnicastReceiver<double[]> rrvar_apply_axes_force;
    public virtual Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_scoped_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_scoped_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_parent_link_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_parent_link_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_child_link_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_child_link_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<uint> get_dof(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_dof(uint value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.geometry.Vector3[]> getf_global_axes(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.geometry.Vector3[]> getf_local_axes(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_axis_position(uint axis, double position,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_axis_velocity(uint axis, double vel,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Wire<double[]> axes_position {
    get { return rrvar_axes_position.Wire;  }
    set {
    if (rrvar_axes_position!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_axes_position= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<double[]> axes_velocity {
    get { return rrvar_axes_velocity.Wire;  }
    set {
    if (rrvar_axes_velocity!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_axes_velocity= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<double[]> axes_force {
    get { return rrvar_axes_force.Wire;  }
    set {
    if (rrvar_axes_force!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_axes_force= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<JointWrench> force_torque {
    get { return rrvar_force_torque.Wire;  }
    set {
    if (rrvar_force_torque!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_force_torque= new WireBroadcaster<JointWrench>(value);
    }
    }
    public virtual Wire<double[]> apply_axes_force {
    get { return rrvar_apply_axes_force.Wire;  }
    set {
    if (rrvar_apply_axes_force!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_apply_axes_force= new WireUnicastReceiver<double[]>(value);
    }
    }
}
public class JointController_default_impl : JointController{
    protected WireBroadcaster<Dictionary<string,double>> rrvar_joint_position;
    protected WireBroadcaster<Dictionary<string,double>> rrvar_joint_velocity;
    protected WireUnicastReceiver<Dictionary<string,double>> rrvar_joint_position_command;
    protected WireUnicastReceiver<Dictionary<string,double>> rrvar_joint_velocity_command;
    protected WireBroadcaster<Dictionary<string,double>> rrvar_joint_forces;
    public virtual Task<List<string>> get_joint_names(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_joint_names(List<string> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<string,com.robotraconteur.pid.PIDParam>> get_position_pid(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_position_pid(Dictionary<string,com.robotraconteur.pid.PIDParam> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<string,com.robotraconteur.pid.PIDParam>> get_velocity_pid(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_velocity_pid(Dictionary<string,com.robotraconteur.pid.PIDParam> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task add_joint(string name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_position_pid(string name, com.robotraconteur.pid.PIDParam pid,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_velocity_pid(string name, com.robotraconteur.pid.PIDParam pid,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Wire<Dictionary<string,double>> joint_position {
    get { return rrvar_joint_position.Wire;  }
    set {
    if (rrvar_joint_position!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_joint_position= new WireBroadcaster<Dictionary<string,double>>(value);
    }
    }
    public virtual Wire<Dictionary<string,double>> joint_velocity {
    get { return rrvar_joint_velocity.Wire;  }
    set {
    if (rrvar_joint_velocity!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_joint_velocity= new WireBroadcaster<Dictionary<string,double>>(value);
    }
    }
    public virtual Wire<Dictionary<string,double>> joint_position_command {
    get { return rrvar_joint_position_command.Wire;  }
    set {
    if (rrvar_joint_position_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_joint_position_command= new WireUnicastReceiver<Dictionary<string,double>>(value);
    }
    }
    public virtual Wire<Dictionary<string,double>> joint_velocity_command {
    get { return rrvar_joint_velocity_command.Wire;  }
    set {
    if (rrvar_joint_velocity_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_joint_velocity_command= new WireUnicastReceiver<Dictionary<string,double>>(value);
    }
    }
    public virtual Wire<Dictionary<string,double>> joint_forces {
    get { return rrvar_joint_forces.Wire;  }
    set {
    if (rrvar_joint_forces!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_joint_forces= new WireBroadcaster<Dictionary<string,double>>(value);
    }
    }
}
public class Sensor_default_impl : Sensor{
    public virtual Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public class CameraSensor_default_impl : CameraSensor{
    protected PipeBroadcaster<com.robotraconteur.image.Image> rrvar_image_stream;
    public virtual Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.image.Image> capture_image(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<com.robotraconteur.image.Image> image_stream {
    get { return rrvar_image_stream.Pipe;  }
    set {
    if (rrvar_image_stream!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_image_stream= new PipeBroadcaster<com.robotraconteur.image.Image>(value);
    }
    }
}
public class MultiCameraSensor_default_impl : MultiCameraSensor{
    protected PipeBroadcaster<Dictionary<int,com.robotraconteur.image.Image>> rrvar_image_stream;
    public virtual Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<int> get_camera_count(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_camera_count(int value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.image.Image> capture_image(int ind,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<Dictionary<int,com.robotraconteur.image.Image>> image_stream {
    get { return rrvar_image_stream.Pipe;  }
    set {
    if (rrvar_image_stream!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_image_stream= new PipeBroadcaster<Dictionary<int,com.robotraconteur.image.Image>>(value);
    }
    }
}
public class DepthCameraSensor_default_impl : DepthCameraSensor{
    protected PipeBroadcaster<com.robotraconteur.image.DepthImage> rrvar_image_stream;
    public virtual Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.image.DepthImage> capture_image(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<com.robotraconteur.image.DepthImage> image_stream {
    get { return rrvar_image_stream.Pipe;  }
    set {
    if (rrvar_image_stream!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_image_stream= new PipeBroadcaster<com.robotraconteur.image.DepthImage>(value);
    }
    }
}
public class RaySensor_default_impl : RaySensor{
    protected PipeBroadcaster<com.robotraconteur.laserscan.LaserScan> rrvar_scan_stream;
    public virtual Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.laserscan.LaserScan> capture_scan(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<com.robotraconteur.laserscan.LaserScan> scan_stream {
    get { return rrvar_scan_stream.Pipe;  }
    set {
    if (rrvar_scan_stream!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_scan_stream= new PipeBroadcaster<com.robotraconteur.laserscan.LaserScan>(value);
    }
    }
}
public class ContactSensor_default_impl : ContactSensor{
    protected WireBroadcaster<List<Contact>> rrvar_contacts;
    public virtual Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Wire<List<Contact>> contacts {
    get { return rrvar_contacts.Wire;  }
    set {
    if (rrvar_contacts!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_contacts= new WireBroadcaster<List<Contact>>(value);
    }
    }
}
public class AltimeterSensor_default_impl : AltimeterSensor{
    protected WireBroadcaster<double> rrvar_altitude;
    public virtual Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Wire<double> altitude {
    get { return rrvar_altitude.Wire;  }
    set {
    if (rrvar_altitude!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_altitude= new WireBroadcaster<double>(value);
    }
    }
}
public class SonarSensor_default_impl : SonarSensor{
    protected WireBroadcaster<double> rrvar_range;
    public virtual Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_range_min(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_range_min(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_range_max(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_range_max(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_radius(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_radius(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Wire<double> range {
    get { return rrvar_range.Wire;  }
    set {
    if (rrvar_range!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_range= new WireBroadcaster<double>(value);
    }
    }
}
public class MagnetometerSensor_default_impl : MagnetometerSensor{
    protected WireBroadcaster<com.robotraconteur.geometry.Vector3> rrvar_magnetic_field;
    public virtual Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Wire<com.robotraconteur.geometry.Vector3> magnetic_field {
    get { return rrvar_magnetic_field.Wire;  }
    set {
    if (rrvar_magnetic_field!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_magnetic_field= new WireBroadcaster<com.robotraconteur.geometry.Vector3>(value);
    }
    }
}
public class ForceTorqueSensor_default_impl : ForceTorqueSensor{
    protected WireBroadcaster<com.robotraconteur.geometry.Wrench> rrvar_force_torque;
    public virtual Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Wire<com.robotraconteur.geometry.Wrench> force_torque {
    get { return rrvar_force_torque.Wire;  }
    set {
    if (rrvar_force_torque!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_force_torque= new WireBroadcaster<com.robotraconteur.geometry.Wrench>(value);
    }
    }
}
public class GpsSensor_default_impl : GpsSensor{
    protected WireBroadcaster<com.robotraconteur.gps.GpsState> rrvar_state;
    public virtual Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Wire<com.robotraconteur.gps.GpsState> state {
    get { return rrvar_state.Wire;  }
    set {
    if (rrvar_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_state= new WireBroadcaster<com.robotraconteur.gps.GpsState>(value);
    }
    }
}
public class ImuSensor_default_impl : ImuSensor{
    protected WireBroadcaster<com.robotraconteur.imu.ImuState> rrvar_state;
    public virtual Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_parent_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_parent_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_update_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_update_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.datetime.Duration> get_last_measurement_time(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_last_measurement_time(com.robotraconteur.datetime.Duration value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_reference_pose(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Wire<com.robotraconteur.imu.ImuState> state {
    get { return rrvar_state.Wire;  }
    set {
    if (rrvar_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_state= new WireBroadcaster<com.robotraconteur.imu.ImuState>(value);
    }
    }
}
public class Light_default_impl : Light{
    public virtual Task<string> get_name(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_name(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_type(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_type(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.geometry.Pose> get_pose(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_pose(com.robotraconteur.geometry.Pose value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.geometry.Vector3> get_direction(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_direction(com.robotraconteur.geometry.Vector3 value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.color.ColorRGBAf> get_diffuse_color(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_diffuse_color(com.robotraconteur.color.ColorRGBAf value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.color.ColorRGBAf> get_specular_color(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_specular_color(com.robotraconteur.color.ColorRGBAf value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public static class RRExtensions
{
    public static double[] GetNumericArray(this JointWrench[] s)
    {
    var a=new ArraySegment<double>(new double[12 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this JointWrench[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 12 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 12*i,12);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this JointWrench[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 12 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 12*i,12);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}
